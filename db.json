{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/global-assets/myhead.jpg","path":"global-assets/myhead.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-redefine/source/assets/hbe.style.css","path":"assets/hbe.style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","path":"fontawesome/sharp-solid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/myhead.jpg","path":"images/myhead.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/redefine-favicon.svg","path":"images/redefine-favicon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","path":"images/wallhaven-wqery6-dark.webp","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","path":"images/wallhaven-wqery6-light.webp","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/images/wechat-code.png","path":"images/wechat-code.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","path":"webfonts/fa-sharp-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","path":"webfonts/fa-sharp-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/assets/build/styles.css","path":"assets/build/styles.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/home-sidebar.styl","path":"css/layout/home-sidebar.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","path":"fonts/Chillax/Chillax-Variable.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","path":"fonts/Chillax/Chillax-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","path":"fonts/Chillax/Chillax-Variable.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","path":"fonts/Chillax/Chillax-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/chillax.css","path":"fonts/Chillax/chillax.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","path":"fonts/Geist/GeistVF.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","path":"fonts/Geist/GeistVF.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","path":"fonts/Geist/GeistVF.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/geist.css","path":"fonts/Geist/geist.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","path":"fonts/GeistMono/GeistMonoVF.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","path":"fonts/GeistMono/GeistMonoVF.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","path":"fonts/GeistMono/GeistMonoVF.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","path":"fonts/GeistMono/geist-mono.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/layouts/categoryList.js","path":"js/layouts/categoryList.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/layouts/navbarShrink.js","path":"js/layouts/navbarShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/APlayer.min.js","path":"js/libs/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","path":"js/libs/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/Swup.min.js","path":"js/libs/Swup.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/Swup.min.js.map","path":"js/libs/Swup.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","path":"js/libs/SwupPreloadPlugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","path":"js/libs/SwupPreloadPlugin.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","path":"js/libs/SwupProgressPlugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","path":"js/libs/SwupScriptsPlugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","path":"js/libs/SwupScrollPlugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","path":"js/libs/SwupScrollPlugin.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","path":"js/libs/SwupSlideTheme.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/Typed.min.js","path":"js/libs/Typed.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/minimasonry.min.js","path":"js/libs/minimasonry.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/odometer.min.js","path":"js/libs/odometer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/waline.mjs","path":"js/libs/waline.mjs","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/libs/waline.mjs.map","path":"js/libs/waline.mjs.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/hbe.js","path":"js/plugins/hbe.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/masonry.js","path":"js/plugins/masonry.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/typed.js","path":"js/plugins/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/codeBlock.js","path":"js/tools/codeBlock.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","path":"js/tools/lightDarkSwitch.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/localSearch.js","path":"js/tools/localSearch.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/imageViewer.js","path":"js/tools/imageViewer.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","path":"js/tools/scrollTopBottom.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/js/tools/tocToggle.js","path":"js/tools/tocToggle.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-redefine/.gitignore","hash":"9573fa414d4d41ccf48a3bdd2b183ac7dec484d5","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.npmignore","hash":"79596a6faba67852ff4d0426602141426f48639f","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/CONTRIBUTING.md","hash":"c6ef834f602b7ae02e2863a2a857e0ce8d392f15","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/README.md","hash":"532badccacd8b17376b54d1042eee9599e8bb39f","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/DONATION.md","hash":"c04ce21a6a0ff9ccd31e792abd17fe6257c681ab","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/README_zh-CN.md","hash":"c670a196349beb3c7512977ab650cac5ca3dcfb3","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/README_zh-TW.md","hash":"2fe52c3da506f864f536097c735179b00d11c341","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/LICENSE","hash":"1de7bacb4fbbd7b6d391a69abfe174c2509ec303","modified":1722302880071},{"_id":"themes/hexo-theme-redefine/package.json","hash":"d79edcfb4eb38331ced023014131a780d73eaca1","modified":1722302880081},{"_id":"themes/hexo-theme-redefine/.github/FUNDING.yml","hash":"7d7dc34bf08883dad940625ac098790bd1a50fb0","modified":1722302880069},{"_id":"themes/hexo-theme-redefine/_config.yml","hash":"7c8cf8254f09252007e77edbb86e83bd22f51a5b","modified":1722996329521},{"_id":"themes/hexo-theme-redefine/tailwind.config.js","hash":"27227462bb6dc16b57fcc75baa17e354f841b6e4","modified":1722302880231},{"_id":"themes/hexo-theme-redefine/vercel.json","hash":"357c1fd2678f8ae4a9a852a1a6888c8eca774551","modified":1722302880231},{"_id":"themes/hexo-theme-redefine/languages/en.yml","hash":"157f84538d34fb3d47a05482a8b45c1e1a5c8ef8","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/languages/ja.yml","hash":"8a125bb668274de2985f12f3eb9b9857e22e389f","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/languages/zh-CN.yml","hash":"57ab0bc7dd9644e9c3b6e46c04679cdd627c0f2d","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/languages/zh-TW.yml","hash":"84819d96f8c27f51ece8f1eabc74b9f79b16db2e","modified":1722302880072},{"_id":"themes/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/archive-content.ejs","hash":"2adfbb9954af9fcf2047c8abc85d4664d45167af","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/category-content.ejs","hash":"5c4fdc9c2b7f225edb7ebb2abf6925b81c5e698f","modified":1722302880079},{"_id":"themes/hexo-theme-redefine/layout/article-content.ejs","hash":"09ca378fcc8a8355f0503ed5fbe0dfe6b54a06b8","modified":1722302880079},{"_id":"themes/hexo-theme-redefine/layout/category-list.ejs","hash":"4bd20b18bdf10dfdce5ddcddfac2605800d18973","modified":1722302880079},{"_id":"themes/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1722302880079},{"_id":"themes/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1722302880079},{"_id":"themes/hexo-theme-redefine/layout/page.ejs","hash":"75fe42c1735b0669592eb81e46b62a748b685873","modified":1722302880080},{"_id":"themes/hexo-theme-redefine/layout/tag-content.ejs","hash":"6134aa2a112b9d8daa3eeaf9a1ee41bbeaf7eb24","modified":1722302880080},{"_id":"themes/hexo-theme-redefine/scripts/dataHandle.js","hash":"3a069d3f529dceed3fd98e99d5940989f1087305","modified":1722302880081},{"_id":"themes/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1722302880080},{"_id":"themes/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1722302880080},{"_id":"themes/hexo-theme-redefine/layout/layout.ejs","hash":"e13ebcba0323e0641457d04009c6b548b914ef3d","modified":1722907891527},{"_id":"themes/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-chinese.yml","hash":"5616b1ba5ddcd91755fce55fdb6d13022e5d39c0","modified":1722302880069},{"_id":"themes/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-english.yml","hash":"23bcdb79064f0e967258be662777c3a424140782","modified":1722302880069},{"_id":"themes/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-english.yml","hash":"e43dc9d37f8ad5cdfd12aacf6f85b71346ae6e9b","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"46bdc96146a893148bfbc37e47881aa25769d32c","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/workflows/aliyun-cdn-publish.yml","hash":"18975c5422509b0fb7c3b6ddd788eac65802781a","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-chinese.yml","hash":"b55c4e79ea4946318324c79b8be61a8ae16cc5c9","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/workflows/production-deployment.yml","hash":"d411d426c6df79ac7e487401f0f11206c245d1c1","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/workflows/preview-deployment.yml","hash":"d4ffce573836dfd5eaf3f247a4c1943462ade699","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/.github/workflows/stale-issues.yml","hash":"e51a46d8af88087fe7512885ec3a87df753c3776","modified":1722302880070},{"_id":"themes/hexo-theme-redefine/layout/_meta/article-copyright.ejs","hash":"8e97d76ded33d1e334c376451e2f3d5fd177a958","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/_meta/article-info.ejs","hash":"1d551beb7cc47d6c841ce63a7f0f0ffb30c1770b","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/_partials/404-template.ejs","hash":"e3574f623ea22ec3e90413909321a9a3b447f7e2","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"e97bb31749d8b29177aeb743429512fa5033e60c","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/layout/_partials/head.ejs","hash":"c451c9110ec362f9a1278248571652c7dd42c4ee","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/layout/_meta/home-article.ejs","hash":"b54a0df26341fa5f26a6e1eedb91cd11014d50c5","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/_partials/home-background.ejs","hash":"dd120259ab091b8087d0194ea2291676556efad8","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/home-content.ejs","hash":"9443d55dd5ae33350fec8181b43057b93f831604","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/home-banner.ejs","hash":"5cc6d0a703c207e86c9def16c0885ec69b3c8658","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/home-sidebar.ejs","hash":"976d24d01194a9340957617db24b30f63c1ba66b","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/navbar.ejs","hash":"bc2aa13a6bbb12eb7a4c0d7e5f1df965a2bde311","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"5d03f543ae291598ee227af758da73304a51633e","modified":1722302880075},{"_id":"themes/hexo-theme-redefine/layout/_partials/preloader.ejs","hash":"c75cbf929758610244e8cd2cffa919462bfb1238","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"1f0219c25aa35f4129686f290e987a3f28b3869d","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_plugins/aplayer.ejs","hash":"c8f275cdbbe14b4673c69f7c1463b1f830ec8e40","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_plugins/swup.ejs","hash":"9fbfd2872dfbe92ec715357d5238647987d8cbdf","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_widgets/essays.ejs","hash":"e4332342b7dd95449c2a84edfe8323f54db6f4b5","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/archive-list.ejs","hash":"d0dd3ef263f9cd0d5908a46a0f1c6b9ac64237e0","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/friends-link.ejs","hash":"bacaf6f0e958fa7d9be17a59d3a8bae4b9119501","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/local-search.ejs","hash":"72c9acca0280f0e63e6a5d31618dd2707bdbec3f","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/masonry.ejs","hash":"6b8ec5cff3dcf9f494b32237e6911c6e1e9dd9a1","modified":1722302880077},{"_id":"themes/hexo-theme-redefine/layout/_widgets/paginator.ejs","hash":"a237e7b858e0cf32ca67553d540f7c5f7239a8d0","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/_widgets/post-tools.ejs","hash":"c2d193e84e0781423ce1c018ee2be1116359d694","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/_widgets/progress-bar.ejs","hash":"4cab094eafc72b19662a7c9eb888e632d7bb15e7","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/_widgets/side-tools.ejs","hash":"3b6b75a902ba673f8f0a144db63bd144d0d5b648","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/_widgets/tagcloud.ejs","hash":"640e40c859c610ae1d97b1fac7fb39b986b9f676","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/layout/_widgets/toc.ejs","hash":"46ef94dca9be59d163f6b4cba16e1695e8020bc3","modified":1722302880078},{"_id":"themes/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":1722302880081},{"_id":"themes/hexo-theme-redefine/scripts/events/welcome.js","hash":"79c297334542c7d8eec10bd1c10390422d26f20c","modified":1722302880081},{"_id":"themes/hexo-theme-redefine/scripts/filters/encrypt.js","hash":"0daf029e7441426afcab94f5f9e1ed316e3b71f6","modified":1722302880081},{"_id":"themes/hexo-theme-redefine/scripts/filters/imgHandle.js","hash":"b396fe7b6cbc331f2952aa7561f96c1f250d8c52","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/filters/lazyloadHandle.js","hash":"f8ae44311e6463e887c07a41910ebade8766bac2","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/filters/linkHandle.js","hash":"7d8cb128dbfed1a4ef9b07142a63ba0c6c383628","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/filters/stylHandle.js","hash":"8a8bf069ce096bd7b42952c8e50c3c89758cbc13","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/filters/tableHandle.js","hash":"c500c45cd9221788df1f31939c5399eabb62ebb5","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"b9ede93bfd16af13871625d2d127bf79d99724d1","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/helpers/configExport.js","hash":"c1e5b36a8d8e97218c8cc1aab77ec38d5457c846","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/helpers/seoGenerate.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/helpers/themeHelpers.js","hash":"fba0d764bff87988d253cdfb54fd373abe33b1c9","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/helpers/walineConfig.js","hash":"9f2c3d6c4c7cf6212d28be0729816cd66921bd67","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/modules/btn.js","hash":"aa7a34ff5fb0a624163c38fffe0746cef44d2ea3","modified":1722302880083},{"_id":"themes/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":1722302880084},{"_id":"themes/hexo-theme-redefine/scripts/modules/folding.js","hash":"cfa6646c1350c557430149bd52578c6cac59063b","modified":1722302880084},{"_id":"themes/hexo-theme-redefine/scripts/modules/note-large.js","hash":"b3e19b9a5c57e3e029bf9ead84aac750f799a9b3","modified":1722302880084},{"_id":"themes/hexo-theme-redefine/scripts/modules/note.js","hash":"8fc9f2e7d78fe2d1644828d8a79e2c48597f6103","modified":1722302880084},{"_id":"themes/hexo-theme-redefine/scripts/modules/tabs.js","hash":"74e3b0cdd009206f7b78b04dcb96eccd86e7a996","modified":1722302880084},{"_id":"themes/hexo-theme-redefine/source/assets/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1722302880085},{"_id":"themes/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1722302880086},{"_id":"themes/hexo-theme-redefine/source/css/style.styl","hash":"d9450b06a5391ba6f62690bfef2071a1c8e7e893","modified":1722302880093},{"_id":"themes/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1722302880096},{"_id":"themes/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1722302880099},{"_id":"themes/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1722302880099},{"_id":"themes/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1722302880100},{"_id":"themes/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1722302880100},{"_id":"themes/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1722302880100},{"_id":"themes/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1722302880100},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1722302880100},{"_id":"themes/hexo-theme-redefine/source/images/loading.svg","hash":"938c2a41c8ba18e37ed659e481696e40a4c8f3a4","modified":1722302880108},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1722302880101},{"_id":"themes/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1722302880101},{"_id":"themes/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":1722302880108},{"_id":"themes/hexo-theme-redefine/source/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":1722302880108},{"_id":"themes/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":1722302880109},{"_id":"themes/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1722302880109},{"_id":"themes/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1722302880109},{"_id":"themes/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1722302880109},{"_id":"themes/hexo-theme-redefine/source/js/main.js","hash":"9d1d5167d8b966786268841abdf3c1639fd6d13a","modified":1722302880149},{"_id":"themes/hexo-theme-redefine/source/js/utils.js","hash":"00fe71414bf6a95bd4438cb301cf9096df90c46c","modified":1722302880151},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1722302880231},{"_id":"themes/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"e0c2e22351d2740e7f7584028a9ea7c87f26372f","modified":1722302880073},{"_id":"themes/hexo-theme-redefine/layout/_partials/comments/giscus.ejs","hash":"5a20975c17daeed5a602dedd0682a29d7c56e42f","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"1e1cf5e5f883f2bde0a76d6edb1d42bbd125c313","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1722302880231},{"_id":"themes/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"2945e818e4406fbb5628a465023c7e4d445c0975","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"35239e49743c6b7f40014bd753bff9c415b5fcbb","modified":1722302880074},{"_id":"themes/hexo-theme-redefine/scripts/filters/lib/hbe.default.js","hash":"fee2c92011ef007121b992193bbab0f3b196d873","modified":1722302880082},{"_id":"themes/hexo-theme-redefine/layout/_partials/sidebar-components/author.ejs","hash":"422aed0f3f67529c1ea87ee43f8f680ffc531b45","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_partials/sidebar-components/avatar.ejs","hash":"47cd8318471493c82f5e5983550145d4fd0a2ddc","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/layout/_partials/sidebar-components/statistics.ejs","hash":"4329363d232de541e1cb8f24eb59c1a8bacc9b9c","modified":1722302880076},{"_id":"themes/hexo-theme-redefine/source/css/common/animated.styl","hash":"ab52b066c427cee62d67e4da136878114c7b1afe","modified":1722302880086},{"_id":"themes/hexo-theme-redefine/source/css/common/basic.styl","hash":"0493e7ae8c2b07cf1172fa1b68ea1ec74795878b","modified":1722302880086},{"_id":"themes/hexo-theme-redefine/source/assets/build/styles.css","hash":"7fce3d8245ba8d012d32870baddc870860e512fc","modified":1722302880085},{"_id":"themes/hexo-theme-redefine/source/css/common/markdown.styl","hash":"19dbca4623d9fc7005d4a3447eb5a3b669cb8425","modified":1722302880087},{"_id":"themes/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"ff099b1959829e3070e5077c4a3b13e1c1573e79","modified":1722302880087},{"_id":"themes/hexo-theme-redefine/source/css/common/variables.styl","hash":"233cce0c26fb59327a1a308a869aeb6faf4782f8","modified":1722302880087},{"_id":"themes/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"4e329547447c716c986e0b4a4f54afc59fc6b486","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"2328b11599e30e84aa3e801e177f11ad45abc0f4","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"4f9a5559b5269ec74b5f49ac113268f747bf0243","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"d33a8d0e8f2d58d759bf7b9da69c2aa6a0d9f433","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"3f6900c804c9e9d5a8009cbe974a0e3eb88549a2","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/home-sidebar.styl","hash":"fe46f60124505310449ec76f7dd09795a73491e3","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/page.styl","hash":"e5c0b44623d18d0c2674069b3796546dd9857b8d","modified":1722302880093},{"_id":"themes/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"6c9ec582c1d8699bdff5a4cd1524121cc6ca8522","modified":1722302880093},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1722302880103},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/chillax.css","hash":"210179f53c6bce91a12ca6db9129184cc1549c36","modified":1722302880103},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1722302880103},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/geist.css","hash":"17f37a09d6192f06b2190f8319114238b0a2ec8c","modified":1722302880106},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1722302880106},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","hash":"b89d5af7e04df579c8ad62c0ea445ff7d16eec11","modified":1722302880108},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1722302880108},{"_id":"themes/hexo-theme-redefine/source/js/layouts/categoryList.js","hash":"eb1af2cd0726f56ff7861222ea543315fe295a17","modified":1722302880110},{"_id":"themes/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"c06323d68bbdebbb685db5010e7655b8ed0caf42","modified":1722302880110},{"_id":"themes/hexo-theme-redefine/source/js/layouts/navbarShrink.js","hash":"3e80bf9ef719b2ddb2d1c4b67eb169d2ef52dbb8","modified":1722302880110},{"_id":"themes/hexo-theme-redefine/source/js/layouts/toc.js","hash":"7a768982f6cb1f40552cce063d5743fe862db762","modified":1722302880110},{"_id":"themes/hexo-theme-redefine/source/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1722302880111},{"_id":"themes/hexo-theme-redefine/source/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1722302880113},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1722302880114},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1722302880114},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1722302880114},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1722302880114},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1722302880114},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1722302880115},{"_id":"themes/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1722302880115},{"_id":"themes/hexo-theme-redefine/source/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1722302880115},{"_id":"themes/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1722302880116},{"_id":"themes/hexo-theme-redefine/source/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1722302880141},{"_id":"themes/hexo-theme-redefine/source/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1722302880141},{"_id":"themes/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1722302880141},{"_id":"themes/hexo-theme-redefine/source/js/plugins/aplayer.js","hash":"1b7d9dff8db52b14825775fd55054c6adf269bf7","modified":1722302880149},{"_id":"themes/hexo-theme-redefine/source/js/plugins/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":1722302880149},{"_id":"themes/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"303254d382869ed618025fcb328426bd10314583","modified":1722302880149},{"_id":"themes/hexo-theme-redefine/source/js/plugins/masonry.js","hash":"92734a30a21f8b16f20aa75208f6c082890275fb","modified":1722302880149},{"_id":"themes/hexo-theme-redefine/source/js/plugins/typed.js","hash":"01799d5c07633f33b1d2893f524054074d56ec65","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/tools/codeBlock.js","hash":"344e6c83e6ffda22f6e5bc724d603066b49a7d8b","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"964ec5c25a8d78763ba2ba9bfbd5b1b49ed05381","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","hash":"9e54fa4310bb98ea5ba61780a9ef56d05d475203","modified":1722302880151},{"_id":"themes/hexo-theme-redefine/source/js/tools/imageViewer.js","hash":"f2ed02b6489c601821cd257c6ffa28c25f07bdd7","modified":1722302880150},{"_id":"themes/hexo-theme-redefine/source/js/tools/tocToggle.js","hash":"c2224ff0370fcf109e94194613b9480a3913c82d","modified":1722302880151},{"_id":"themes/hexo-theme-redefine/source/js/tools/runtime.js","hash":"eb0374b6f033f7ac25f49b1b079aa163e14b0fcd","modified":1722302880151},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"a3cc2e7a83a8ed575681f6cb6e3b4ef205689c2a","modified":1722302880086},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"2d498609f0b4608e6346d100d3effad0c4aa2c54","modified":1722302880087},{"_id":"themes/hexo-theme-redefine/source/css/layout/_modules/aplayer.styl","hash":"20b9b774e75e7a44cc4bdf1cbefe67d98d9f3bb7","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"0593c3555640bb9132caaccac9821225ea3b97c8","modified":1722302880086},{"_id":"themes/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"b5e5c2407eb83ae4b3ee4ed73490dcd41edef705","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"18bd3c1d00e2cc6416cef69433b207ae5c947ba1","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"37b2a4a0669414c74498ed0ecae873c90b15fe6e","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"fb5f2f223f7d4ed86d3693fdc0977362f456212e","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"1c869018d795c06d34738d4924e207bab9571f59","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"1f680910751b36c4445a48c5a48eda3187412eaf","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"12fad2f674e8a7ad009cabecf4e98b65d5ed8b1e","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"16215f6fe664d1ddc5744a626405bc774dc30f70","modified":1722302880088},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"b9028c74a9f75536d5a7cee77a25a5d77469515a","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"6c8eeb7a96cae110cd9a684a3a5076148b8154d8","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"a9c99c57b27afbe7f00f1f14f0e46c41748affb5","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"c57dccb2fdc13fc7bceb730c7b0eda9590557bd9","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/home-banner.styl","hash":"39b3753f86bf30b6eb5276cc2a2aa43e7729a303","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/navbar.styl","hash":"dea655ebe2bbf57324da195e42185a4df2c7946a","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"53421b731f3d7ed34a3a4c87405e06ae3d6519e0","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"d602c2fe191d2c639f7cd8c4d0ee618f8c80f5c1","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"756f84cf4ac8c21a169c60c8f227954a09218bee","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"d3715280d9b62d89ccd1b79ab5e5f030669f4d88","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"995982b8c228f7386d352042f64587d06663716e","modified":1722302880091},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"13949981a5afa2b0483da1836af5999d992961f9","modified":1722302880092},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"71529ec72f356c78f75a752e5400c1197aa5ea96","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"85f26189ec6dee13a0a743687e7b5391f170c33f","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"448cbc045bcffa2d666094b81dd99eb980676fff","modified":1722302880089},{"_id":"themes/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"0663e8e50eff65afb4dbcbc7c4758d8acdd1d368","modified":1722302880090},{"_id":"themes/hexo-theme-redefine/package-lock.json","hash":"c34cc2d5f2a7703bcf38c029008f2b43c4870545","modified":1722302880080},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1722302880154},{"_id":"themes/hexo-theme-redefine/source/images/wechat-code.png","hash":"12a3af0ec234812d10ffdcb027aa15c3bbedd00f","modified":1722911664333},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1722302880105},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1722302880107},{"_id":"themes/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1722302880105},{"_id":"themes/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1722302880107},{"_id":"themes/hexo-theme-redefine/source/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1722302880113},{"_id":"themes/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1722302880098},{"_id":"themes/hexo-theme-redefine/source/images/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1722906171352},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1722302880153},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1722302880102},{"_id":"themes/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1722302880103},{"_id":"themes/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1722302880112},{"_id":"themes/hexo-theme-redefine/source/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1722302880142},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1722302880209},{"_id":"themes/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1722302880097},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1722302880217},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1722302880171},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1722302880184},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1722302880201},{"_id":"themes/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1722302880095},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1722302880229},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1722302880207},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1722302880216},{"_id":"themes/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1722302880120},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1722302880198},{"_id":"source/.DS_Store","hash":"6350c234b9fa8cbf084c239349140acf99361bc8","modified":1721359621489},{"_id":"source/about/B.md","hash":"14ab557f204c05b69f4d8bdb9de43949d8804b1d","modified":1722934377433},{"_id":"source/about/friends.md","hash":"e5e895a1fc8a396b9f5d466def680cb50f5968a8","modified":1722934393265},{"_id":"source/about/index.md","hash":"68d6230943731c1e34a23c6c361823a10d10304a","modified":1722934400883},{"_id":"source/about/A.md","hash":"d324f997465a9eb48d77d2b84e3258902965ddf6","modified":1722934381093},{"_id":"source/tags/index.md","hash":"d63432e802039694e92be1ec20aef3f21931d2a9","modified":1722932647131},{"_id":"source/categories/index.md","hash":"7158df4dcf9befba75c1142706d272ba4e7baf6d","modified":1722933431629},{"_id":"source/_posts/hexo-usage/hexo创建categories页面.md","hash":"064d0befc21791a76e8f0e36613f8a06b00fb8a5","modified":1722933315905},{"_id":"source/_posts/hexo-usage/hexo创建tags页面.md","hash":"14b76dd7ec8ac91bb23b6594228cf4ed0f1f9865","modified":1722933325954},{"_id":"source/_posts/git相关操作/001-拉取submoduls仓库/README.md","hash":"0626b8b7ebf2e257a2a80d3720ef96db41bbf15b","modified":1723171827892},{"_id":"source/_posts/git相关操作/002-gitignore/README.md","hash":"d5881ec96da95c952afa08783f3cc0af0d2619d5","modified":1723171819857},{"_id":"source/_posts/hexo-usage/hello-world.md","hash":"24002917fb4e12a1d91a71155c9a22b0fec2be99","modified":1723171780365},{"_id":"source/_posts/hexo-usage/hexo-usage-2024/hexo2024.md","hash":"5be0ca92de581e69d83d115d98b4a43df7c086f5","modified":1723183964357},{"_id":"source/_posts/hexo-usage/hexo本地图片/assets/A.gif","hash":"0341ad334002a676d54ea6ac3669c362d9e88251","modified":1723184023491},{"_id":"source/_posts/hexo-usage/hexo本地图片/hexo本地图片.md","hash":"dfd5bd311b06f1b907385f83dcb69fce4766b4fa","modified":1723188830943},{"_id":"source/_posts/hexo-usage/hexo新建页面.md","hash":"6fa225ffa1e633e6c9397e05458bf6b8cafda11a","modified":1722933334324},{"_id":"source/_posts/前端/HTML/002-什么是HTTP? HTTP 和 HTTPS 的区别?/index.md","hash":"fe74e5ce5d72802bf2f89346eaed7bfde6e288eb","modified":1723087955215},{"_id":"source/_posts/前端/ES6/001-let、const解决了什么问题？/index.md","hash":"4ead9b2a3c0dd7e0df3b93bcc436a392dabae0c4","modified":1723182443525},{"_id":"source/_posts/前端/HTML/001-说说Cookie、Session和Token的区别？/index.md","hash":"818fb9fcceccf167e601dca7173ea57431a75c48","modified":1723087951407},{"_id":"source/_posts/前端/Vue/001-v-show和v-if有什么区别？使用场景分别是什么？/index.md","hash":"72c18fce1509ad2b30cf6801ac34d6d13291a423","modified":1723087940505},{"_id":"source/_posts/iOS/Swift/002-Swift与OC的区别/README.md","hash":"1c0ec4490835f7964190822df25ae8d653b6b091","modified":1723021128573},{"_id":"source/_posts/前端/Vue/002-Vue组件之间的通信方式都有哪些？/index.md","hash":"ef5c5dfd5f8590a75d16abfe6d2e73c0e9994f51","modified":1723087943909},{"_id":"source/_posts/iOS/Swift/001-目录/README.md","hash":"517c41c4230d9a9c75f2bdbaa21bc52e60b7be90","modified":1723021135671},{"_id":"source/_posts/iOS/OC/000-面试题导航链接/README.md","hash":"91e1d11974fe5125547a5288c733a09b8658221f","modified":1723021166661},{"_id":"source/_posts/iOS/Swift/08-源码阅读/001-Kingfisher/index.md","hash":"d5d6d434cfe68c5ffc9792e519ffe2f847bd37df","modified":1723169039088},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/003-iOS属性关键字/README.md","hash":"38475bc9a2018cfd1f91a78e8175d239e3ff7e54","modified":1722933567188},{"_id":"source/_posts/iOS/OC/08-iOS组件化/index.md","hash":"8737bdcca1ee2decc195b25ce7945bf4a95f1c8b","modified":1723168868672},{"_id":"source/_posts/iOS/OC/021-APNS/README.md","hash":"29ac1851c3d4b81bc102e5ccd5b6737f480d62a6","modified":1723020144036},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/005-ARC下所有权修饰符/README.md","hash":"18f49f4efde7f489106c3cee4f91122c2d72d9fd","modified":1722933574622},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/008-@property的本质是什么？/README.md","hash":"0f5d89a1a754226bac29dc3ee3c86ac0dda6ff8f","modified":1722933585899},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/009-@synthesize和@dynamic分别有什么作用？/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1721635281648},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/009-@synthesize和@dynamic分别有什么作用？/README.md","hash":"4c11716151eb2696d1bb3d8d55172d119be627ca","modified":1722933589575},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/004-为什么UITableView的delegate属性修饰符assign/README.md","hash":"a65f3827165570df0fbd5bd16c7a4e8089dd65d8","modified":1722933571012},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/010-weak指针被自动置为nil是如何实现？/README.md","hash":"4f883b7092609a303e22ab60624481b8638d0b10","modified":1722933593709},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/.DS_Store","hash":"5b237427a7735c478eb8b3712b4a9b6477241cd6","modified":1721635281698},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README.md","hash":"1f89079cda344c2499fce9ed4da1923465a79059","modified":1722933647968},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/013-iOS中的属性变量、成员变量、实例变量/README.md","hash":"55804e524bde5b66be4bf7888deb784ba2751bed","modified":1722933651846},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/015-为什么block要用copy修饰？/index.md","hash":"9fd2f31aad9c92ab648a7947d18a45a94c432e3c","modified":1723108978597},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/014-OC中，@public、@protected、@private和@package的使用/README.md","hash":"12a2c16a4fd08ef3be50594b21cc7a755e900734","modified":1723018492082},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy.md","hash":"de3d5fe0417e3df126f2e851566e2904e42274dd","modified":1723084902385},{"_id":"source/_posts/iOS/OC/002-内存管理/001-简述OC内存管理/README.md","hash":"e4a1263432cd702b3996dc661dc032d283ddd972","modified":1722933558955},{"_id":"source/_posts/iOS/OC/002-内存管理/006-autorelease和Autorelease Pool/README.md","hash":"6d43bb0bda67effb2f4b5382c5daf2797d9ddbfe","modified":1722933578180},{"_id":"source/_posts/iOS/OC/002-内存管理/007-Core Foundation不支持ARC/README.md","hash":"bf912bd8a3a32509f4dd78d2e6dfe46f5518db2f","modified":1722933582319},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README.md","hash":"6c0aa7bfaa3850fe9392aebfbe2a13447561807d","modified":1722933637701},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/.DS_Store","hash":"2e5f00eb337f220cafddf91c2f0c645cfbc2c355","modified":1721635281676},{"_id":"source/_posts/iOS/OC/002-内存管理/023-内存区域/README.md","hash":"1cc4b1aac2d23085fce0f349ec6cd33c84828f2d","modified":1722933706108},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README.md","hash":"4bf3aa7bddb50375aab9b949d68fee38ec569e09","modified":1722933670830},{"_id":"source/_posts/iOS/OC/003-OC方法/001-UIView与CALayer/index.md","hash":"b269751fce957fbd86c572cd7debc5d21829eb83","modified":1723169661044},{"_id":"source/_posts/iOS/OC/003-OC方法/015-反射是什么？/README.md","hash":"1994ed2b3d3d6bb4db0c866d50c141e78aeafd4e","modified":1722933662031},{"_id":"source/_posts/iOS/OC/003-OC方法/016-imageName和imageWithContextOfFile 的区别？/README.md","hash":"ba677b6da723facb88a80c760d3f176c9ea78e34","modified":1722933666411},{"_id":"source/_posts/iOS/OC/003-OC方法/020-View的layout的方法/README.md","hash":"77e4f3636b4766721fbbcf4f22e48b522d5e18d7","modified":1722933693804},{"_id":"source/_posts/iOS/OC/003-OC方法/019-定时器/README.md","hash":"492418c027312de7aeb2b1aed7b3934090a09368","modified":1722933686881},{"_id":"source/_posts/iOS/OC/003-OC方法/019-定时器/后台定时器.md","hash":"a0b8258cc3821dd35f20de7a313ec91415744f24","modified":1722933684032},{"_id":"source/_posts/iOS/OC/003-OC方法/019-定时器/定时器循环引用.md","hash":"7949a626beb20005270d7e05e5a75721e6bd77be","modified":1722933681291},{"_id":"source/_posts/iOS/OC/003-OC方法/022-Controller生命周期/loadView介绍.md","hash":"cd7ac4d1d69ad7bbfa4acb9f746f574dace22a5a","modified":1723020662044},{"_id":"source/_posts/iOS/OC/003-OC方法/024-static与extern/README.md","hash":"f0ff1e610eb8e8eb29690e6774333a18cece7498","modified":1722933709522},{"_id":"source/_posts/iOS/OC/003-OC方法/022-Controller生命周期/Controller的生命周期.md","hash":"de708e1fa95378be250b80ededca869d6e1e9542","modified":1723020790038},{"_id":"source/_posts/iOS/OC/003-OC方法/027-iOS中float四舍五入+末尾清零/README.md","hash":"a20e25fe2ea7c240dacc6257d16f7163f58ef953","modified":1723082884473},{"_id":"source/_posts/iOS/OC/003-OC方法/025-NSString/判断两个NSString是否相同.md","hash":"ad554fd70792efe3d0c06d8059b6e1e0c64db013","modified":1722933712938},{"_id":"source/_posts/iOS/OC/003-OC方法/026-iOS随机数/README.md","hash":"fa97168bcb4cc701cffa36fbae4fd91efda9da51","modified":1723082186450},{"_id":"source/_posts/iOS/OC/003-OC方法/028-浮点数精度丢失/README.md","hash":"a0e81f73055bd9ffa8a317577bc0e3fb9757a70d","modified":1723098449854},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README.md","hash":"b738590946edbe7187eef26a1cbfea2f1a085333","modified":1723084310777},{"_id":"source/_posts/iOS/OC/005-Runloop/01-Runloop应用场景/index.md","hash":"5012c6610507443ebae0f2fb7b1243b4c159817c","modified":1723168332105},{"_id":"source/_posts/iOS/OC/006-多线程/002-iOS同步机制/README.md","hash":"268e738c5bba983b4c566299c664a8e1ef13f022","modified":1722933563626},{"_id":"source/_posts/iOS/OC/009-混编/001-WKWebView秒开/index.md","hash":"688cf91a6f1547f713b3ee0b27c254eaea3ff4fc","modified":1723169278766},{"_id":"source/_posts/iOS/OC/006-多线程/018-GCD与Operation的对比与实践/README.md","hash":"7fc8efb5cba7f8d868791173c7fe9ef77d370f02","modified":1722933676060},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/iOS开发常用宏.md","hash":"48f511f105620492d6b68f6ad1dd16a0a8530907","modified":1723107429556},{"_id":"source/_posts/iOS/OC/021-APNS/README/001.webp","hash":"ad36026e142f355592aa1965c32ff5427a2ef8e3","modified":1723019265636},{"_id":"source/_posts/iOS/OC/021-APNS/README/002.webp","hash":"41c33a61a8bd3cc39dce164599c39eef09755cd1","modified":1723019265642},{"_id":"source/_posts/iOS/OC/021-APNS/README/003.webp","hash":"454e9e01bfbabb47d47d73d04b77bbbb567d420b","modified":1723019326250},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/.DS_Store","hash":"da0cba681b3e3bdf50ea61197015d89087cb069d","modified":1721635281700},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/AA.h","hash":"6579547beb5fcd313aca03a4947a656079e523de","modified":1721635281701},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/AA.m","hash":"858c42efa41e67c3ca6de4927f0249c0e63704e8","modified":1721635281702},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/BB.h","hash":"0e9ea58b61f84e8c953f1e1b5c13b49479ebdc7f","modified":1721635281703},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/BB.m","hash":"9210199b1501db40f72653cd15f8566b02ee4547","modified":1721635281704},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/005.png","hash":"216dd01ffd837f4cc05647088228a3a24f2df612","modified":1721635281677},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/006.png","hash":"d9f2e02d7b93fa768731cef3f4ee2522397415df","modified":1721635281678},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/005.webp","hash":"b893d9788e2751fe148c6be843f3fa1263c947fa","modified":1723083243810},{"_id":"source/_posts/iOS/OC/002-内存管理/001-简述OC内存管理/README/duck.jpeg","hash":"7f741316136aa9b19385781c1a254725b09181f8","modified":1721635379512},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/007.png","hash":"f290982595dbc8538820dff34e09da66def3f2d4","modified":1721635281679},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/006.png","hash":"505b5dde778cace6b7f491c0b382cdb2c6edc6cb","modified":1723084097868},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/001.webp","hash":"8cad2517b8d41f4c5fae1c5068b3eaf989480620","modified":1722322500246},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/002.webp","hash":"72eb4c87fd8edfcb7f7ed31f4bd09c878ac26136","modified":1722322500253},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/003.webp","hash":"d6547ec99a0e2e1b45494751c2c3907e021f6db7","modified":1722322500283},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/004.webp","hash":"95d80b7f77ac9a89d919c6af005a05d0c4d9f493","modified":1722322500268},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/003.png","hash":"1b4bc30694def0e12a55028db18c5cd13b65241f","modified":1723083956355},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test/main.m","hash":"d2accb3d64d636968c26adb8eb6794508b5b2d95","modified":1721635281705},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/project.xcworkspace/contents.xcworkspacedata","hash":"84243848f54b0c5983e1ed26defb41d262ce1354","modified":1721635281707},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist","hash":"df5fe739b8b3ab69cf1a32a8881c48a1662e0340","modified":1721635281709},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/xcuserdata/qiyeyun.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","hash":"16f2277d445acd98589e97d9dfecf3c73aeba3c7","modified":1721635281718},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/project.xcworkspace/xcuserdata/qiyeyun.xcuserdatad/UserInterfaceState.xcuserstate","hash":"d7ea0216ea5a4598a711405940e571f776b082ed","modified":1721635281715},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/project.pbxproj","hash":"ad44aaa1cdfc9c0187cec8d8cbbb1ade7ac7b9d9","modified":1721635281706},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy-demo/copy-test.xcodeproj/xcuserdata/qiyeyun.xcuserdatad/xcschemes/xcschememanagement.plist","hash":"e590af5a824b9b9aa87f1c353ebca4322d16f0fb","modified":1721635281720},{"_id":"themes/hexo-theme-redefine/source/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1722302880148},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/002.png","hash":"24fca7b6ffa21deb2dc383753ee71aff7d49c467","modified":1721635281723},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/001.png","hash":"28b939c4f9eb6b08cdb3ae9ba575c77308f38c6e","modified":1721635281721},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/003.png","hash":"ca07fed2398730d6576fb2a66893df187db53a34","modified":1721635281725},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/004.png","hash":"aee813960748034d5c2ff8f13ea765e7ee42b058","modified":1721635281727},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/001.png","hash":"99742b186847286790e562b6edb60b28f09dd35c","modified":1723083813679},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/004.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723083965163},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/005.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723083973089},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/006.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723083979045},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1722302880180},{"_id":"source/_posts/hexo-usage/hexo本地图片/hexo本地图片/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1723188163523},{"_id":"source/global-assets/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1722222048898},{"_id":"source/_posts/hexo-usage/hexo-usage-2024/hexo2024/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1722224333826},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1722302880227},{"_id":"themes/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1722302880168},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/002.png","hash":"1978db4ff676a9bf3704c734794c160099cdb0f6","modified":1723083819942},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/007.png","hash":"564155b1cd60b6c39681a04f38d08019a1e173f6","modified":1723084141894},{"_id":"source/_posts/iOS/OC/003-OC方法/001-UIView与CALayer/index/001.png","hash":"ab5cf57eb0590608ee34bdff24c877bb0d2435f5","modified":1723166195470},{"_id":"themes/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1722302880136},{"_id":"public/search.xml","hash":"d42dedd4f501c9da604a2842e7160b61cae98290","modified":1723191455567},{"_id":"public/404.html","hash":"a255643ec045adeabc335c1aee7b80379e9c1914","modified":1723191455567},{"_id":"public/about/A.html","hash":"5e9c9bf589dd11625237607d91c93b328bfc705e","modified":1723191455567},{"_id":"public/about/B.html","hash":"1aa5f106a17b5c7462c38fb71b5b96e874eb5ebb","modified":1723191455567},{"_id":"public/about/friends.html","hash":"b9c8adb5db02ac77c74eee793c312d714673077b","modified":1723191455567},{"_id":"public/about/index.html","hash":"4ef769193a7c545588ee5dcc5844272f076aabcd","modified":1723191455567},{"_id":"public/categories/index.html","hash":"42e84fb59fa6631887d6d7a7c836ef1002ca11de","modified":1723191455567},{"_id":"public/tags/index.html","hash":"20d26f9beae502db3d18984b593ddf44bfd9ab36","modified":1723191455567},{"_id":"public/2024/08/09/hexo-usage/hexo本地图片/hexo本地图片/index.html","hash":"4552dc3a1e51b8ee3ec5bfe71c760b060aa83c35","modified":1723191455567},{"_id":"public/2024/08/09/前端/ES6/001-let、const解决了什么问题？/index/index.html","hash":"6f5fd68912ea340c83b9761efb80a670a70983a8","modified":1723191455567},{"_id":"public/2024/08/09/iOS/OC/009-混编/001-WKWebView秒开/index/index.html","hash":"3f5de8e0799a1338f67c5339f89f2d562f6988ce","modified":1723191455567},{"_id":"public/2024/08/09/iOS/Swift/08-源码阅读/001-Kingfisher/index/index.html","hash":"e8e39c2c8ba5edde0c8fff1205053e08f3d08eef","modified":1723191455567},{"_id":"public/2024/08/09/iOS/OC/08-iOS组件化/index/index.html","hash":"4eb6f88b2365f12cd10e64a50de863587ee66f3e","modified":1723191455567},{"_id":"public/2024/08/09/iOS/OC/005-Runloop/01-Runloop应用场景/index/index.html","hash":"9bdba9bbac24bb17aba4938fbaaa50a9b1a4e371","modified":1723191455567},{"_id":"public/2024/08/09/iOS/OC/003-OC方法/001-UIView与CALayer/index/index.html","hash":"2ae55dd51547c368796908b308588ee5b87d3dd1","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/001-OC属性、关键字/015-为什么block要用copy修饰？/index/index.html","hash":"58c6f8eaca16be1c6d6f0ef0203425a959239bdf","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/iOS开发常用宏/index.html","hash":"a47c2c08856cf987b3f19ef59e8fa0d98735e3d3","modified":1723191455567},{"_id":"public/2024/08/08/前端/Vue/002-Vue组件之间的通信方式都有哪些？/index/index.html","hash":"0c35171cf19f72c7c574ed0fba6b772e4f00d7df","modified":1723191455567},{"_id":"public/2024/08/08/前端/HTML/002-什么是HTTP","hash":"4c4f8390c3cb936f6c6eb5612e19ca74d89c23f1","modified":1723191455567},{"_id":"public/2024/08/08/前端/Vue/001-v-show和v-if有什么区别？使用场景分别是什么？/index/index.html","hash":"dce32065abb6a6d371b16d1cab17bbeb294949f2","modified":1723191455567},{"_id":"public/2024/08/08/前端/HTML/001-说说Cookie、Session和Token的区别？/index/index.html","hash":"6e2beeb952207910fd4c432af7b694b988fc1566","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/028-浮点数精度丢失/README/index.html","hash":"a369c12aec4704b3631d924b51c451baf094c5ae","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/index.html","hash":"93cf33c91754cbf5d7f0308aa1c1f97c2a03290c","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/index.html","hash":"3ac4d5dd2efdc53fe11e8afa17e3acc21d4e0c37","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/027-iOS中float四舍五入+末尾清零/README/index.html","hash":"2ad9c72652f144724b64e359b860376dfdadfe6f","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/026-iOS随机数/README/index.html","hash":"ba8dc9bc6463d651cab0b686c3c7888e2d17bd2b","modified":1723191455567},{"_id":"public/2024/08/07/iOS/Swift/002-Swift与OC的区别/README/index.html","hash":"9fc03a5f4a2a5d37b3f77e8db73c0da3eccdc317","modified":1723191455567},{"_id":"public/2024/08/07/iOS/Swift/001-目录/README/index.html","hash":"9427a0863813f91b591fb541e26541f5683d4d8d","modified":1723191455567},{"_id":"public/2024/08/07/iOS/OC/003-OC方法/022-Controller生命周期/Controller的生命周期/index.html","hash":"b1a0ce18230ec314920f5a2b93b516b5fb0f4c57","modified":1723191455567},{"_id":"public/2024/08/06/hexo-usage/hexo创建categories页面/index.html","hash":"f23893ceeb44051c24f94d4fd33cbad15ba14414","modified":1723191455567},{"_id":"public/2024/08/06/hexo-usage/hexo创建tags页面/index.html","hash":"457ea7cc0ba775ffba44a4eb8c4d2cc3c1aba5b8","modified":1723191455567},{"_id":"public/2024/08/06/iOS/OC/021-APNS/README/index.html","hash":"3a638ceaf7da2097e332c3cbdc5375d389518992","modified":1723191455567},{"_id":"public/2024/08/06/hexo-usage/hexo新建页面/index.html","hash":"5a8cdbf9addca4a843a76427e07ef5ebfa159325","modified":1723191455567},{"_id":"public/2024/08/06/git相关操作/001-拉取submoduls仓库/README/index.html","hash":"9e10c3b435986cb4c6018bb6a1def9ff81788155","modified":1723191455567},{"_id":"public/2024/08/06/git相关操作/002-gitignore/README/index.html","hash":"0f4789439ff72e46827c7f2f574f6306ab5c3b2b","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/025-NSString/判断两个NSString是否相同/index.html","hash":"3e15078578d4a44a678871aa388b37eec9a8efad","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/024-static与extern/README/index.html","hash":"8afef384312a5d1277f7d27091a9f18526633e08","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/002-内存管理/023-内存区域/README/index.html","hash":"2898f9dcd43bebc51b062c94d6c975f754d20f6f","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/022-Controller生命周期/loadView介绍/index.html","hash":"6cf71456cc6c4392c49d053c65b6e503368272e5","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/019-定时器/后台定时器/index.html","hash":"0e93546b03f9c26b1fec31986a40985f4ad79ec0","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/019-定时器/定时器循环引用/index.html","hash":"9ce83acbbcc1d7e4b5c6224bbdf40b2259d018a9","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/020-View的layout的方法/README/index.html","hash":"c3c8c73bb49e86b8cea9aff00f036aeeb9889a12","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/019-定时器/README/index.html","hash":"4fccde262ad9dc98bea6acea7c7ca8d2cb0767e5","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/006-多线程/018-GCD与Operation的对比与实践/README/index.html","hash":"d1f7f82f18221aceba61989e92f7a177c89af86f","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/017-frame和bounds/README/index.html","hash":"f210dd3289f1121ba6585e6f9cdbac8d729f88ef","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/016-imageName和imageWithContextOfFile 的区别？/README/index.html","hash":"9df47f7826943493fa67573a012d34c4948e56dc","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/000-面试题导航链接/README/index.html","hash":"15702972d1fa58f9b31d3cd4da97df7acbd23786","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/015-反射是什么？/README/index.html","hash":"063c1a6410ef20d0ab50481bc4c202da2bfaff44","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/014-OC中，@public、@protected、@private和@package的使用/README/index.html","hash":"546e99fc6002e899c5b6cf6388c28a50991bb419","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/013-iOS中的属性变量、成员变量、实例变量/README/index.html","hash":"77a436b428f695c91152f4b83ddf5a4b41b903d3","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/012-copy关键字/README/index.html","hash":"4c80c03037073cfba11c99153abd1308ffa0f0a0","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/011-空指针、野指针/README/index.html","hash":"eddde3277341ef5d3106323eec97f7f85dd94e35","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/010-weak指针被自动置为nil是如何实现？/README/index.html","hash":"256ffb5362fcfa54b0ecf51d236576aae5645ab7","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/009-@synthesize和@dynamic分别有什么作用？/README/index.html","hash":"eb026852abeb0fc7b5b9a655ff86f8cdee0e34e5","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/007-Core Foundation不支持ARC/README/index.html","hash":"2cac3a4bd6174c3efe29848bf19f00b51c79e4a3","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/008-@property的本质是什么？/README/index.html","hash":"c287288eb0d4b7f51f691f9c2c4ea4bf59877cf4","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/006-autorelease和Autorelease Pool/README/index.html","hash":"9532ac240e9a007701910a7079d8e759e3a7c57c","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/005-ARC下所有权修饰符/README/index.html","hash":"e690d8cb19338b8e3b589a6a3037159504c4b3ff","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/004-为什么UITableView的delegate属性修饰符assign/README/index.html","hash":"a8404c681776c717de5e07d70e1916d93b5dbeee","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/003-iOS属性关键字/README/index.html","hash":"e6fdf1a894b643b387643ae7939d758a7cbc339c","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/006-多线程/002-iOS同步机制/README/index.html","hash":"b247b16500d37f06121eb7a412a13f2aab13af6d","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/001-简述OC内存管理/README/index.html","hash":"bf50c675888c89a4c8e44a443670093bfecc0747","modified":1723191455567},{"_id":"public/2024/07/19/hexo-usage/hello-world/index.html","hash":"d4d33262aafe3b9fa736f3255c482e9473c00da2","modified":1723191455567},{"_id":"public/2024/07/19/hexo-usage/hexo-usage-2024/hexo2024/index.html","hash":"52439249a01b19e60597d735ac1d392c4c01595c","modified":1723191455567},{"_id":"public/categories/hexo实践/index.html","hash":"032e39ed5cdac2b6bf932684757b9858d3cd4727","modified":1723191455567},{"_id":"public/categories/git/index.html","hash":"981649661179bc1bcdb2f9696b050fec9a879d81","modified":1723191455567},{"_id":"public/categories/ES6/index.html","hash":"e56d8d6b4d8413c12942eb7d5bc05b715ffb9766","modified":1723191455567},{"_id":"public/categories/HTML/index.html","hash":"214af7ddeba1276d152ef639166e28160423d784","modified":1723191455567},{"_id":"public/categories/Vue/index.html","hash":"081ba967c7804cb8c5349031fe3662be1c4ef7b8","modified":1723191455567},{"_id":"public/categories/Swift/index.html","hash":"57e2c1daec0199ce58178993486b32f96aeafd13","modified":1723191455567},{"_id":"public/categories/移动端iOS/index.html","hash":"79613d675ce094c90e8b986a398c3302fafb89c9","modified":1723191455567},{"_id":"public/categories/iOS/index.html","hash":"0dbd264ae591c742f748e93dfbd12ecc1148d368","modified":1723191455567},{"_id":"public/index.html","hash":"a4387d47f0e4457ab10a189075a9c6f18a6bb07e","modified":1723191455567},{"_id":"public/page/2/index.html","hash":"40282cfd4d6cd5cc37f704a6d4b04c9ffdf6edce","modified":1723191455567},{"_id":"public/page/3/index.html","hash":"ecdbb999f1e082e29c12633bb128b1beb5479f55","modified":1723191455567},{"_id":"public/page/4/index.html","hash":"6c26f260361faa3da5e267dc4f0bd8076effb254","modified":1723191455567},{"_id":"public/page/5/index.html","hash":"3a357122c3c60d91da9c3b3a1744849e860b223b","modified":1723191455567},{"_id":"public/page/6/index.html","hash":"b423dee45826da4cf55d8aea30db992b98bc72ff","modified":1723191455567},{"_id":"public/tags/hexo/index.html","hash":"d208468661be8ed178150169ab3700f0b4ec0407","modified":1723191455567},{"_id":"public/tags/hello-world/index.html","hash":"a4bbeb569f84fccf3abad3841da89d5dfd6af5e9","modified":1723191455567},{"_id":"public/tags/new-page/index.html","hash":"4f69c6b65c73b6fdb50346ed45e7c09ef9ed07ee","modified":1723191455567},{"_id":"public/tags/git/index.html","hash":"dcae15f0eeed7b8cc43ea39b293df6af02722922","modified":1723191455567},{"_id":"public/tags/submodule/index.html","hash":"e008b461db70b67acf23039dbda5d120fd0fb724","modified":1723191455567},{"_id":"public/tags/gitignore/index.html","hash":"675acde9cd8fbe0293bb2793f3f7cd78ee68c456","modified":1723191455567},{"_id":"public/tags/gitignore-global/index.html","hash":"9ed8e44a8c53353e55305ee0c7c929f1f106b96b","modified":1723191455567},{"_id":"public/tags/github/index.html","hash":"bdea442f6fe666e1bf7da6c1752f09683631a0a4","modified":1723191455567},{"_id":"public/tags/picgo/index.html","hash":"e62021759353b706aca5f2293e52ebf0dc2f6548","modified":1723191455567},{"_id":"public/tags/前端/index.html","hash":"0876aaa5daf356fdae8ca03d589d56870cb46de5","modified":1723191455567},{"_id":"public/tags/js/index.html","hash":"4eb67c74d4aef49183231e9006f54d263d8af160","modified":1723191455567},{"_id":"public/tags/let/index.html","hash":"75f8742917a00b8f130ec8db78bfb1f8ad36edf5","modified":1723191455567},{"_id":"public/tags/const/index.html","hash":"5066fd49ed6772f6acb4b9823bc8cb1726e5d6c0","modified":1723191455567},{"_id":"public/tags/http/index.html","hash":"447e24e8500db016ffd43c3dd69fa185976fe64b","modified":1723191455567},{"_id":"public/tags/https/index.html","hash":"a0c3eaad36964f61bd988749825180030a12db7d","modified":1723191455567},{"_id":"public/tags/cookie/index.html","hash":"838845c1bcd98cd85328ed3a444dc87dbfe5589d","modified":1723191455567},{"_id":"public/tags/session/index.html","hash":"f8d8e0cd13cd3f82942d80cfc09f65e13d25ec53","modified":1723191455567},{"_id":"public/tags/token/index.html","hash":"e60a6bef64c700b9959093228c5b1dde94a0edd1","modified":1723191455567},{"_id":"public/tags/Vue/index.html","hash":"ead31e725f93eb6b1165accad9545751e1401500","modified":1723191455567},{"_id":"public/tags/v-show/index.html","hash":"acdb85c07a5747128dc00019d56fa309150f3ae1","modified":1723191455567},{"_id":"public/tags/v-if/index.html","hash":"192ac6f8969272ed2af8c9dc65505ec26e732509","modified":1723191455567},{"_id":"public/tags/iOS/index.html","hash":"11537ac14e075152c7361dad5e0d76825fc06c67","modified":1723191455567},{"_id":"public/tags/iOS/page/2/index.html","hash":"fa7cd506a4646cd69ae2a85eaf974079c7b854cb","modified":1723191455567},{"_id":"public/tags/iOS/page/3/index.html","hash":"c800ec9c4fd15086fafb2bde1ddd9e4412d02e81","modified":1723191455567},{"_id":"public/tags/iOS/page/4/index.html","hash":"e1e059f4651c0fdbeca9323db61f7201c86eb555","modified":1723191455567},{"_id":"public/tags/iOS/page/5/index.html","hash":"b767e8d8cb03d3528cbe28e7133ff71d967f0d00","modified":1723191455567},{"_id":"public/tags/面试题/index.html","hash":"b9e084e1119f3863683280e6d2b9cc7a795afb87","modified":1723191455567},{"_id":"public/tags/面试题/page/2/index.html","hash":"c5be2e5db9f1620da20a5adfb3875435c17b8a44","modified":1723191455567},{"_id":"public/tags/面试题/page/3/index.html","hash":"320702f99f6b17e566e9c3dc8aa366c1e1898eeb","modified":1723191455567},{"_id":"public/tags/面试题/page/4/index.html","hash":"256f027c841a30618879f76c9d26edebad61a2f4","modified":1723191455567},{"_id":"public/tags/Swift/index.html","hash":"da6a7785cd6716b81dfe19fae4c85834c532e8a6","modified":1723191455567},{"_id":"public/tags/APNS/index.html","hash":"d45aa0e54b887e7b85319746c776f60ee9b17856","modified":1723191455567},{"_id":"public/tags/推送/index.html","hash":"293f3bc9ae0933c25bf8581d41db80460cd16d1c","modified":1723191455567},{"_id":"public/tags/组件化/index.html","hash":"c57c25f39867465ce0d4287f1afb61dfa309850e","modified":1723191455567},{"_id":"public/tags/CTMediator/index.html","hash":"fdec1dbfed8f706cfd06146aa3a337fa5d4daaa2","modified":1723191455567},{"_id":"public/tags/Kingfisher/index.html","hash":"bbf64a56595a1a741cb5e155b1187aac42030750","modified":1723191455567},{"_id":"public/tags/属性关键字/index.html","hash":"fce41d2e5770daccba50adb6d9e99d12b8b7dade","modified":1723191455567},{"_id":"public/tags/修饰符/index.html","hash":"e57662498cc7e6b77cf9976f4c2512c7b1ead33e","modified":1723191455567},{"_id":"public/tags/property/index.html","hash":"800613bdcd5d2d9f1ddbbf939c57aa2e23cbfa6b","modified":1723191455567},{"_id":"public/tags/delegate/index.html","hash":"ffd38fe7a599a18a34ce6bb3b99c164635ce6c57","modified":1723191455567},{"_id":"public/tags/UITableView/index.html","hash":"6f521d23f1c6ed2b7c256b98eb3a3ef3d484889f","modified":1723191455567},{"_id":"public/tags/assign/index.html","hash":"2da79e18cd36b934dc1f4654798f79dae9876995","modified":1723191455567},{"_id":"public/tags/synthesize/index.html","hash":"8f61c8c3fe38d7a90fe0940d7f5c2492e2e01b8e","modified":1723191455567},{"_id":"public/tags/dynamic/index.html","hash":"d33607e2552596fc629c52f7f2b99a07239ed75e","modified":1723191455567},{"_id":"public/tags/weak/index.html","hash":"ad7bab2289fe7efc581e25c3161362f6473919a6","modified":1723191455567},{"_id":"public/tags/copy/index.html","hash":"32a35c65650a951865deb3bc04d7dd1c39617a41","modified":1723191455567},{"_id":"public/tags/属性变量/index.html","hash":"80b950d9f11a26cbb246e128ee10719ecce3ece2","modified":1723191455567},{"_id":"public/tags/成员变量/index.html","hash":"c1c349b4d7689be496447bec028e22893a8b4923","modified":1723191455567},{"_id":"public/tags/实例变量/index.html","hash":"638b151c12fa3838b4351dbf5a319a256765d681","modified":1723191455567},{"_id":"public/tags/访问权限/index.html","hash":"7b87d42b4f3ec1ef7ee50bc923a0d0d9b817dee0","modified":1723191455567},{"_id":"public/tags/block/index.html","hash":"fffaa3a3bca454e18aa1290ec21c2b1f3c22694a","modified":1723191455567},{"_id":"public/tags/OC/index.html","hash":"65020c63d1b675d3d8f883b72759d8e3fa7dca7c","modified":1723191455567},{"_id":"public/tags/内存管理/index.html","hash":"41197bdf66e3563c2c7f353c5d96cc55b4feb640","modified":1723191455567},{"_id":"public/tags/autorelease/index.html","hash":"73ce3942e89dc30fe689a5b162387c033b3c8683","modified":1723191455567},{"_id":"public/tags/ARC/index.html","hash":"69e535276e60a44b1398d1737ba3b5427c5d1be2","modified":1723191455567},{"_id":"public/tags/空指针/index.html","hash":"ed16647cdb943ab6030da90c577298c96d674a89","modified":1723191455567},{"_id":"public/tags/野指针/index.html","hash":"f1e89ed979e17e44e89c2db7facbc0b450c5e8ca","modified":1723191455567},{"_id":"public/tags/内存/index.html","hash":"62d6ef8f12b0455ba026d581545062b24111db19","modified":1723191455567},{"_id":"public/tags/反射/index.html","hash":"7fd3500f230af596cdc92fb4f88f4815115e45c9","modified":1723191455567},{"_id":"public/tags/CALayer/index.html","hash":"62e0fafccbda3cbe0eccae0f82a72d567a7d3999","modified":1723191455567},{"_id":"public/tags/UIView/index.html","hash":"c2160cb53c5ecb81a027f15d5582d88280e3bbe2","modified":1723191455567},{"_id":"public/tags/frame/index.html","hash":"885023d8df29c68dd9df3507dcdc253583bda31f","modified":1723191455567},{"_id":"public/tags/bounds/index.html","hash":"b1588d645919b9f4917288aa98ff40474c4f21be","modified":1723191455567},{"_id":"public/tags/imageName/index.html","hash":"0b3becf933d43ff9af65739bdc33cd8e73b634fc","modified":1723191455567},{"_id":"public/tags/View/index.html","hash":"1e606136a2d8a5e22f8f8159cb3989eed4a38ea4","modified":1723191455567},{"_id":"public/tags/layout/index.html","hash":"f7f657d7a630dd6801bdb44de89b9b1985c52d14","modified":1723191455567},{"_id":"public/tags/定时器/index.html","hash":"ab5d8af952b019878d0aa12b1f552eedf58a92fd","modified":1723191455567},{"_id":"public/tags/循环引用/index.html","hash":"8f92abc72d46b8e6649835a26cc8eb5422ffe89c","modified":1723191455567},{"_id":"public/tags/Controller/index.html","hash":"bed612718fb990619c93053e10493b666106cf2b","modified":1723191455567},{"_id":"public/tags/loadView/index.html","hash":"7a34f0205b6293e947981da2120a1172a318a095","modified":1723191455567},{"_id":"public/tags/static/index.html","hash":"30a3af7eff85e87e6097696e3c966b98b6127a5b","modified":1723191455567},{"_id":"public/tags/extern/index.html","hash":"ffa75d8d05be3de6e51ba0729d44fc4c85657e95","modified":1723191455567},{"_id":"public/tags/NSString/index.html","hash":"d184f25cb124b088a6856335b1e5f1ce7279345c","modified":1723191455567},{"_id":"public/tags/float/index.html","hash":"f02efc9d6de319bae59ca424c24aa5feb9383f9b","modified":1723191455567},{"_id":"public/tags/define/index.html","hash":"ce517ce2d700806a2c7aa0e2b7bcb6a83e8a0613","modified":1723191455567},{"_id":"public/tags/Runloop/index.html","hash":"14a5d4958bde75c42eecb0841be81e2f1f598d33","modified":1723191455567},{"_id":"public/tags/同步/index.html","hash":"17685bc1aac2771e9f8f303d053f55590469d08b","modified":1723191455567},{"_id":"public/tags/GCD/index.html","hash":"a94f963c0cd780b5a299f9bae5db011cd8c15a24","modified":1723191455567},{"_id":"public/tags/Operation/index.html","hash":"b1a2caa8b042a5ac58b3c33d99466b556963e3d0","modified":1723191455567},{"_id":"public/tags/WKWebView/index.html","hash":"f7a236bcbdfd72120fb793eb625c4c8ade9c8bf3","modified":1723191455567},{"_id":"public/archives/index.html","hash":"ac0ce65107e92903c31c8c70707b4d4ccbbe4e04","modified":1723191455567},{"_id":"public/archives/page/2/index.html","hash":"552559e7a787b4dbe5e1834e3931ff49fcbe4a14","modified":1723191455567},{"_id":"public/archives/page/3/index.html","hash":"f11c5ef1dbe6ab155e64441f2167e484279b9d09","modified":1723191455567},{"_id":"public/archives/page/4/index.html","hash":"d2cc25877076b1a5d5701298e4c631214b7e76f4","modified":1723191455567},{"_id":"public/archives/page/5/index.html","hash":"9b693ad5ff66efb2c6ef58bdc29afd5386c8f0da","modified":1723191455567},{"_id":"public/archives/page/6/index.html","hash":"c25aa99a96dfe66ac24037c427353cb7daab2dca","modified":1723191455567},{"_id":"public/archives/2024/index.html","hash":"c0d6c37a9780e77941c325631d49f753d1016bd4","modified":1723191455567},{"_id":"public/archives/2024/page/2/index.html","hash":"6fdc778db8b6c3aa126b1e760ab689aa7120ac13","modified":1723191455567},{"_id":"public/archives/2024/page/3/index.html","hash":"9ea2d664f571bc84cad4f7cee7eb50e4c2f56205","modified":1723191455567},{"_id":"public/archives/2024/page/4/index.html","hash":"c24899109583582f9f02402ba2965aaa81957e8e","modified":1723191455567},{"_id":"public/archives/2024/page/5/index.html","hash":"595365ce3e6ba8676ad6f1d3d2806fc249fa981a","modified":1723191455567},{"_id":"public/archives/2024/page/6/index.html","hash":"c1d63c0b903cfd206b710159b80e831c83cafd32","modified":1723191455567},{"_id":"public/archives/2024/07/index.html","hash":"f64588500cd92c79a8588194ae2d281bc1b544ea","modified":1723191455567},{"_id":"public/archives/2024/07/page/2/index.html","hash":"746d34b8b5a672f9a2b20f5e063f735a87d59e06","modified":1723191455567},{"_id":"public/archives/2024/07/page/3/index.html","hash":"a264c6791dc8c185aa7a9dfd1155ef4b4e7531c8","modified":1723191455567},{"_id":"public/archives/2024/08/index.html","hash":"df69584fc38eebb5411e3f10c833e9807734b06a","modified":1723191455567},{"_id":"public/archives/2024/08/page/2/index.html","hash":"a7390460823e7c82ce117ffb41653dfb5ac7a94e","modified":1723191455567},{"_id":"public/archives/2024/08/page/3/index.html","hash":"1a798ae8d0def77b466012e4094bf4398150cb2b","modified":1723191455567},{"_id":"public/images/loading.svg","hash":"938c2a41c8ba18e37ed659e481696e40a4c8f3a4","modified":1723191455567},{"_id":"public/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":1723191455567},{"_id":"public/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":1723191455567},{"_id":"public/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":1723191455567},{"_id":"public/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1723191455567},{"_id":"public/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1723191455567},{"_id":"public/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1723191455567},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1723191455567},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1723191455567},{"_id":"public/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1723191455567},{"_id":"public/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1723191455567},{"_id":"public/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1723191455567},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1723191455567},{"_id":"public/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1723191455567},{"_id":"public/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1723191455567},{"_id":"public/2024/08/06/iOS/OC/021-APNS/README/001.webp","hash":"ad36026e142f355592aa1965c32ff5427a2ef8e3","modified":1723191455567},{"_id":"public/2024/08/06/iOS/OC/021-APNS/README/002.webp","hash":"41c33a61a8bd3cc39dce164599c39eef09755cd1","modified":1723191455567},{"_id":"public/2024/08/06/iOS/OC/021-APNS/README/003.webp","hash":"454e9e01bfbabb47d47d73d04b77bbbb567d420b","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/006.png","hash":"505b5dde778cace6b7f491c0b382cdb2c6edc6cb","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/005.webp","hash":"b893d9788e2751fe148c6be843f3fa1263c947fa","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/001-简述OC内存管理/README/duck.jpeg","hash":"7f741316136aa9b19385781c1a254725b09181f8","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/011-空指针、野指针/README/005.png","hash":"216dd01ffd837f4cc05647088228a3a24f2df612","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/011-空指针、野指针/README/006.png","hash":"d9f2e02d7b93fa768731cef3f4ee2522397415df","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/002-内存管理/011-空指针、野指针/README/007.png","hash":"f290982595dbc8538820dff34e09da66def3f2d4","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/017-frame和bounds/README/001.webp","hash":"8cad2517b8d41f4c5fae1c5068b3eaf989480620","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/017-frame和bounds/README/002.webp","hash":"72eb4c87fd8edfcb7f7ed31f4bd09c878ac26136","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/017-frame和bounds/README/003.webp","hash":"d6547ec99a0e2e1b45494751c2c3907e021f6db7","modified":1723191455567},{"_id":"public/2024/07/30/iOS/OC/003-OC方法/017-frame和bounds/README/004.webp","hash":"95d80b7f77ac9a89d919c6af005a05d0c4d9f493","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/003.png","hash":"1b4bc30694def0e12a55028db18c5cd13b65241f","modified":1723191455567},{"_id":"public/css/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1723191455567},{"_id":"public/lib/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":1723191455567},{"_id":"public/images/wechat-code.png","hash":"12a3af0ec234812d10ffdcb027aa15c3bbedd00f","modified":1723191455567},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1723191455567},{"_id":"public/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1723191455567},{"_id":"public/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1723191455567},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1723191455567},{"_id":"public/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1723191455567},{"_id":"public/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/012-copy关键字/README/003.png","hash":"ca07fed2398730d6576fb2a66893df187db53a34","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/012-copy关键字/README/001.png","hash":"28b939c4f9eb6b08cdb3ae9ba575c77308f38c6e","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/012-copy关键字/README/002.png","hash":"24fca7b6ffa21deb2dc383753ee71aff7d49c467","modified":1723191455567},{"_id":"public/2024/07/22/iOS/OC/001-OC属性、关键字/012-copy关键字/README/004.png","hash":"aee813960748034d5c2ff8f13ea765e7ee42b058","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/001.png","hash":"99742b186847286790e562b6edb60b28f09dd35c","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/004.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/005.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/006.png","hash":"b148fdf3d6ebcfbe259396014efbc0be02df765f","modified":1723191455567},{"_id":"public/assets/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1723191455567},{"_id":"public/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1723191455567},{"_id":"public/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1723191455567},{"_id":"public/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1723191455567},{"_id":"public/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1723191455567},{"_id":"public/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1723191455567},{"_id":"public/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1723191455567},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1723191455567},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1723191455567},{"_id":"public/js/main.js","hash":"9d1d5167d8b966786268841abdf3c1639fd6d13a","modified":1723191455567},{"_id":"public/js/utils.js","hash":"00fe71414bf6a95bd4438cb301cf9096df90c46c","modified":1723191455567},{"_id":"public/css/common/animated.css","hash":"638a1974b6ef420acc84f5d3539d93324b62219f","modified":1723191455567},{"_id":"public/css/common/markdown.css","hash":"34ad503bbc07e19b5c74443cc1f51c3ad4e4d693","modified":1723191455567},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1723191455567},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1723191455567},{"_id":"public/css/common/variables.css","hash":"807fafff6f983933550a03f0be7a41d393c8a1a0","modified":1723191455567},{"_id":"public/css/layout/category-list.css","hash":"6dad00432778b2963e4b8712cb993e18779270a8","modified":1723191455567},{"_id":"public/css/layout/category-content.css","hash":"5593febb0cf50446355dcd3ca56803997d5fe2f5","modified":1723191455567},{"_id":"public/css/layout/home-content.css","hash":"28098e3c7b263767048fed40fd9d8ccf8d3d10ca","modified":1723191455567},{"_id":"public/css/layout/home-sidebar.css","hash":"af82f19d5997864132142d3a0d68dd6da8b949fd","modified":1723191455567},{"_id":"public/css/layout/page.css","hash":"9b6cee5a8c77176e87a404ffd6516975d43a4a4e","modified":1723191455567},{"_id":"public/css/layout/tag-content.css","hash":"c88785317c2d21dcf2c90d152d3adc85ccbbeece","modified":1723191455567},{"_id":"public/fonts/Chillax/chillax.css","hash":"210179f53c6bce91a12ca6db9129184cc1549c36","modified":1723191455567},{"_id":"public/fonts/Geist/geist.css","hash":"17f37a09d6192f06b2190f8319114238b0a2ec8c","modified":1723191455567},{"_id":"public/fonts/GeistMono/geist-mono.css","hash":"b89d5af7e04df579c8ad62c0ea445ff7d16eec11","modified":1723191455567},{"_id":"public/js/layouts/categoryList.js","hash":"eb1af2cd0726f56ff7861222ea543315fe295a17","modified":1723191455567},{"_id":"public/js/layouts/lazyload.js","hash":"c06323d68bbdebbb685db5010e7655b8ed0caf42","modified":1723191455567},{"_id":"public/js/layouts/navbarShrink.js","hash":"3e80bf9ef719b2ddb2d1c4b67eb169d2ef52dbb8","modified":1723191455567},{"_id":"public/js/layouts/toc.js","hash":"7a768982f6cb1f40552cce063d5743fe862db762","modified":1723191455567},{"_id":"public/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1723191455567},{"_id":"public/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1723191455567},{"_id":"public/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1723191455567},{"_id":"public/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1723191455567},{"_id":"public/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1723191455567},{"_id":"public/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1723191455567},{"_id":"public/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1723191455567},{"_id":"public/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1723191455567},{"_id":"public/js/plugins/aplayer.js","hash":"1b7d9dff8db52b14825775fd55054c6adf269bf7","modified":1723191455567},{"_id":"public/js/plugins/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":1723191455567},{"_id":"public/js/plugins/masonry.js","hash":"92734a30a21f8b16f20aa75208f6c082890275fb","modified":1723191455567},{"_id":"public/js/plugins/mermaid.js","hash":"303254d382869ed618025fcb328426bd10314583","modified":1723191455567},{"_id":"public/js/plugins/typed.js","hash":"01799d5c07633f33b1d2893f524054074d56ec65","modified":1723191455567},{"_id":"public/js/plugins/tabs.js","hash":"964ec5c25a8d78763ba2ba9bfbd5b1b49ed05381","modified":1723191455567},{"_id":"public/js/tools/codeBlock.js","hash":"344e6c83e6ffda22f6e5bc724d603066b49a7d8b","modified":1723191455567},{"_id":"public/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":1723191455567},{"_id":"public/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":1723191455567},{"_id":"public/js/tools/imageViewer.js","hash":"f2ed02b6489c601821cd257c6ffa28c25f07bdd7","modified":1723191455567},{"_id":"public/js/tools/runtime.js","hash":"eb0374b6f033f7ac25f49b1b079aa163e14b0fcd","modified":1723191455567},{"_id":"public/js/tools/scrollTopBottom.js","hash":"9e54fa4310bb98ea5ba61780a9ef56d05d475203","modified":1723191455567},{"_id":"public/js/tools/tocToggle.js","hash":"c2224ff0370fcf109e94194613b9480a3913c82d","modified":1723191455567},{"_id":"public/css/common/codeblock/code-block.css","hash":"a88885a3e204d747dde91d090c29088aa5317e0e","modified":1723191455567},{"_id":"public/css/common/codeblock/code-theme.css","hash":"609cce68af538b9de8dc1a0cb28a4e796e658099","modified":1723191455567},{"_id":"public/css/style.css","hash":"b85971479ef0c8ab7dab77b6141f01c3b8265229","modified":1723191455567},{"_id":"public/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1723191455567},{"_id":"public/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1723191455567},{"_id":"public/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1723191455567},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1723191455567},{"_id":"public/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1723191455567},{"_id":"public/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1723191455567},{"_id":"public/assets/build/styles.css","hash":"7fce3d8245ba8d012d32870baddc870860e512fc","modified":1723191455567},{"_id":"public/css/common/basic.css","hash":"65a0a668bc97550c1acfcf925b44ad34c1fcdc31","modified":1723191455567},{"_id":"public/css/layout/article-content.css","hash":"fee679004f3a5a5480731f7e61d964e8531edd5c","modified":1723191455567},{"_id":"public/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1723191455567},{"_id":"public/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1723191455567},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1723191455567},{"_id":"public/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1723191455567},{"_id":"public/css/common/codeblock/highlight.css","hash":"6be010e7e7ed6f9c21955103e7e7e8e8c6e27681","modified":1723191455567},{"_id":"public/global-assets/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1723191455567},{"_id":"public/images/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1723191455567},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1723191455567},{"_id":"public/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1723191455567},{"_id":"public/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1723191455567},{"_id":"public/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1723191455567},{"_id":"public/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1723191455567},{"_id":"public/2024/07/19/hexo-usage/hexo-usage-2024/hexo2024/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1723191455567},{"_id":"public/2024/08/09/hexo-usage/hexo本地图片/hexo本地图片/myhead.jpg","hash":"8e6732f54ddd48e94677042a2ef322296d0b190a","modified":1723191455567},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1723191455567},{"_id":"public/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/002.png","hash":"1978db4ff676a9bf3704c734794c160099cdb0f6","modified":1723191455567},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1723191455567},{"_id":"public/2024/08/08/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/007.png","hash":"564155b1cd60b6c39681a04f38d08019a1e173f6","modified":1723191455567},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1723191455567},{"_id":"public/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1723191455567},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1723191455567},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1723191455567},{"_id":"public/2024/08/09/iOS/OC/003-OC方法/001-UIView与CALayer/index/001.png","hash":"ab5cf57eb0590608ee34bdff24c877bb0d2435f5","modified":1723191455567},{"_id":"public/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1723191455567},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1723191455567},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1723191455567},{"_id":"public/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1723191455567},{"_id":"public/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1723191455567},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1723191455567},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1723191455567},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1723191455567}],"Category":[{"name":"hexo实践","_id":"clzmfp93g0004dgxr58x0967a"},{"name":"git","_id":"clzmfp93p000odgxr45t57to2"},{"name":"ES6","_id":"clzmfp93t0014dgxr35uffbq1"},{"name":"HTML","_id":"clzmfp93v001cdgxr77osat1r"},{"name":"Vue","_id":"clzmfp93y001mdgxrf9tg5z9y"},{"name":"Swift","_id":"clzmfp942001ydgxr0tio47v7"},{"name":"移动端iOS","_id":"clzmfp945002bdgxr0akj5r0o"},{"name":"iOS","_id":"clzmfp94a002tdgxr0p672137"}],"Data":[],"Page":[{"title":"A页面","date":"2024-08-06T08:53:01.093Z","tags":["about"],"_content":"\n\n我是A页面","source":"about/A.md","raw":"---\ntitle: A页面\ndate: {{ date }}\ntags: \n- about\n---\n\n\n我是A页面","updated":"2024-08-06T08:53:01.093Z","path":"about/A.html","comments":1,"layout":"page","_id":"clzmfp9390000dgxrhcy66duj","content":"<p>我是A页面</p>\n","excerpt":"","more":"<p>我是A页面</p>\n"},{"title":"B页面","date":"2024-08-06T08:52:57.433Z","tags":["about"],"_content":"\n我是B页面","source":"about/B.md","raw":"---\ntitle: B页面\ndate: {{ date }}\ntags: \n- about\n---\n\n我是B页面","updated":"2024-08-06T08:52:57.433Z","path":"about/B.html","comments":1,"layout":"page","_id":"clzmfp93f0002dgxrce9t0ua2","content":"<p>我是B页面</p>\n","excerpt":"","more":"<p>我是B页面</p>\n"},{"title":"friends页面","date":"2024-08-06T08:53:13.265Z","tags":["about"],"_content":"\n\n我是friends页面","source":"about/friends.md","raw":"---\ntitle: friends页面\ndate: {{ date }}\ntags: \n- about\n---\n\n\n我是friends页面","updated":"2024-08-06T08:53:13.265Z","path":"about/friends.html","comments":1,"layout":"page","_id":"clzmfp93i0006dgxr06dm156d","content":"<p>我是friends页面</p>\n","excerpt":"","more":"<p>我是friends页面</p>\n"},{"title":"关于About","date":"2024-08-06T08:53:20.883Z","tags":["about"],"_content":"\n我是谁，哈哈哈！！！\n","source":"about/index.md","raw":"---\ntitle: 关于About\ndate: {{ date }}\ntags: \n- about\n---\n\n我是谁，哈哈哈！！！\n","updated":"2024-08-06T08:53:20.883Z","path":"about/index.html","comments":1,"layout":"page","_id":"clzmfp93j0008dgxrhr0ahegf","content":"<p>我是谁，哈哈哈！！！</p>\n","excerpt":"","more":"<p>我是谁，哈哈哈！！！</p>\n"},{"title":"categories","date":"2024-08-06T08:27:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-08-06 16:27:00\ntype: \"categories\"\n---\n","updated":"2024-08-06T08:37:11.629Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clzmfp93k000adgxrg1n82k4o","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-08-06T07:38:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-08-06 15:38:46\ntype: \"tags\"\n---\n","updated":"2024-08-06T08:24:07.131Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clzmfp93m000edgxr5kc6a5ib","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2024-07-19T02:43:55.994Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo-usage/hello-world.md","raw":"---\ntitle: Hello World\ndate: {{ date }}\ncategories:\n- hexo实践\ntags: [hexo, hello world]\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo-usage/hello-world","published":1,"updated":"2024-08-09T02:49:40.365Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93c0001dgxr350c7s3c","content":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"hexo创建categories页面","date":"2024-08-06T08:26:52.281Z","_content":"\nhexo如何生成“分类”页并添加tpye属性？\n\n<!-- more -->\n\n# 创建“分类”选项\n## 1 生成“分类”页并添加tpye属性\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page categories\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/categories/index.md\n```\n\n根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\n---\n```\n添加type: \"categories\"到内容中，添加后是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\ntype: \"categories\"\n---\n```\n保存并关闭文件。\n\n## 2 给文章添加“categories”属性\n打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。\n\n```\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2017-05-26 12:12:57\ncategories: \n- web前端\n---\n```\n\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。","source":"_posts/hexo-usage/hexo创建categories页面.md","raw":"---\ntitle: hexo创建categories页面\ndate: {{ date }}\ncategories: \n- hexo实践\ntags: \n- hexo\n---\n\nhexo如何生成“分类”页并添加tpye属性？\n\n<!-- more -->\n\n# 创建“分类”选项\n## 1 生成“分类”页并添加tpye属性\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page categories\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/categories/index.md\n```\n\n根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\n---\n```\n添加type: \"categories\"到内容中，添加后是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\ntype: \"categories\"\n---\n```\n保存并关闭文件。\n\n## 2 给文章添加“categories”属性\n打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。\n\n```\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2017-05-26 12:12:57\ncategories: \n- web前端\n---\n```\n\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。","slug":"hexo-usage/hexo创建categories页面","published":1,"updated":"2024-08-06T08:35:15.905Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93f0003dgxr0dhibqe2","content":"<p>hexo如何生成“分类”页并添加tpye属性？</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a>创建“分类”选项</h1><h2 id=\"1-生成“分类”页并添加tpye属性\"><a href=\"#1-生成“分类”页并添加tpye属性\" class=\"headerlink\" title=\"1 生成“分类”页并添加tpye属性\"></a>1 生成“分类”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></div>\n\n<p>成功后会提示：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure></div>\n\n<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n<p>添加type: “categories”到内容中，添加后是这样的：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n<p>保存并关闭文件。</p>\n<h2 id=\"2-给文章添加“categories”属性\"><a href=\"#2-给文章添加“categories”属性\" class=\"headerlink\" title=\"2 给文章添加“categories”属性\"></a>2 给文章添加“categories”属性</h2><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>\n","excerpt":"<p>hexo如何生成“分类”页并添加tpye属性？</p>","more":"<h1 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a>创建“分类”选项</h1><h2 id=\"1-生成“分类”页并添加tpye属性\"><a href=\"#1-生成“分类”页并添加tpye属性\" class=\"headerlink\" title=\"1 生成“分类”页并添加tpye属性\"></a>1 生成“分类”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加type: “categories”到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>保存并关闭文件。</p>\n<h2 id=\"2-给文章添加“categories”属性\"><a href=\"#2-给文章添加“categories”属性\" class=\"headerlink\" title=\"2 给文章添加“categories”属性\"></a>2 给文章添加“categories”属性</h2><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>"},{"title":"hexo创建tags页面","date":"2024-08-06T08:26:23.298Z","_content":"\nhexo如何生成“标签”页并添加tpye属性？\n\n<!-- more -->\n\n# 创建“标签”选项\n\n## 1 生成“标签”页并添加tpye属性\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page tags\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/tags/index.md\n```\n\n根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: 标签\ndate: 2017-05-27 14:22:08\n---\n```\n\n添加type: \"tags\"到内容中，添加后是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\ntype: \"tags\"\n---\n```\n\n保存并关闭文件。\n\n## 2 给文章添加“tags”属性\n\n打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格\n- 表单验证就是这篇文章的标签了\n\n```\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2017-05-26 12:12:57\ncategories: \n- web前端\ntags:\n- jQuery\n- 表格\n- 表单验证\n---\n```\n\n至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。","source":"_posts/hexo-usage/hexo创建tags页面.md","raw":"---\ntitle: hexo创建tags页面\ndate: {{ date }}\ncategories: \n- hexo实践\ntags: \n- hexo\n---\n\nhexo如何生成“标签”页并添加tpye属性？\n\n<!-- more -->\n\n# 创建“标签”选项\n\n## 1 生成“标签”页并添加tpye属性\n打开命令行，进入博客所在文件夹。执行命令\n\n```\n$ hexo new page tags\n```\n\n成功后会提示：\n\n```\nINFO  Created: ~/Documents/blog/source/tags/index.md\n```\n\n根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：\n\n```\n---\ntitle: 标签\ndate: 2017-05-27 14:22:08\n---\n```\n\n添加type: \"tags\"到内容中，添加后是这样的：\n\n```\n---\ntitle: 文章分类\ndate: 2017-05-27 13:47:40\ntype: \"tags\"\n---\n```\n\n保存并关闭文件。\n\n## 2 给文章添加“tags”属性\n\n打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格\n- 表单验证就是这篇文章的标签了\n\n```\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2017-05-26 12:12:57\ncategories: \n- web前端\ntags:\n- jQuery\n- 表格\n- 表单验证\n---\n```\n\n至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。","slug":"hexo-usage/hexo创建tags页面","published":1,"updated":"2024-08-06T08:35:25.954Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93i0007dgxr1g3fazqh","content":"<p>hexo如何生成“标签”页并添加tpye属性？</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建“标签”选项\"><a href=\"#创建“标签”选项\" class=\"headerlink\" title=\"创建“标签”选项\"></a>创建“标签”选项</h1><h2 id=\"1-生成“标签”页并添加tpye属性\"><a href=\"#1-生成“标签”页并添加tpye属性\" class=\"headerlink\" title=\"1 生成“标签”页并添加tpye属性\"></a>1 生成“标签”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></div>\n\n<p>成功后会提示：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure></div>\n\n<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2017-05-27 14:22:08</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>保存并关闭文件。</p>\n<h2 id=\"2-给文章添加“tags”属性\"><a href=\"#2-给文章添加“tags”属性\" class=\"headerlink\" title=\"2 给文章添加“tags”属性\"></a>2 给文章添加“tags”属性</h2><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格</p>\n<ul>\n<li>表单验证就是这篇文章的标签了</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- jQuery</span><br><span class=\"line\">- 表格</span><br><span class=\"line\">- 表单验证</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></div>\n\n<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p>\n","excerpt":"<p>hexo如何生成“标签”页并添加tpye属性？</p>","more":"<h1 id=\"创建“标签”选项\"><a href=\"#创建“标签”选项\" class=\"headerlink\" title=\"创建“标签”选项\"></a>创建“标签”选项</h1><h2 id=\"1-生成“标签”页并添加tpye属性\"><a href=\"#1-生成“标签”页并添加tpye属性\" class=\"headerlink\" title=\"1 生成“标签”页并添加tpye属性\"></a>1 生成“标签”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>成功后会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2017-05-27 14:22:08</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<h2 id=\"2-给文章添加“tags”属性\"><a href=\"#2-给文章添加“tags”属性\" class=\"headerlink\" title=\"2 给文章添加“tags”属性\"></a>2 给文章添加“tags”属性</h2><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格</p>\n<ul>\n<li>表单验证就是这篇文章的标签了</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- web前端</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- jQuery</span><br><span class=\"line\">- 表格</span><br><span class=\"line\">- 表单验证</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p>"},{"title":"hexo new page xxx","date":"2024-08-06T06:46:32.207Z","_content":"\n\n使用 Hexo 生成一个新页面，可以通过命令行输入以下命令：\n\n```sh\nhexo new page <page_name>\n```\n\n其中，`<page_name>` 是你希望新页面的名称。例如，如果你想创建一个名为 \"about\" 的页面，你可以输入：\n\n```sh\nhexo new page about\n```\n\n这将会在 `source` 目录下创建一个名为 `about` 的文件夹，其中包含一个 `index.md` 文件，你可以在这个文件中编写页面的内容。\n\n### 完整步骤\n\n1. **确保你在 Hexo 博客的根目录下**：你需要在 Hexo 项目的根目录下运行命令。你可以使用 `cd` 命令导航到你的 Hexo 项目根目录。例如：\n\n    ```sh\n    cd /path/to/your/hexo/project\n    ```\n\n2. **生成新页面**：运行以下命令生成新页面。\n\n    ```sh\n    hexo new page <page_name>\n    ```\n\n    例如：\n\n    ```sh\n    hexo new page about\n    ```\n\n3. **编辑新页面**：生成的新页面会在 `source` 目录下创建一个以页面名称命名的文件夹，并包含一个 `index.md` 文件。你可以编辑这个文件来添加页面内容。\n\n    ```sh\n    vi source/about/index.md\n    ```\n\n    在这个文件中，你可以编写 Markdown 格式的内容。默认情况下，文件内容如下：\n\n    ```markdown\n    ---\n    title: about\n    date: 2024-07-30 12:00:00\n    ---\n\n    ```\n\n    你可以在 `---` 下面添加页面的实际内容。\n\n4. **生成和部署**：完成编辑后，你可以生成静态文件并将其部署到你的服务器或托管平台。\n\n    ```sh\n    hexo generate\n    hexo deploy\n    ```\n\n    或者可以简化为：\n\n    ```sh\n    hexo g -d\n    ```\n\n### 示例\n\n假设你想创建一个 \"contact\" 页面，步骤如下：\n\n1. **导航到 Hexo 项目根目录**：\n\n    ```sh\n    cd /path/to/your/hexo/project\n    ```\n\n2. **生成 \"contact\" 页面**：\n\n    ```sh\n    hexo new page contact\n    ```\n\n3. **编辑 `source/contact/index.md`** 文件：\n\n    ```markdown\n    ---\n    title: contact\n    date: 2024-07-30 12:00:00\n    ---\n\n    # Contact Us\n\n    Feel free to reach out via email at example@example.com.\n    ```\n\n4. **生成并部署**：\n\n    ```sh\n    hexo g -d\n    ```\n\n这样，你的 Hexo 博客将会有一个新的 \"contact\" 页面，你可以通过 `http://your-blog-url/contact` 来访问它。","source":"_posts/hexo-usage/hexo新建页面.md","raw":"---\ntitle: hexo new page xxx\ndate: {{ date }}\ncategories: \n- hexo实践\ntags: \n- hexo \n- new page\n---\n\n\n使用 Hexo 生成一个新页面，可以通过命令行输入以下命令：\n\n```sh\nhexo new page <page_name>\n```\n\n其中，`<page_name>` 是你希望新页面的名称。例如，如果你想创建一个名为 \"about\" 的页面，你可以输入：\n\n```sh\nhexo new page about\n```\n\n这将会在 `source` 目录下创建一个名为 `about` 的文件夹，其中包含一个 `index.md` 文件，你可以在这个文件中编写页面的内容。\n\n### 完整步骤\n\n1. **确保你在 Hexo 博客的根目录下**：你需要在 Hexo 项目的根目录下运行命令。你可以使用 `cd` 命令导航到你的 Hexo 项目根目录。例如：\n\n    ```sh\n    cd /path/to/your/hexo/project\n    ```\n\n2. **生成新页面**：运行以下命令生成新页面。\n\n    ```sh\n    hexo new page <page_name>\n    ```\n\n    例如：\n\n    ```sh\n    hexo new page about\n    ```\n\n3. **编辑新页面**：生成的新页面会在 `source` 目录下创建一个以页面名称命名的文件夹，并包含一个 `index.md` 文件。你可以编辑这个文件来添加页面内容。\n\n    ```sh\n    vi source/about/index.md\n    ```\n\n    在这个文件中，你可以编写 Markdown 格式的内容。默认情况下，文件内容如下：\n\n    ```markdown\n    ---\n    title: about\n    date: 2024-07-30 12:00:00\n    ---\n\n    ```\n\n    你可以在 `---` 下面添加页面的实际内容。\n\n4. **生成和部署**：完成编辑后，你可以生成静态文件并将其部署到你的服务器或托管平台。\n\n    ```sh\n    hexo generate\n    hexo deploy\n    ```\n\n    或者可以简化为：\n\n    ```sh\n    hexo g -d\n    ```\n\n### 示例\n\n假设你想创建一个 \"contact\" 页面，步骤如下：\n\n1. **导航到 Hexo 项目根目录**：\n\n    ```sh\n    cd /path/to/your/hexo/project\n    ```\n\n2. **生成 \"contact\" 页面**：\n\n    ```sh\n    hexo new page contact\n    ```\n\n3. **编辑 `source/contact/index.md`** 文件：\n\n    ```markdown\n    ---\n    title: contact\n    date: 2024-07-30 12:00:00\n    ---\n\n    # Contact Us\n\n    Feel free to reach out via email at example@example.com.\n    ```\n\n4. **生成并部署**：\n\n    ```sh\n    hexo g -d\n    ```\n\n这样，你的 Hexo 博客将会有一个新的 \"contact\" 页面，你可以通过 `http://your-blog-url/contact` 来访问它。","slug":"hexo-usage/hexo新建页面","published":1,"updated":"2024-08-06T08:35:34.324Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93j0009dgxr89fwaxam","content":"<p>使用 Hexo 生成一个新页面，可以通过命令行输入以下命令：</p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &lt;page_name&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>其中，<code>&lt;page_name&gt;</code> 是你希望新页面的名称。例如，如果你想创建一个名为 “about” 的页面，你可以输入：</p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure></div>\n\n<p>这将会在 <code>source</code> 目录下创建一个名为 <code>about</code> 的文件夹，其中包含一个 <code>index.md</code> 文件，你可以在这个文件中编写页面的内容。</p>\n<h3 id=\"完整步骤\"><a href=\"#完整步骤\" class=\"headerlink\" title=\"完整步骤\"></a>完整步骤</h3><ol>\n<li><p><strong>确保你在 Hexo 博客的根目录下</strong>：你需要在 Hexo 项目的根目录下运行命令。你可以使用 <code>cd</code> 命令导航到你的 Hexo 项目根目录。例如：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/project</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>生成新页面</strong>：运行以下命令生成新页面。</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &lt;page_name&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p> 例如：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>编辑新页面</strong>：生成的新页面会在 <code>source</code> 目录下创建一个以页面名称命名的文件夹，并包含一个 <code>index.md</code> 文件。你可以编辑这个文件来添加页面内容。</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi <span class=\"built_in\">source</span>/about/index.md</span><br></pre></td></tr></table></figure></div>\n\n<p> 在这个文件中，你可以编写 Markdown 格式的内容。默认情况下，文件内容如下：</p>\n <div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\"><span class=\"section\">date: 2024-07-30 12:00:00</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p> 你可以在 <code>---</code> 下面添加页面的实际内容。</p>\n</li>\n<li><p><strong>生成和部署</strong>：完成编辑后，你可以生成静态文件并将其部署到你的服务器或托管平台。</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<p> 或者可以简化为：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设你想创建一个 “contact” 页面，步骤如下：</p>\n<ol>\n<li><p><strong>导航到 Hexo 项目根目录</strong>：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/project</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>生成 “contact” 页面</strong>：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page contact</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>编辑 <code>source/contact/index.md</code></strong> 文件：</p>\n <div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: contact</span><br><span class=\"line\"><span class=\"section\">date: 2024-07-30 12:00:00</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Contact Us</span></span><br><span class=\"line\"></span><br><span class=\"line\">Feel free to reach out via email at example@example.com.</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>生成并部署</strong>：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<p>这样，你的 Hexo 博客将会有一个新的 “contact” 页面，你可以通过 <code>http://your-blog-url/contact</code> 来访问它。</p>\n","excerpt":"","more":"<p>使用 Hexo 生成一个新页面，可以通过命令行输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &lt;page_name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>&lt;page_name&gt;</code> 是你希望新页面的名称。例如，如果你想创建一个名为 “about” 的页面，你可以输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>这将会在 <code>source</code> 目录下创建一个名为 <code>about</code> 的文件夹，其中包含一个 <code>index.md</code> 文件，你可以在这个文件中编写页面的内容。</p>\n<h3 id=\"完整步骤\"><a href=\"#完整步骤\" class=\"headerlink\" title=\"完整步骤\"></a>完整步骤</h3><ol>\n<li><p><strong>确保你在 Hexo 博客的根目录下</strong>：你需要在 Hexo 项目的根目录下运行命令。你可以使用 <code>cd</code> 命令导航到你的 Hexo 项目根目录。例如：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>生成新页面</strong>：运行以下命令生成新页面。</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &lt;page_name&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 例如：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编辑新页面</strong>：生成的新页面会在 <code>source</code> 目录下创建一个以页面名称命名的文件夹，并包含一个 <code>index.md</code> 文件。你可以编辑这个文件来添加页面内容。</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi <span class=\"built_in\">source</span>/about/index.md</span><br></pre></td></tr></table></figure>\n\n<p> 在这个文件中，你可以编写 Markdown 格式的内容。默认情况下，文件内容如下：</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\"><span class=\"section\">date: 2024-07-30 12:00:00</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 你可以在 <code>---</code> 下面添加页面的实际内容。</p>\n</li>\n<li><p><strong>生成和部署</strong>：完成编辑后，你可以生成静态文件并将其部署到你的服务器或托管平台。</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p> 或者可以简化为：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假设你想创建一个 “contact” 页面，步骤如下：</p>\n<ol>\n<li><p><strong>导航到 Hexo 项目根目录</strong>：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>生成 “contact” 页面</strong>：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page contact</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编辑 <code>source/contact/index.md</code></strong> 文件：</p>\n <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: contact</span><br><span class=\"line\"><span class=\"section\">date: 2024-07-30 12:00:00</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Contact Us</span></span><br><span class=\"line\"></span><br><span class=\"line\">Feel free to reach out via email at example@example.com.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>生成并部署</strong>：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这样，你的 Hexo 博客将会有一个新的 “contact” 页面，你可以通过 <code>http://your-blog-url/contact</code> 来访问它。</p>\n"},{"title":"git module 如何拉取仓库","date":"2024-08-06T01:02:33.809Z","_content":"\n在Git中，子模块（submodule）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。使用子模块可以在一个项目中包含其他项目，并且保持它们各自的版本控制和独立性。\n\n<!-- more-->\n\n### 如何拉取包含子模块的仓库\n\n以下是完整的步骤，从克隆一个包含子模块的仓库到拉取子模块的详细过程：\n\n#### 1. 克隆包含子模块的仓库\n\n当你克隆一个包含子模块的仓库时，你需要使用`--recurse-submodules`选项，这样会在克隆主仓库的同时，初始化并更新所有子模块。\n\n```sh\ngit clone --recurse-submodules <repository_url>\n```\n\n例如：\n\n```sh\ngit clone --recurse-submodules https://github.com/user/repo.git\n```\n\n#### 2. 初始化和更新子模块（如果已经克隆了仓库）\n\n如果你已经克隆了仓库，但没有使用`--recurse-submodules`选项，可以使用以下命令来初始化和更新子模块：\n\n```sh\ncd <repository_directory>\ngit submodule update --init --recursive\n```\n\n#### 3. 拉取更新（更新已有仓库中的子模块）\n\n如果你已经有一个包含子模块的仓库，并且想要拉取主仓库和子模块的最新更改，可以按以下步骤操作：\n\n1. **拉取主仓库的更新：**\n\n    ```sh\n    git pull\n    ```\n\n2. **更新子模块：**\n\n    ```sh\n    git submodule update --recursive --remote\n    ```\n\n    `--remote`选项会从子模块的远程仓库拉取最新提交。通常情况下，`git submodule update --recursive`就足够了，它会将子模块更新到主仓库记录的特定提交。\n\n#### 4. 将子模块添加到仓库\n\n如果你想要将一个子模块添加到你的仓库中，可以使用以下步骤：\n\n1. **添加子模块：**\n\n    ```sh\n    git submodule add <repository_url> <path>\n    ```\n\n    例如：\n\n    ```sh\n    git submodule add https://github.com/user/submodule-repo.git path/to/submodule\n    ```\n\n2. **提交子模块更改：**\n\n    ```sh\n    git commit -m \"Add submodule\"\n    ```\n\n3. **推送更改：**\n\n    ```sh\n    git push\n    ```\n\n#### 示例操作\n\n以下是一个完整的操作示例，从添加子模块到更新子模块：\n\n1. **添加子模块：**\n\n    ```sh\n    git submodule add https://github.com/example/repo.git libs/repo\n    git commit -m \"Add submodule repo\"\n    git push\n    ```\n\n2. **克隆包含子模块的仓库：**\n\n    ```sh\n    git clone --recurse-submodules https://github.com/your/repo.git\n    ```\n\n3. **初始化和更新子模块（如果已经克隆了仓库）：**\n\n    ```sh\n    git submodule update --init --recursive\n    ```\n\n4. **拉取更新并更新子模块：**\n\n    ```sh\n    git pull\n    git submodule update --recursive --remote\n    ```\n\n### 总结\n\n通过使用Git子模块，你可以轻松地将其他项目包含到你的项目中，并且保持它们独立的版本控制。理解并掌握子模块的初始化、更新和管理方法，可以帮助你在处理大型项目或依赖多个项目时更加高效。\n","source":"_posts/git相关操作/001-拉取submoduls仓库/README.md","raw":"---\ntitle: git module 如何拉取仓库\ndate: {{ date }}\ncategories:\n- git\ntags: [git, submodule]\n---\n\n在Git中，子模块（submodule）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。使用子模块可以在一个项目中包含其他项目，并且保持它们各自的版本控制和独立性。\n\n<!-- more-->\n\n### 如何拉取包含子模块的仓库\n\n以下是完整的步骤，从克隆一个包含子模块的仓库到拉取子模块的详细过程：\n\n#### 1. 克隆包含子模块的仓库\n\n当你克隆一个包含子模块的仓库时，你需要使用`--recurse-submodules`选项，这样会在克隆主仓库的同时，初始化并更新所有子模块。\n\n```sh\ngit clone --recurse-submodules <repository_url>\n```\n\n例如：\n\n```sh\ngit clone --recurse-submodules https://github.com/user/repo.git\n```\n\n#### 2. 初始化和更新子模块（如果已经克隆了仓库）\n\n如果你已经克隆了仓库，但没有使用`--recurse-submodules`选项，可以使用以下命令来初始化和更新子模块：\n\n```sh\ncd <repository_directory>\ngit submodule update --init --recursive\n```\n\n#### 3. 拉取更新（更新已有仓库中的子模块）\n\n如果你已经有一个包含子模块的仓库，并且想要拉取主仓库和子模块的最新更改，可以按以下步骤操作：\n\n1. **拉取主仓库的更新：**\n\n    ```sh\n    git pull\n    ```\n\n2. **更新子模块：**\n\n    ```sh\n    git submodule update --recursive --remote\n    ```\n\n    `--remote`选项会从子模块的远程仓库拉取最新提交。通常情况下，`git submodule update --recursive`就足够了，它会将子模块更新到主仓库记录的特定提交。\n\n#### 4. 将子模块添加到仓库\n\n如果你想要将一个子模块添加到你的仓库中，可以使用以下步骤：\n\n1. **添加子模块：**\n\n    ```sh\n    git submodule add <repository_url> <path>\n    ```\n\n    例如：\n\n    ```sh\n    git submodule add https://github.com/user/submodule-repo.git path/to/submodule\n    ```\n\n2. **提交子模块更改：**\n\n    ```sh\n    git commit -m \"Add submodule\"\n    ```\n\n3. **推送更改：**\n\n    ```sh\n    git push\n    ```\n\n#### 示例操作\n\n以下是一个完整的操作示例，从添加子模块到更新子模块：\n\n1. **添加子模块：**\n\n    ```sh\n    git submodule add https://github.com/example/repo.git libs/repo\n    git commit -m \"Add submodule repo\"\n    git push\n    ```\n\n2. **克隆包含子模块的仓库：**\n\n    ```sh\n    git clone --recurse-submodules https://github.com/your/repo.git\n    ```\n\n3. **初始化和更新子模块（如果已经克隆了仓库）：**\n\n    ```sh\n    git submodule update --init --recursive\n    ```\n\n4. **拉取更新并更新子模块：**\n\n    ```sh\n    git pull\n    git submodule update --recursive --remote\n    ```\n\n### 总结\n\n通过使用Git子模块，你可以轻松地将其他项目包含到你的项目中，并且保持它们独立的版本控制。理解并掌握子模块的初始化、更新和管理方法，可以帮助你在处理大型项目或依赖多个项目时更加高效。\n","slug":"git相关操作/001-拉取submoduls仓库/README","published":1,"updated":"2024-08-09T02:50:27.892Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93k000bdgxr81fwg9r8","content":"<p>在Git中，子模块（submodule）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。使用子模块可以在一个项目中包含其他项目，并且保持它们各自的版本控制和独立性。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"如何拉取包含子模块的仓库\"><a href=\"#如何拉取包含子模块的仓库\" class=\"headerlink\" title=\"如何拉取包含子模块的仓库\"></a>如何拉取包含子模块的仓库</h3><p>以下是完整的步骤，从克隆一个包含子模块的仓库到拉取子模块的详细过程：</p>\n<h4 id=\"1-克隆包含子模块的仓库\"><a href=\"#1-克隆包含子模块的仓库\" class=\"headerlink\" title=\"1. 克隆包含子模块的仓库\"></a>1. 克隆包含子模块的仓库</h4><p>当你克隆一个包含子模块的仓库时，你需要使用<code>--recurse-submodules</code>选项，这样会在克隆主仓库的同时，初始化并更新所有子模块。</p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules &lt;repository_url&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>例如：</p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules https://github.com/user/repo.git</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-初始化和更新子模块（如果已经克隆了仓库）\"><a href=\"#2-初始化和更新子模块（如果已经克隆了仓库）\" class=\"headerlink\" title=\"2. 初始化和更新子模块（如果已经克隆了仓库）\"></a>2. 初始化和更新子模块（如果已经克隆了仓库）</h4><p>如果你已经克隆了仓库，但没有使用<code>--recurse-submodules</code>选项，可以使用以下命令来初始化和更新子模块：</p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> &lt;repository_directory&gt;</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-拉取更新（更新已有仓库中的子模块）\"><a href=\"#3-拉取更新（更新已有仓库中的子模块）\" class=\"headerlink\" title=\"3. 拉取更新（更新已有仓库中的子模块）\"></a>3. 拉取更新（更新已有仓库中的子模块）</h4><p>如果你已经有一个包含子模块的仓库，并且想要拉取主仓库和子模块的最新更改，可以按以下步骤操作：</p>\n<ol>\n<li><p><strong>拉取主仓库的更新：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>更新子模块：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --recursive --remote</span><br></pre></td></tr></table></figure></div>\n\n<p> <code>--remote</code>选项会从子模块的远程仓库拉取最新提交。通常情况下，<code>git submodule update --recursive</code>就足够了，它会将子模块更新到主仓库记录的特定提交。</p>\n</li>\n</ol>\n<h4 id=\"4-将子模块添加到仓库\"><a href=\"#4-将子模块添加到仓库\" class=\"headerlink\" title=\"4. 将子模块添加到仓库\"></a>4. 将子模块添加到仓库</h4><p>如果你想要将一个子模块添加到你的仓库中，可以使用以下步骤：</p>\n<ol>\n<li><p><strong>添加子模块：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;repository_url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p> 例如：</p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/user/submodule-repo.git path/to/submodule</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>提交子模块更改：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule&quot;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>推送更改：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h4 id=\"示例操作\"><a href=\"#示例操作\" class=\"headerlink\" title=\"示例操作\"></a>示例操作</h4><p>以下是一个完整的操作示例，从添加子模块到更新子模块：</p>\n<ol>\n<li><p><strong>添加子模块：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/example/repo.git libs/repo</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule repo&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>克隆包含子模块的仓库：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules https://github.com/your/repo.git</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>初始化和更新子模块（如果已经克隆了仓库）：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>拉取更新并更新子模块：</strong></p>\n <div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git submodule update --recursive --remote</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过使用Git子模块，你可以轻松地将其他项目包含到你的项目中，并且保持它们独立的版本控制。理解并掌握子模块的初始化、更新和管理方法，可以帮助你在处理大型项目或依赖多个项目时更加高效。</p>\n","excerpt":"<p>在Git中，子模块（submodule）是一种将一个Git仓库作为另一个Git仓库的子目录的方式。使用子模块可以在一个项目中包含其他项目，并且保持它们各自的版本控制和独立性。</p>","more":"<h3 id=\"如何拉取包含子模块的仓库\"><a href=\"#如何拉取包含子模块的仓库\" class=\"headerlink\" title=\"如何拉取包含子模块的仓库\"></a>如何拉取包含子模块的仓库</h3><p>以下是完整的步骤，从克隆一个包含子模块的仓库到拉取子模块的详细过程：</p>\n<h4 id=\"1-克隆包含子模块的仓库\"><a href=\"#1-克隆包含子模块的仓库\" class=\"headerlink\" title=\"1. 克隆包含子模块的仓库\"></a>1. 克隆包含子模块的仓库</h4><p>当你克隆一个包含子模块的仓库时，你需要使用<code>--recurse-submodules</code>选项，这样会在克隆主仓库的同时，初始化并更新所有子模块。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules &lt;repository_url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-初始化和更新子模块（如果已经克隆了仓库）\"><a href=\"#2-初始化和更新子模块（如果已经克隆了仓库）\" class=\"headerlink\" title=\"2. 初始化和更新子模块（如果已经克隆了仓库）\"></a>2. 初始化和更新子模块（如果已经克隆了仓库）</h4><p>如果你已经克隆了仓库，但没有使用<code>--recurse-submodules</code>选项，可以使用以下命令来初始化和更新子模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> &lt;repository_directory&gt;</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-拉取更新（更新已有仓库中的子模块）\"><a href=\"#3-拉取更新（更新已有仓库中的子模块）\" class=\"headerlink\" title=\"3. 拉取更新（更新已有仓库中的子模块）\"></a>3. 拉取更新（更新已有仓库中的子模块）</h4><p>如果你已经有一个包含子模块的仓库，并且想要拉取主仓库和子模块的最新更改，可以按以下步骤操作：</p>\n<ol>\n<li><p><strong>拉取主仓库的更新：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>更新子模块：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --recursive --remote</span><br></pre></td></tr></table></figure>\n\n<p> <code>--remote</code>选项会从子模块的远程仓库拉取最新提交。通常情况下，<code>git submodule update --recursive</code>就足够了，它会将子模块更新到主仓库记录的特定提交。</p>\n</li>\n</ol>\n<h4 id=\"4-将子模块添加到仓库\"><a href=\"#4-将子模块添加到仓库\" class=\"headerlink\" title=\"4. 将子模块添加到仓库\"></a>4. 将子模块添加到仓库</h4><p>如果你想要将一个子模块添加到你的仓库中，可以使用以下步骤：</p>\n<ol>\n<li><p><strong>添加子模块：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;repository_url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 例如：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/user/submodule-repo.git path/to/submodule</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>提交子模块更改：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>推送更改：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"示例操作\"><a href=\"#示例操作\" class=\"headerlink\" title=\"示例操作\"></a>示例操作</h4><p>以下是一个完整的操作示例，从添加子模块到更新子模块：</p>\n<ol>\n<li><p><strong>添加子模块：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/example/repo.git libs/repo</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Add submodule repo&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>克隆包含子模块的仓库：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recurse-submodules https://github.com/your/repo.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>初始化和更新子模块（如果已经克隆了仓库）：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>拉取更新并更新子模块：</strong></p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git submodule update --recursive --remote</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过使用Git子模块，你可以轻松地将其他项目包含到你的项目中，并且保持它们独立的版本控制。理解并掌握子模块的初始化、更新和管理方法，可以帮助你在处理大型项目或依赖多个项目时更加高效。</p>"},{"title":".gitignore设置","date":"2024-08-06T01:02:33.809Z","_content":"\n* [原文](https://orianna-zzo.github.io/sci-tech/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/)\n\n<!-- more -->\n\n## Git中多出来的.DS_Store\n\n虽然不是第一次使用mac，也不是第一次在mac上使用git，但对mac实际上非常不熟悉。每次git上传时多出来的.DS_Store文件虽然不清楚具体做什么，但看上去并没什么问题。git一般也是自己一个人单机使用，就算换机也一般是直接换，没有遇到过两个同时使用的时候，上传.DS_Store也就默认都上传了。\n\n但这次用两个mac，一个mac提交了修改，第二个mac想要拉下来时居然遇到了.DS_Store文件被修改过需要提交再merge。什么？我没改过内容呀？所以这个.DS_Store是什么鬼？\n\n.DS_Store是Mac OS用来存储这个文件夹的显示属性的，被作为一种通用的有关显示设置的元数据（比如图标位置等设置）为Finder、Spotlight用。所以在不经意间就会修改这个文件。而文件共享时为了隐私关系将.DS_Store文件删除比较好，因为其中有一些信息在不经意间泄露出去。\n\n## Git中处理方案\n\n### 方案一：项目设置.gitignore\n\n仅针对git的处理最naive的想法就是设置.gitignore文件。\n\n.gitignore文件用于忽略文件，官网介绍在这里，规范如下：\n\n* 所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略，空行可以为了可读性分隔段落，# 表明注释。\n* 第一个 / 会匹配路径的根目录，举个栗子，”/*.html”会匹配”index.html”，而不是”d/index.html”。\n* 通配符 * 匹配任意个任意字符，? 匹配一个任意字符。需要注意的是通配符不会匹配文件路径中的 /，举个栗子，”d/*.html”会匹配”d/index.html”，但不会匹配”d/a/b/c/index.html”。\n* 两个连续的星号 ** 有特殊含义：\n  * 以 **/ 开头表示匹配所有的文件夹，例如 **/test.md 匹配所有的test.md文件。\n  * 以 /** 结尾表示匹配文件夹内所有内容，例如 a/** 匹配文件夹a中所有内容。\n  * 连续星号 ** 前后分别被 / 夹住表示匹配0或者多层文件夹，例如 a/**/b 匹配到 a/b 、a/x/b 、a/x/y/b 等。\n* 前缀 ! 的模式表示如果前面匹配到被忽略，则重新添加回来。如果匹配到的父文件夹还是忽略状态，该文件还是保持忽略状态。如果路径名第一个字符为 ! ，则需要在前面增加 \\ 进行转义。\n\n对于一些常用的系统、工程文件的.gitignore文件可以参考这个网站进行设置，这里有很多模板。\n\n针对.DS_Store文件，在git工程文件夹中新建.gitignore文件，在文件中设置：\n\n```\n.gitignore\n**/.DS_Store\n```\n\n对于已经提交的内容，希望git能够忽略，但同时并不会删除本地文件，需要在terminal输入以下命令：\n```\n$ git rm -r --cached $file_path\n```\n这个方案的优点就是方便、快捷、最容易想到，缺点就是每个git项目都要重复一遍。\n\n### 方案二：全局设置忽略\n虽然每个项目配.gitignore文件可以成功，但是每个项目都需要配，嗯，有点烦。我们可以在git的全局进行配置来忽略.DS_Store文件。\n\n设置之前我们先看下现在的git config配置情况（git config官方文档说明）：\n\n```\n$ git config --list\n```\n实际上git配置情况可以在 ~/.gitconfig 文件中查看。\n\n```\n$ vi ~/.gitconfig\n```\n通过 `:q!` 退出后，我们需要建立一个文件，把需要全局忽略的文件路径写入其中。该文件起名为.gitignore_global：\n\n```\n$ touch ~/.gitignore_global\n```\n然后对这个文件进行修改。\n\n```\n# Mac OS\n**/.DS_Store\n```\n然后对git进行全局设置，让git忽略.gitignore_global中的所有文件：\n```\n$ git config --global core.excludesfile ~/.gitignore_global\n```\n这样就不用每个git目录都设置忽略.DS_Store文件了！\n\n\n","source":"_posts/git相关操作/002-gitignore/README.md","raw":"---\ntitle: .gitignore设置\ndate: {{ date }}\ncategories:\n- git\ntags: [git, .gitignore, .gitignore_global]\n---\n\n* [原文](https://orianna-zzo.github.io/sci-tech/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/)\n\n<!-- more -->\n\n## Git中多出来的.DS_Store\n\n虽然不是第一次使用mac，也不是第一次在mac上使用git，但对mac实际上非常不熟悉。每次git上传时多出来的.DS_Store文件虽然不清楚具体做什么，但看上去并没什么问题。git一般也是自己一个人单机使用，就算换机也一般是直接换，没有遇到过两个同时使用的时候，上传.DS_Store也就默认都上传了。\n\n但这次用两个mac，一个mac提交了修改，第二个mac想要拉下来时居然遇到了.DS_Store文件被修改过需要提交再merge。什么？我没改过内容呀？所以这个.DS_Store是什么鬼？\n\n.DS_Store是Mac OS用来存储这个文件夹的显示属性的，被作为一种通用的有关显示设置的元数据（比如图标位置等设置）为Finder、Spotlight用。所以在不经意间就会修改这个文件。而文件共享时为了隐私关系将.DS_Store文件删除比较好，因为其中有一些信息在不经意间泄露出去。\n\n## Git中处理方案\n\n### 方案一：项目设置.gitignore\n\n仅针对git的处理最naive的想法就是设置.gitignore文件。\n\n.gitignore文件用于忽略文件，官网介绍在这里，规范如下：\n\n* 所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略，空行可以为了可读性分隔段落，# 表明注释。\n* 第一个 / 会匹配路径的根目录，举个栗子，”/*.html”会匹配”index.html”，而不是”d/index.html”。\n* 通配符 * 匹配任意个任意字符，? 匹配一个任意字符。需要注意的是通配符不会匹配文件路径中的 /，举个栗子，”d/*.html”会匹配”d/index.html”，但不会匹配”d/a/b/c/index.html”。\n* 两个连续的星号 ** 有特殊含义：\n  * 以 **/ 开头表示匹配所有的文件夹，例如 **/test.md 匹配所有的test.md文件。\n  * 以 /** 结尾表示匹配文件夹内所有内容，例如 a/** 匹配文件夹a中所有内容。\n  * 连续星号 ** 前后分别被 / 夹住表示匹配0或者多层文件夹，例如 a/**/b 匹配到 a/b 、a/x/b 、a/x/y/b 等。\n* 前缀 ! 的模式表示如果前面匹配到被忽略，则重新添加回来。如果匹配到的父文件夹还是忽略状态，该文件还是保持忽略状态。如果路径名第一个字符为 ! ，则需要在前面增加 \\ 进行转义。\n\n对于一些常用的系统、工程文件的.gitignore文件可以参考这个网站进行设置，这里有很多模板。\n\n针对.DS_Store文件，在git工程文件夹中新建.gitignore文件，在文件中设置：\n\n```\n.gitignore\n**/.DS_Store\n```\n\n对于已经提交的内容，希望git能够忽略，但同时并不会删除本地文件，需要在terminal输入以下命令：\n```\n$ git rm -r --cached $file_path\n```\n这个方案的优点就是方便、快捷、最容易想到，缺点就是每个git项目都要重复一遍。\n\n### 方案二：全局设置忽略\n虽然每个项目配.gitignore文件可以成功，但是每个项目都需要配，嗯，有点烦。我们可以在git的全局进行配置来忽略.DS_Store文件。\n\n设置之前我们先看下现在的git config配置情况（git config官方文档说明）：\n\n```\n$ git config --list\n```\n实际上git配置情况可以在 ~/.gitconfig 文件中查看。\n\n```\n$ vi ~/.gitconfig\n```\n通过 `:q!` 退出后，我们需要建立一个文件，把需要全局忽略的文件路径写入其中。该文件起名为.gitignore_global：\n\n```\n$ touch ~/.gitignore_global\n```\n然后对这个文件进行修改。\n\n```\n# Mac OS\n**/.DS_Store\n```\n然后对git进行全局设置，让git忽略.gitignore_global中的所有文件：\n```\n$ git config --global core.excludesfile ~/.gitignore_global\n```\n这样就不用每个git目录都设置忽略.DS_Store文件了！\n\n\n","slug":"git相关操作/002-gitignore/README","published":1,"updated":"2024-08-09T02:50:19.857Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93m000fdgxrc1r3bsv3","content":"<ul>\n<li><a class=\"link\"   href=\"https://orianna-zzo.github.io/sci-tech/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/\" >原文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Git中多出来的-DS-Store\"><a href=\"#Git中多出来的-DS-Store\" class=\"headerlink\" title=\"Git中多出来的.DS_Store\"></a>Git中多出来的.DS_Store</h2><p>虽然不是第一次使用mac，也不是第一次在mac上使用git，但对mac实际上非常不熟悉。每次git上传时多出来的.DS_Store文件虽然不清楚具体做什么，但看上去并没什么问题。git一般也是自己一个人单机使用，就算换机也一般是直接换，没有遇到过两个同时使用的时候，上传.DS_Store也就默认都上传了。</p>\n<p>但这次用两个mac，一个mac提交了修改，第二个mac想要拉下来时居然遇到了.DS_Store文件被修改过需要提交再merge。什么？我没改过内容呀？所以这个.DS_Store是什么鬼？</p>\n<p>.DS_Store是Mac OS用来存储这个文件夹的显示属性的，被作为一种通用的有关显示设置的元数据（比如图标位置等设置）为Finder、Spotlight用。所以在不经意间就会修改这个文件。而文件共享时为了隐私关系将.DS_Store文件删除比较好，因为其中有一些信息在不经意间泄露出去。</p>\n<h2 id=\"Git中处理方案\"><a href=\"#Git中处理方案\" class=\"headerlink\" title=\"Git中处理方案\"></a>Git中处理方案</h2><h3 id=\"方案一：项目设置-gitignore\"><a href=\"#方案一：项目设置-gitignore\" class=\"headerlink\" title=\"方案一：项目设置.gitignore\"></a>方案一：项目设置.gitignore</h3><p>仅针对git的处理最naive的想法就是设置.gitignore文件。</p>\n<p>.gitignore文件用于忽略文件，官网介绍在这里，规范如下：</p>\n<ul>\n<li>所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略，空行可以为了可读性分隔段落，# 表明注释。</li>\n<li>第一个 &#x2F; 会匹配路径的根目录，举个栗子，”&#x2F;*.html”会匹配”index.html”，而不是”d&#x2F;index.html”。</li>\n<li>通配符 * 匹配任意个任意字符，? 匹配一个任意字符。需要注意的是通配符不会匹配文件路径中的 &#x2F;，举个栗子，”d&#x2F;*.html”会匹配”d&#x2F;index.html”，但不会匹配”d&#x2F;a&#x2F;b&#x2F;c&#x2F;index.html”。</li>\n<li>两个连续的星号 ** 有特殊含义：<ul>\n<li>以 **&#x2F; 开头表示匹配所有的文件夹，例如 **&#x2F;test.md 匹配所有的test.md文件。</li>\n<li>以 &#x2F;** 结尾表示匹配文件夹内所有内容，例如 a&#x2F;** 匹配文件夹a中所有内容。</li>\n<li>连续星号 ** 前后分别被 &#x2F; 夹住表示匹配0或者多层文件夹，例如 a&#x2F;**&#x2F;b 匹配到 a&#x2F;b 、a&#x2F;x&#x2F;b 、a&#x2F;x&#x2F;y&#x2F;b 等。</li>\n</ul>\n</li>\n<li>前缀 ! 的模式表示如果前面匹配到被忽略，则重新添加回来。如果匹配到的父文件夹还是忽略状态，该文件还是保持忽略状态。如果路径名第一个字符为 ! ，则需要在前面增加 \\ 进行转义。</li>\n</ul>\n<p>对于一些常用的系统、工程文件的.gitignore文件可以参考这个网站进行设置，这里有很多模板。</p>\n<p>针对.DS_Store文件，在git工程文件夹中新建.gitignore文件，在文件中设置：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore</span><br><span class=\"line\">**/.DS_Store</span><br></pre></td></tr></table></figure></div>\n\n<p>对于已经提交的内容，希望git能够忽略，但同时并不会删除本地文件，需要在terminal输入以下命令：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached $file_path</span><br></pre></td></tr></table></figure></div>\n<p>这个方案的优点就是方便、快捷、最容易想到，缺点就是每个git项目都要重复一遍。</p>\n<h3 id=\"方案二：全局设置忽略\"><a href=\"#方案二：全局设置忽略\" class=\"headerlink\" title=\"方案二：全局设置忽略\"></a>方案二：全局设置忽略</h3><p>虽然每个项目配.gitignore文件可以成功，但是每个项目都需要配，嗯，有点烦。我们可以在git的全局进行配置来忽略.DS_Store文件。</p>\n<p>设置之前我们先看下现在的git config配置情况（git config官方文档说明）：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure></div>\n<p>实际上git配置情况可以在 ~&#x2F;.gitconfig 文件中查看。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi ~/.gitconfig</span><br></pre></td></tr></table></figure></div>\n<p>通过 <code>:q!</code> 退出后，我们需要建立一个文件，把需要全局忽略的文件路径写入其中。该文件起名为.gitignore_global：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.gitignore_global</span><br></pre></td></tr></table></figure></div>\n<p>然后对这个文件进行修改。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mac OS</span><br><span class=\"line\">**/.DS_Store</span><br></pre></td></tr></table></figure></div>\n<p>然后对git进行全局设置，让git忽略.gitignore_global中的所有文件：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure></div>\n<p>这样就不用每个git目录都设置忽略.DS_Store文件了！</p>\n","excerpt":"<ul>\n<li><a class=\"link\"   href=\"https://orianna-zzo.github.io/sci-tech/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/\" >原文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>","more":"<h2 id=\"Git中多出来的-DS-Store\"><a href=\"#Git中多出来的-DS-Store\" class=\"headerlink\" title=\"Git中多出来的.DS_Store\"></a>Git中多出来的.DS_Store</h2><p>虽然不是第一次使用mac，也不是第一次在mac上使用git，但对mac实际上非常不熟悉。每次git上传时多出来的.DS_Store文件虽然不清楚具体做什么，但看上去并没什么问题。git一般也是自己一个人单机使用，就算换机也一般是直接换，没有遇到过两个同时使用的时候，上传.DS_Store也就默认都上传了。</p>\n<p>但这次用两个mac，一个mac提交了修改，第二个mac想要拉下来时居然遇到了.DS_Store文件被修改过需要提交再merge。什么？我没改过内容呀？所以这个.DS_Store是什么鬼？</p>\n<p>.DS_Store是Mac OS用来存储这个文件夹的显示属性的，被作为一种通用的有关显示设置的元数据（比如图标位置等设置）为Finder、Spotlight用。所以在不经意间就会修改这个文件。而文件共享时为了隐私关系将.DS_Store文件删除比较好，因为其中有一些信息在不经意间泄露出去。</p>\n<h2 id=\"Git中处理方案\"><a href=\"#Git中处理方案\" class=\"headerlink\" title=\"Git中处理方案\"></a>Git中处理方案</h2><h3 id=\"方案一：项目设置-gitignore\"><a href=\"#方案一：项目设置-gitignore\" class=\"headerlink\" title=\"方案一：项目设置.gitignore\"></a>方案一：项目设置.gitignore</h3><p>仅针对git的处理最naive的想法就是设置.gitignore文件。</p>\n<p>.gitignore文件用于忽略文件，官网介绍在这里，规范如下：</p>\n<ul>\n<li>所有空行或者以注释符号 ＃ 开头的行都会被 git 忽略，空行可以为了可读性分隔段落，# 表明注释。</li>\n<li>第一个 &#x2F; 会匹配路径的根目录，举个栗子，”&#x2F;*.html”会匹配”index.html”，而不是”d&#x2F;index.html”。</li>\n<li>通配符 * 匹配任意个任意字符，? 匹配一个任意字符。需要注意的是通配符不会匹配文件路径中的 &#x2F;，举个栗子，”d&#x2F;*.html”会匹配”d&#x2F;index.html”，但不会匹配”d&#x2F;a&#x2F;b&#x2F;c&#x2F;index.html”。</li>\n<li>两个连续的星号 ** 有特殊含义：<ul>\n<li>以 **&#x2F; 开头表示匹配所有的文件夹，例如 **&#x2F;test.md 匹配所有的test.md文件。</li>\n<li>以 &#x2F;** 结尾表示匹配文件夹内所有内容，例如 a&#x2F;** 匹配文件夹a中所有内容。</li>\n<li>连续星号 ** 前后分别被 &#x2F; 夹住表示匹配0或者多层文件夹，例如 a&#x2F;**&#x2F;b 匹配到 a&#x2F;b 、a&#x2F;x&#x2F;b 、a&#x2F;x&#x2F;y&#x2F;b 等。</li>\n</ul>\n</li>\n<li>前缀 ! 的模式表示如果前面匹配到被忽略，则重新添加回来。如果匹配到的父文件夹还是忽略状态，该文件还是保持忽略状态。如果路径名第一个字符为 ! ，则需要在前面增加 \\ 进行转义。</li>\n</ul>\n<p>对于一些常用的系统、工程文件的.gitignore文件可以参考这个网站进行设置，这里有很多模板。</p>\n<p>针对.DS_Store文件，在git工程文件夹中新建.gitignore文件，在文件中设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore</span><br><span class=\"line\">**/.DS_Store</span><br></pre></td></tr></table></figure>\n\n<p>对于已经提交的内容，希望git能够忽略，但同时并不会删除本地文件，需要在terminal输入以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached $file_path</span><br></pre></td></tr></table></figure>\n<p>这个方案的优点就是方便、快捷、最容易想到，缺点就是每个git项目都要重复一遍。</p>\n<h3 id=\"方案二：全局设置忽略\"><a href=\"#方案二：全局设置忽略\" class=\"headerlink\" title=\"方案二：全局设置忽略\"></a>方案二：全局设置忽略</h3><p>虽然每个项目配.gitignore文件可以成功，但是每个项目都需要配，嗯，有点烦。我们可以在git的全局进行配置来忽略.DS_Store文件。</p>\n<p>设置之前我们先看下现在的git config配置情况（git config官方文档说明）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n<p>实际上git配置情况可以在 ~&#x2F;.gitconfig 文件中查看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p>通过 <code>:q!</code> 退出后，我们需要建立一个文件，把需要全局忽略的文件路径写入其中。该文件起名为.gitignore_global：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.gitignore_global</span><br></pre></td></tr></table></figure>\n<p>然后对这个文件进行修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mac OS</span><br><span class=\"line\">**/.DS_Store</span><br></pre></td></tr></table></figure>\n<p>然后对git进行全局设置，让git忽略.gitignore_global中的所有文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>\n<p>这样就不用每个git目录都设置忽略.DS_Store文件了！</p>"},{"title":"Hexo使用记录 - 2024","date":"2024-07-19T02:43:55.994Z","_content":"\n# 一、2018的记录\n[Mac+Hexo+github搭建myblog完整版](https://www.jianshu.com/p/0206f62000a1)\n\n\n# 二、2024新记录\n\n## 1. 图片相关设置\n\n### a. 图床设置\n\n> 使用 `Picgo` + `Github`\n\n![](https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png)\n\n### b. 图片引入方式\n\n[单独的文章详细说明了图片引入方式](https://linxiang.netlify.app/categories/hexo%E5%AE%9E%E8%B7%B5/)\n\n#### Ⅰ. 全局资源（共用资源）\n\n例如：全局头像、背景图片等。\n\n1. 在`source`目录下创建`source/global-assets`文件夹，与`_posts`同级，将图片放入其中。\n2. 直接引用 `![](global-assets/myhead.jpg)`\n\n![](global-assets/myhead.jpg)\n\n<img src=\"/global-assets/myhead.jpg\" width=\"40%\" />\n\n#### Ⅱ. 文章资源\n\n指的是每个文档的图片资源，便于管理。\n\n1. 在当个文档中创建同名文件夹，例如`015-hexo-usage/hexo2024`，在同路径下 `015-hexo-usage/hexo2024.md`中引用。\n\n![文章资源](myhead.jpg)\n\n<img src=\"myhead.jpg\" width=\"50%\" />\n\n\n### c. 图片排版 \n\n<p align = \"center\">\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"20%\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"30%\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"400\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"100\" />\n</p>\n\n\n## 2. 本地预览\n\n```\n$ hexo server\n```\n\n## 3. Netlify部署\n\n[Netlify官网](https://app.netlify.com/)\n\n1. 先本地构建\n```\n$ hexo clean     # or hexo c\n$ hexo generate  # or hexo g\n```\n2. 再提交代码，Netlify会自动部署。\n\n\n## 4. 主题设置\n\n1. 前往Hexo工程目录下themes下；\n2. ```$ git submodule add https://github.com/EvanNotFound/hexo-theme-redefine.git```\n3. 添加submodule，否则Netlify无法部署；\n4. 修改`_config.yml`文件，将`theme: next`修改为`theme: hexo-theme-redefine`；\n5. 提交代码到github，Netlify会自动部署。\n\n## 5. redefine主题自定义\n\n[redefine](https://github.com/EvanNotFound/hexo-theme-redefine)\n\n[redefine-docs](https://redefine-docs.ohevan.com/getting-started)\n\n\n## 6. 生成aa\n\n","source":"_posts/hexo-usage/hexo-usage-2024/hexo2024.md","raw":"---\ntitle: Hexo使用记录 - 2024\ndate: {{ date }}\ncategories:\n- hexo实践\ntags: [hexo, github, picgo]\n---\n\n# 一、2018的记录\n[Mac+Hexo+github搭建myblog完整版](https://www.jianshu.com/p/0206f62000a1)\n\n\n# 二、2024新记录\n\n## 1. 图片相关设置\n\n### a. 图床设置\n\n> 使用 `Picgo` + `Github`\n\n![](https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png)\n\n### b. 图片引入方式\n\n[单独的文章详细说明了图片引入方式](https://linxiang.netlify.app/categories/hexo%E5%AE%9E%E8%B7%B5/)\n\n#### Ⅰ. 全局资源（共用资源）\n\n例如：全局头像、背景图片等。\n\n1. 在`source`目录下创建`source/global-assets`文件夹，与`_posts`同级，将图片放入其中。\n2. 直接引用 `![](global-assets/myhead.jpg)`\n\n![](global-assets/myhead.jpg)\n\n<img src=\"/global-assets/myhead.jpg\" width=\"40%\" />\n\n#### Ⅱ. 文章资源\n\n指的是每个文档的图片资源，便于管理。\n\n1. 在当个文档中创建同名文件夹，例如`015-hexo-usage/hexo2024`，在同路径下 `015-hexo-usage/hexo2024.md`中引用。\n\n![文章资源](myhead.jpg)\n\n<img src=\"myhead.jpg\" width=\"50%\" />\n\n\n### c. 图片排版 \n\n<p align = \"center\">\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"20%\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"30%\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"400\" />\n  <img src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\" width=\"100\" />\n</p>\n\n\n## 2. 本地预览\n\n```\n$ hexo server\n```\n\n## 3. Netlify部署\n\n[Netlify官网](https://app.netlify.com/)\n\n1. 先本地构建\n```\n$ hexo clean     # or hexo c\n$ hexo generate  # or hexo g\n```\n2. 再提交代码，Netlify会自动部署。\n\n\n## 4. 主题设置\n\n1. 前往Hexo工程目录下themes下；\n2. ```$ git submodule add https://github.com/EvanNotFound/hexo-theme-redefine.git```\n3. 添加submodule，否则Netlify无法部署；\n4. 修改`_config.yml`文件，将`theme: next`修改为`theme: hexo-theme-redefine`；\n5. 提交代码到github，Netlify会自动部署。\n\n## 5. redefine主题自定义\n\n[redefine](https://github.com/EvanNotFound/hexo-theme-redefine)\n\n[redefine-docs](https://redefine-docs.ohevan.com/getting-started)\n\n\n## 6. 生成aa\n\n","slug":"hexo-usage/hexo-usage-2024/hexo2024","published":1,"updated":"2024-08-09T06:12:44.357Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93n000gdgxr0k3j1ncz","content":"<h1 id=\"一、2018的记录\"><a href=\"#一、2018的记录\" class=\"headerlink\" title=\"一、2018的记录\"></a>一、2018的记录</h1><p><a class=\"link\"   href=\"https://www.jianshu.com/p/0206f62000a1\" >Mac+Hexo+github搭建myblog完整版 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"二、2024新记录\"><a href=\"#二、2024新记录\" class=\"headerlink\" title=\"二、2024新记录\"></a>二、2024新记录</h1><h2 id=\"1-图片相关设置\"><a href=\"#1-图片相关设置\" class=\"headerlink\" title=\"1. 图片相关设置\"></a>1. 图片相关设置</h2><h3 id=\"a-图床设置\"><a href=\"#a-图床设置\" class=\"headerlink\" title=\"a. 图床设置\"></a>a. 图床设置</h3><blockquote>\n<p>使用 <code>Picgo</code> + <code>Github</code></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png\"\n                     \n                ></p>\n<h3 id=\"b-图片引入方式\"><a href=\"#b-图片引入方式\" class=\"headerlink\" title=\"b. 图片引入方式\"></a>b. 图片引入方式</h3><p><a href=\"https://linxiang.netlify.app/categories/hexo%E5%AE%9E%E8%B7%B5/\">单独的文章详细说明了图片引入方式</a></p>\n<h4 id=\"Ⅰ-全局资源（共用资源）\"><a href=\"#Ⅰ-全局资源（共用资源）\" class=\"headerlink\" title=\"Ⅰ. 全局资源（共用资源）\"></a>Ⅰ. 全局资源（共用资源）</h4><p>例如：全局头像、背景图片等。</p>\n<ol>\n<li>在<code>source</code>目录下创建<code>source/global-assets</code>文件夹，与<code>_posts</code>同级，将图片放入其中。</li>\n<li>直接引用 <code>![](global-assets/myhead.jpg)</code></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/global-assets/myhead.jpg\"\n                     \n                ></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/global-assets/myhead.jpg\"\n                      width=\"40%\" \n                >\n\n<h4 id=\"Ⅱ-文章资源\"><a href=\"#Ⅱ-文章资源\" class=\"headerlink\" title=\"Ⅱ. 文章资源\"></a>Ⅱ. 文章资源</h4><p>指的是每个文档的图片资源，便于管理。</p>\n<ol>\n<li>在当个文档中创建同名文件夹，例如<code>015-hexo-usage/hexo2024</code>，在同路径下 <code>015-hexo-usage/hexo2024.md</code>中引用。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/19/hexo-usage/hexo-usage-2024/hexo2024/myhead.jpg\"\n                      alt=\"文章资源\"\n                ></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"myhead.jpg\"\n                      width=\"50%\" \n                >\n\n\n<h3 id=\"c-图片排版\"><a href=\"#c-图片排版\" class=\"headerlink\" title=\"c. 图片排版\"></a>c. 图片排版</h3><p align = \"center\">\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"20%\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"30%\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"400\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"100\" \n                >\n</p>\n\n\n<h2 id=\"2-本地预览\"><a href=\"#2-本地预览\" class=\"headerlink\" title=\"2. 本地预览\"></a>2. 本地预览</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"3-Netlify部署\"><a href=\"#3-Netlify部署\" class=\"headerlink\" title=\"3. Netlify部署\"></a>3. Netlify部署</h2><p><a class=\"link\"   href=\"https://app.netlify.com/\" >Netlify官网 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>先本地构建<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean     # or hexo c</span><br><span class=\"line\">$ hexo generate  # or hexo g</span><br></pre></td></tr></table></figure></div></li>\n<li>再提交代码，Netlify会自动部署。</li>\n</ol>\n<h2 id=\"4-主题设置\"><a href=\"#4-主题设置\" class=\"headerlink\" title=\"4. 主题设置\"></a>4. 主题设置</h2><ol>\n<li>前往Hexo工程目录下themes下；</li>\n<li><code>$ git submodule add https://github.com/EvanNotFound/hexo-theme-redefine.git</code></li>\n<li>添加submodule，否则Netlify无法部署；</li>\n<li>修改<code>_config.yml</code>文件，将<code>theme: next</code>修改为<code>theme: hexo-theme-redefine</code>；</li>\n<li>提交代码到github，Netlify会自动部署。</li>\n</ol>\n<h2 id=\"5-redefine主题自定义\"><a href=\"#5-redefine主题自定义\" class=\"headerlink\" title=\"5. redefine主题自定义\"></a>5. redefine主题自定义</h2><p><a class=\"link\"   href=\"https://github.com/EvanNotFound/hexo-theme-redefine\" >redefine <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://redefine-docs.ohevan.com/getting-started\" >redefine-docs <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"6-生成aa\"><a href=\"#6-生成aa\" class=\"headerlink\" title=\"6. 生成aa\"></a>6. 生成aa</h2>","excerpt":"","more":"<h1 id=\"一、2018的记录\"><a href=\"#一、2018的记录\" class=\"headerlink\" title=\"一、2018的记录\"></a>一、2018的记录</h1><p><a class=\"link\"   href=\"https://www.jianshu.com/p/0206f62000a1\" >Mac+Hexo+github搭建myblog完整版 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"二、2024新记录\"><a href=\"#二、2024新记录\" class=\"headerlink\" title=\"二、2024新记录\"></a>二、2024新记录</h1><h2 id=\"1-图片相关设置\"><a href=\"#1-图片相关设置\" class=\"headerlink\" title=\"1. 图片相关设置\"></a>1. 图片相关设置</h2><h3 id=\"a-图床设置\"><a href=\"#a-图床设置\" class=\"headerlink\" title=\"a. 图床设置\"></a>a. 图床设置</h3><blockquote>\n<p>使用 <code>Picgo</code> + <code>Github</code></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png\"\n                     \n                ></p>\n<h3 id=\"b-图片引入方式\"><a href=\"#b-图片引入方式\" class=\"headerlink\" title=\"b. 图片引入方式\"></a>b. 图片引入方式</h3><p><a href=\"https://linxiang.netlify.app/categories/hexo%E5%AE%9E%E8%B7%B5/\">单独的文章详细说明了图片引入方式</a></p>\n<h4 id=\"Ⅰ-全局资源（共用资源）\"><a href=\"#Ⅰ-全局资源（共用资源）\" class=\"headerlink\" title=\"Ⅰ. 全局资源（共用资源）\"></a>Ⅰ. 全局资源（共用资源）</h4><p>例如：全局头像、背景图片等。</p>\n<ol>\n<li>在<code>source</code>目录下创建<code>source/global-assets</code>文件夹，与<code>_posts</code>同级，将图片放入其中。</li>\n<li>直接引用 <code>![](global-assets/myhead.jpg)</code></li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/global-assets/myhead.jpg\"\n                     \n                ></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/global-assets/myhead.jpg\"\n                      width=\"40%\" \n                >\n\n<h4 id=\"Ⅱ-文章资源\"><a href=\"#Ⅱ-文章资源\" class=\"headerlink\" title=\"Ⅱ. 文章资源\"></a>Ⅱ. 文章资源</h4><p>指的是每个文档的图片资源，便于管理。</p>\n<ol>\n<li>在当个文档中创建同名文件夹，例如<code>015-hexo-usage/hexo2024</code>，在同路径下 <code>015-hexo-usage/hexo2024.md</code>中引用。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/19/hexo-usage/hexo-usage-2024/hexo2024/myhead.jpg\"\n                      alt=\"文章资源\"\n                ></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"myhead.jpg\"\n                      width=\"50%\" \n                >\n\n\n<h3 id=\"c-图片排版\"><a href=\"#c-图片排版\" class=\"headerlink\" title=\"c. 图片排版\"></a>c. 图片排版</h3><p align = \"center\">\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"20%\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"30%\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"400\" \n                >\n  <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://i-blog.csdnimg.cn/blog_migrate/348f8ce8a69c97427cf55dde66f1b4c7.png\"\n                      width=\"100\" \n                >\n</p>\n\n\n<h2 id=\"2-本地预览\"><a href=\"#2-本地预览\" class=\"headerlink\" title=\"2. 本地预览\"></a>2. 本地预览</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Netlify部署\"><a href=\"#3-Netlify部署\" class=\"headerlink\" title=\"3. Netlify部署\"></a>3. Netlify部署</h2><p><a class=\"link\"   href=\"https://app.netlify.com/\" >Netlify官网 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>先本地构建<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean     # or hexo c</span><br><span class=\"line\">$ hexo generate  # or hexo g</span><br></pre></td></tr></table></figure></li>\n<li>再提交代码，Netlify会自动部署。</li>\n</ol>\n<h2 id=\"4-主题设置\"><a href=\"#4-主题设置\" class=\"headerlink\" title=\"4. 主题设置\"></a>4. 主题设置</h2><ol>\n<li>前往Hexo工程目录下themes下；</li>\n<li><code>$ git submodule add https://github.com/EvanNotFound/hexo-theme-redefine.git</code></li>\n<li>添加submodule，否则Netlify无法部署；</li>\n<li>修改<code>_config.yml</code>文件，将<code>theme: next</code>修改为<code>theme: hexo-theme-redefine</code>；</li>\n<li>提交代码到github，Netlify会自动部署。</li>\n</ol>\n<h2 id=\"5-redefine主题自定义\"><a href=\"#5-redefine主题自定义\" class=\"headerlink\" title=\"5. redefine主题自定义\"></a>5. redefine主题自定义</h2><p><a class=\"link\"   href=\"https://github.com/EvanNotFound/hexo-theme-redefine\" >redefine <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://redefine-docs.ohevan.com/getting-started\" >redefine-docs <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"6-生成aa\"><a href=\"#6-生成aa\" class=\"headerlink\" title=\"6. 生成aa\"></a>6. 生成aa</h2>"},{"title":"hexo本地图片","date":"2024-08-09T06:00:56.651Z","_content":"\n# Hexo 官方插入本地图片方法\n\n* [hexo官网 - 资源文件夹](https://hexo.io/zh-cn/docs/asset-folders)\n\n## 1. 绝对路径（全局图片）\n\n如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们统一放在 `source/images` 文件夹中。然后通过以下方法进行访问。\n\n```\n![](/imges/image.jpg)\n```\n\n图片既可以在首页内容中访问到，也可以在文章正文中访问到。\n\n## 2. 相对路径（文章图片）\n\n图片除了可以放在统一的 `source/images` 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 `_config.yml` 来生成。\n\n```\npost_asset_folder: true\n```\n\n将 `_config.yml` 文件中的配置项 `post_asset_folder` 设为 `true` 后，执行命令 `hexo new post_name`，在 `source/_posts` 中会生成文章 `post_name.md` 和同名文件夹 `post_name`。将图片资源放在 `post_name` 中，文章就可以使用相对路径引用图片资源了。引用图片的方法如下：\n\n```\n![](image.jpg)\n```\n\n以上这种引用方法，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。\n\n\n# 3. 标签插件\n\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n引用语法如下：\n\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n在上述语法下，引用图片的方法如下：\n\n```\n{%  asset_img example.jpg This is an example image %}\n```\n\n通过这种方式，图片将会同时出现在文章和主页以及归档页中。\n\n# 二、图床\n\n\n### a. 图床设置\n\n> 使用 `Picgo` + `Github`\n\n![](https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png)\n\n# 三、插件\n\n六种图片引入方式：\n```\n# 文件夹名称不一样\n![1](A.gif)\n![2](assets/A.gif)\n![3](./assets/A.gif)\n\n# 文件夹名称一样\n![4](myhead.jpg)\n![5](hexo本地图片/myhead.jpg)\n![6](./hexo本地图片/myhead.jpg)\n```\n\n* 未安装 `hexo-asset-image` 插件，图片无法显示。\n  * 本地：1 4 不显示，2 3 5 6 显示\n  * 远程：4 显示，其他不显示\n* 安装 `hexo-asset-image`\n\n\n\n\n\n![1](A.gif)\n\n![2](assets/A.gif)\n\n![3](./assets/A.gif)\n\n\n![4](myhead.jpg)\n\n![5](hexo本地图片/myhead.jpg)\n\n![6](./hexo本地图片/myhead.jpg)","source":"_posts/hexo-usage/hexo本地图片/hexo本地图片.md","raw":"---\ntitle: hexo本地图片\ndate: {{ date }}\ncategories: \n- hexo实践\ntags: \n- hexo\n---\n\n# Hexo 官方插入本地图片方法\n\n* [hexo官网 - 资源文件夹](https://hexo.io/zh-cn/docs/asset-folders)\n\n## 1. 绝对路径（全局图片）\n\n如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们统一放在 `source/images` 文件夹中。然后通过以下方法进行访问。\n\n```\n![](/imges/image.jpg)\n```\n\n图片既可以在首页内容中访问到，也可以在文章正文中访问到。\n\n## 2. 相对路径（文章图片）\n\n图片除了可以放在统一的 `source/images` 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 `_config.yml` 来生成。\n\n```\npost_asset_folder: true\n```\n\n将 `_config.yml` 文件中的配置项 `post_asset_folder` 设为 `true` 后，执行命令 `hexo new post_name`，在 `source/_posts` 中会生成文章 `post_name.md` 和同名文件夹 `post_name`。将图片资源放在 `post_name` 中，文章就可以使用相对路径引用图片资源了。引用图片的方法如下：\n\n```\n![](image.jpg)\n```\n\n以上这种引用方法，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。\n\n\n# 3. 标签插件\n\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n引用语法如下：\n\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n在上述语法下，引用图片的方法如下：\n\n```\n{%  asset_img example.jpg This is an example image %}\n```\n\n通过这种方式，图片将会同时出现在文章和主页以及归档页中。\n\n# 二、图床\n\n\n### a. 图床设置\n\n> 使用 `Picgo` + `Github`\n\n![](https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png)\n\n# 三、插件\n\n六种图片引入方式：\n```\n# 文件夹名称不一样\n![1](A.gif)\n![2](assets/A.gif)\n![3](./assets/A.gif)\n\n# 文件夹名称一样\n![4](myhead.jpg)\n![5](hexo本地图片/myhead.jpg)\n![6](./hexo本地图片/myhead.jpg)\n```\n\n* 未安装 `hexo-asset-image` 插件，图片无法显示。\n  * 本地：1 4 不显示，2 3 5 6 显示\n  * 远程：4 显示，其他不显示\n* 安装 `hexo-asset-image`\n\n\n\n\n\n![1](A.gif)\n\n![2](assets/A.gif)\n\n![3](./assets/A.gif)\n\n\n![4](myhead.jpg)\n\n![5](hexo本地图片/myhead.jpg)\n\n![6](./hexo本地图片/myhead.jpg)","slug":"hexo-usage/hexo本地图片/hexo本地图片","published":1,"updated":"2024-08-09T07:33:50.943Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93o000kdgxr0o413yn7","content":"<h1 id=\"Hexo-官方插入本地图片方法\"><a href=\"#Hexo-官方插入本地图片方法\" class=\"headerlink\" title=\"Hexo 官方插入本地图片方法\"></a>Hexo 官方插入本地图片方法</h1><ul>\n<li><a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/asset-folders\" >hexo官网 - 资源文件夹 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<h2 id=\"1-绝对路径（全局图片）\"><a href=\"#1-绝对路径（全局图片）\" class=\"headerlink\" title=\"1. 绝对路径（全局图片）\"></a>1. 绝对路径（全局图片）</h2><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们统一放在 <code>source/images</code> 文件夹中。然后通过以下方法进行访问。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](/imges/image.jpg)</span><br></pre></td></tr></table></figure></div>\n\n<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>\n<h2 id=\"2-相对路径（文章图片）\"><a href=\"#2-相对路径（文章图片）\" class=\"headerlink\" title=\"2. 相对路径（文章图片）\"></a>2. 相对路径（文章图片）</h2><p>图片除了可以放在统一的 <code>source/images</code> 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 <code>_config.yml</code> 来生成。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure></div>\n\n<p>将 <code>_config.yml</code> 文件中的配置项 <code>post_asset_folder</code> 设为 <code>true</code> 后，执行命令 <code>hexo new post_name</code>，在 <code>source/_posts</code> 中会生成文章 <code>post_name.md</code> 和同名文件夹 <code>post_name</code>。将图片资源放在 <code>post_name</code> 中，文章就可以使用相对路径引用图片资源了。引用图片的方法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image.jpg)</span><br></pre></td></tr></table></figure></div>\n\n<p>以上这种引用方法，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p>\n<h1 id=\"3-标签插件\"><a href=\"#3-标签插件\" class=\"headerlink\" title=\"3. 标签插件\"></a>3. 标签插件</h1><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>引用语法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在上述语法下，引用图片的方法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%  asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>\n<h1 id=\"二、图床\"><a href=\"#二、图床\" class=\"headerlink\" title=\"二、图床\"></a>二、图床</h1><h3 id=\"a-图床设置\"><a href=\"#a-图床设置\" class=\"headerlink\" title=\"a. 图床设置\"></a>a. 图床设置</h3><blockquote>\n<p>使用 <code>Picgo</code> + <code>Github</code></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png\"\n                     \n                ></p>\n<h1 id=\"三、插件\"><a href=\"#三、插件\" class=\"headerlink\" title=\"三、插件\"></a>三、插件</h1><p>六种图片引入方式：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文件夹名称不一样</span><br><span class=\"line\">![1](A.gif)</span><br><span class=\"line\">![2](assets/A.gif)</span><br><span class=\"line\">![3](./assets/A.gif)</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件夹名称一样</span><br><span class=\"line\">![4](myhead.jpg)</span><br><span class=\"line\">![5](hexo本地图片/myhead.jpg)</span><br><span class=\"line\">![6](./hexo本地图片/myhead.jpg)</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>未安装 <code>hexo-asset-image</code> 插件，图片无法显示。<ul>\n<li>本地：1 4 不显示，2 3 5 6 显示</li>\n<li>远程：4 显示，其他不显示</li>\n</ul>\n</li>\n<li>安装 <code>hexo-asset-image</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/A.gif\"\n                      alt=\"1\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/assets/A.gif\"\n                      alt=\"2\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/./assets/A.gif\"\n                      alt=\"3\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/09/hexo-usage/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"4\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"5\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/./hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"6\"\n                ></p>\n","excerpt":"","more":"<h1 id=\"Hexo-官方插入本地图片方法\"><a href=\"#Hexo-官方插入本地图片方法\" class=\"headerlink\" title=\"Hexo 官方插入本地图片方法\"></a>Hexo 官方插入本地图片方法</h1><ul>\n<li><a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/asset-folders\" >hexo官网 - 资源文件夹 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<h2 id=\"1-绝对路径（全局图片）\"><a href=\"#1-绝对路径（全局图片）\" class=\"headerlink\" title=\"1. 绝对路径（全局图片）\"></a>1. 绝对路径（全局图片）</h2><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们统一放在 <code>source/images</code> 文件夹中。然后通过以下方法进行访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](/imges/image.jpg)</span><br></pre></td></tr></table></figure>\n\n<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>\n<h2 id=\"2-相对路径（文章图片）\"><a href=\"#2-相对路径（文章图片）\" class=\"headerlink\" title=\"2. 相对路径（文章图片）\"></a>2. 相对路径（文章图片）</h2><p>图片除了可以放在统一的 <code>source/images</code> 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 <code>_config.yml</code> 来生成。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>_config.yml</code> 文件中的配置项 <code>post_asset_folder</code> 设为 <code>true</code> 后，执行命令 <code>hexo new post_name</code>，在 <code>source/_posts</code> 中会生成文章 <code>post_name.md</code> 和同名文件夹 <code>post_name</code>。将图片资源放在 <code>post_name</code> 中，文章就可以使用相对路径引用图片资源了。引用图片的方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image.jpg)</span><br></pre></td></tr></table></figure>\n\n<p>以上这种引用方法，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p>\n<h1 id=\"3-标签插件\"><a href=\"#3-标签插件\" class=\"headerlink\" title=\"3. 标签插件\"></a>3. 标签插件</h1><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<p>引用语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述语法下，引用图片的方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%  asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>\n<h1 id=\"二、图床\"><a href=\"#二、图床\" class=\"headerlink\" title=\"二、图床\"></a>二、图床</h1><h3 id=\"a-图床设置\"><a href=\"#a-图床设置\" class=\"headerlink\" title=\"a. 图床设置\"></a>a. 图床设置</h3><blockquote>\n<p>使用 <code>Picgo</code> + <code>Github</code></p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/001-hexo-usage/202407221550864.png\"\n                     \n                ></p>\n<h1 id=\"三、插件\"><a href=\"#三、插件\" class=\"headerlink\" title=\"三、插件\"></a>三、插件</h1><p>六种图片引入方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文件夹名称不一样</span><br><span class=\"line\">![1](A.gif)</span><br><span class=\"line\">![2](assets/A.gif)</span><br><span class=\"line\">![3](./assets/A.gif)</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件夹名称一样</span><br><span class=\"line\">![4](myhead.jpg)</span><br><span class=\"line\">![5](hexo本地图片/myhead.jpg)</span><br><span class=\"line\">![6](./hexo本地图片/myhead.jpg)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>未安装 <code>hexo-asset-image</code> 插件，图片无法显示。<ul>\n<li>本地：1 4 不显示，2 3 5 6 显示</li>\n<li>远程：4 显示，其他不显示</li>\n</ul>\n</li>\n<li>安装 <code>hexo-asset-image</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/A.gif\"\n                      alt=\"1\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/assets/A.gif\"\n                      alt=\"2\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/./assets/A.gif\"\n                      alt=\"3\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/09/hexo-usage/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"4\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"5\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/./hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/myhead.jpg\"\n                      alt=\"6\"\n                ></p>\n"},{"title":"let、const解决了什么问题？","date":"2024-08-09T05:43:23.262Z","_content":"\n## 前言\n\n今天来聊一聊腾讯的一个面试题，let、const解决了什么问题？\n\n## let、const解决了什么问题？\n\n我们来分析一下这个问题\n\n首先这个问题问我们let、const解决了什么问题？\n\n我们就需要去分别讲解一个let和const是干什么用的\n\n首先let和const是es6后面才有的东西，既然问到这个说明面试官的问题聚焦到了es6的范围\n\n既然如此我们就一定知道我们首先需要讲一下let和const是干什么的\n\n还要说明es6的let和const对比之前的var的优势在哪里\n\n## let关键字\n\nlet是JavaScript中用于声明变量的关键字,它于2015年被ES6(ECMAScript 6)标准引入。与较早的var关键字相比,let有以下几个主要特点:\n\n1. 块级作用域(Block Scope)\n\n使用let声明的变量具有块级作用域,即它们只在声明该变量的花括号{}内部可见和访问。这与使用var声明的变量具有函数作用域(Function Scope)的行为不同。\n\n2. 暂时性死区(Temporal Dead Zone, TDZ)\n\n在变量声明之前使用let声明的变量会进入暂时性死区,此时访问该变量会抛出ReferenceError。这与使用var声明的变量在未初始化前默认值为undefined的行为不同。\n\n3. 无变量提升(No Hoisting)\n\nlet声明的变量不会像var一样被提升到作用域顶部,这意味着在声明之前无法访问let声明的变量。\n\n4. 不允许重复声明\n\n在同一作用域内,使用let声明的变量不允许被重复声明,否则会抛出SyntaxError。而var则可以在同一作用域内重复声明同名变量而不会报错。\n\nlet关键字提供了更加严格和直观的变量声明和作用域行为,有利于编写更加健壮和可维护的JavaScript代码。它的块级作用域、暂时性死区和无变量提升等特性,都有助于帮助开发者更好地管理变量的生命周期和作用域。\n\n## const关键字\n\nlet关键字有的它都有，唯一的区别就是它被赋初值以后无法修改\n\n## let和const对比var，优势在哪里\n\nES6的使命是让JavaScript能够成为Java一样的企业级大型语言\n\n1. 作用域管理更加清晰和直观\n  * var声明的变量具有函数作用域或全局作用域,这可能会导致意料之外的变量污染和泄露。\n  * let和const声明的变量具有块级作用域,限定在它们所在的花括号{}内部,使得变量的作用域更加明确和可控。\n\n2. 避免变量提升问题\n* var声明的变量会被提升到作用域顶部,这可能会导致意料之外的行为。\n* let和const声明的变量不会被提升,必须在声明之后才能访问,避免了这种问题。\n\n3. 引入暂时性死区(TDZ)\n* let和const声明的变量在声明之前会进入暂时性死区,访问会抛出ReferenceError。这有助于避免一些隐藏的bug。\n* var声明的变量在未初始化前默认值为undefined,可能会导致一些隐藏的错误。\n\n4. 支持常量声明\n* const关键字允许声明不可变的常量变量,有助于增强代码的可读性和稳定性。\n* var无法直接声明常量,需要使用一些其他手段来实现。\n\n5. 不允许重复声明\n* let和const不允许在同一作用域内重复声明同名变量,有利于避免一些细微的错误。\n* var则可以在同一作用域内重复声明同名变量而不会报错。\n\nES6中的let和const相比var提供了更加清晰和严格的变量管理机制,有助于编写更加健壮和可维护的JavaScript代码。这些改进使得JavaScript的变量声明和作用域行为更加符合开发者的预期,减少了一些常见的错误。","source":"_posts/前端/ES6/001-let、const解决了什么问题？/index.md","raw":"---\ntitle: let、const解决了什么问题？\ndate: {{ date }}\ncategories: \n- ES6\ntags: \n- 前端\n- js\n- let\n- const\n---\n\n## 前言\n\n今天来聊一聊腾讯的一个面试题，let、const解决了什么问题？\n\n## let、const解决了什么问题？\n\n我们来分析一下这个问题\n\n首先这个问题问我们let、const解决了什么问题？\n\n我们就需要去分别讲解一个let和const是干什么用的\n\n首先let和const是es6后面才有的东西，既然问到这个说明面试官的问题聚焦到了es6的范围\n\n既然如此我们就一定知道我们首先需要讲一下let和const是干什么的\n\n还要说明es6的let和const对比之前的var的优势在哪里\n\n## let关键字\n\nlet是JavaScript中用于声明变量的关键字,它于2015年被ES6(ECMAScript 6)标准引入。与较早的var关键字相比,let有以下几个主要特点:\n\n1. 块级作用域(Block Scope)\n\n使用let声明的变量具有块级作用域,即它们只在声明该变量的花括号{}内部可见和访问。这与使用var声明的变量具有函数作用域(Function Scope)的行为不同。\n\n2. 暂时性死区(Temporal Dead Zone, TDZ)\n\n在变量声明之前使用let声明的变量会进入暂时性死区,此时访问该变量会抛出ReferenceError。这与使用var声明的变量在未初始化前默认值为undefined的行为不同。\n\n3. 无变量提升(No Hoisting)\n\nlet声明的变量不会像var一样被提升到作用域顶部,这意味着在声明之前无法访问let声明的变量。\n\n4. 不允许重复声明\n\n在同一作用域内,使用let声明的变量不允许被重复声明,否则会抛出SyntaxError。而var则可以在同一作用域内重复声明同名变量而不会报错。\n\nlet关键字提供了更加严格和直观的变量声明和作用域行为,有利于编写更加健壮和可维护的JavaScript代码。它的块级作用域、暂时性死区和无变量提升等特性,都有助于帮助开发者更好地管理变量的生命周期和作用域。\n\n## const关键字\n\nlet关键字有的它都有，唯一的区别就是它被赋初值以后无法修改\n\n## let和const对比var，优势在哪里\n\nES6的使命是让JavaScript能够成为Java一样的企业级大型语言\n\n1. 作用域管理更加清晰和直观\n  * var声明的变量具有函数作用域或全局作用域,这可能会导致意料之外的变量污染和泄露。\n  * let和const声明的变量具有块级作用域,限定在它们所在的花括号{}内部,使得变量的作用域更加明确和可控。\n\n2. 避免变量提升问题\n* var声明的变量会被提升到作用域顶部,这可能会导致意料之外的行为。\n* let和const声明的变量不会被提升,必须在声明之后才能访问,避免了这种问题。\n\n3. 引入暂时性死区(TDZ)\n* let和const声明的变量在声明之前会进入暂时性死区,访问会抛出ReferenceError。这有助于避免一些隐藏的bug。\n* var声明的变量在未初始化前默认值为undefined,可能会导致一些隐藏的错误。\n\n4. 支持常量声明\n* const关键字允许声明不可变的常量变量,有助于增强代码的可读性和稳定性。\n* var无法直接声明常量,需要使用一些其他手段来实现。\n\n5. 不允许重复声明\n* let和const不允许在同一作用域内重复声明同名变量,有利于避免一些细微的错误。\n* var则可以在同一作用域内重复声明同名变量而不会报错。\n\nES6中的let和const相比var提供了更加清晰和严格的变量管理机制,有助于编写更加健壮和可维护的JavaScript代码。这些改进使得JavaScript的变量声明和作用域行为更加符合开发者的预期,减少了一些常见的错误。","slug":"前端/ES6/001-let、const解决了什么问题？/index","published":1,"updated":"2024-08-09T05:47:23.525Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93p000ndgxrg4mk0vgx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天来聊一聊腾讯的一个面试题，let、const解决了什么问题？</p>\n<h2 id=\"let、const解决了什么问题？\"><a href=\"#let、const解决了什么问题？\" class=\"headerlink\" title=\"let、const解决了什么问题？\"></a>let、const解决了什么问题？</h2><p>我们来分析一下这个问题</p>\n<p>首先这个问题问我们let、const解决了什么问题？</p>\n<p>我们就需要去分别讲解一个let和const是干什么用的</p>\n<p>首先let和const是es6后面才有的东西，既然问到这个说明面试官的问题聚焦到了es6的范围</p>\n<p>既然如此我们就一定知道我们首先需要讲一下let和const是干什么的</p>\n<p>还要说明es6的let和const对比之前的var的优势在哪里</p>\n<h2 id=\"let关键字\"><a href=\"#let关键字\" class=\"headerlink\" title=\"let关键字\"></a>let关键字</h2><p>let是JavaScript中用于声明变量的关键字,它于2015年被ES6(ECMAScript 6)标准引入。与较早的var关键字相比,let有以下几个主要特点:</p>\n<ol>\n<li>块级作用域(Block Scope)</li>\n</ol>\n<p>使用let声明的变量具有块级作用域,即它们只在声明该变量的花括号{}内部可见和访问。这与使用var声明的变量具有函数作用域(Function Scope)的行为不同。</p>\n<ol start=\"2\">\n<li>暂时性死区(Temporal Dead Zone, TDZ)</li>\n</ol>\n<p>在变量声明之前使用let声明的变量会进入暂时性死区,此时访问该变量会抛出ReferenceError。这与使用var声明的变量在未初始化前默认值为undefined的行为不同。</p>\n<ol start=\"3\">\n<li>无变量提升(No Hoisting)</li>\n</ol>\n<p>let声明的变量不会像var一样被提升到作用域顶部,这意味着在声明之前无法访问let声明的变量。</p>\n<ol start=\"4\">\n<li>不允许重复声明</li>\n</ol>\n<p>在同一作用域内,使用let声明的变量不允许被重复声明,否则会抛出SyntaxError。而var则可以在同一作用域内重复声明同名变量而不会报错。</p>\n<p>let关键字提供了更加严格和直观的变量声明和作用域行为,有利于编写更加健壮和可维护的JavaScript代码。它的块级作用域、暂时性死区和无变量提升等特性,都有助于帮助开发者更好地管理变量的生命周期和作用域。</p>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>let关键字有的它都有，唯一的区别就是它被赋初值以后无法修改</p>\n<h2 id=\"let和const对比var，优势在哪里\"><a href=\"#let和const对比var，优势在哪里\" class=\"headerlink\" title=\"let和const对比var，优势在哪里\"></a>let和const对比var，优势在哪里</h2><p>ES6的使命是让JavaScript能够成为Java一样的企业级大型语言</p>\n<ol>\n<li>作用域管理更加清晰和直观</li>\n</ol>\n<ul>\n<li>var声明的变量具有函数作用域或全局作用域,这可能会导致意料之外的变量污染和泄露。</li>\n<li>let和const声明的变量具有块级作用域,限定在它们所在的花括号{}内部,使得变量的作用域更加明确和可控。</li>\n</ul>\n<ol start=\"2\">\n<li>避免变量提升问题</li>\n</ol>\n<ul>\n<li>var声明的变量会被提升到作用域顶部,这可能会导致意料之外的行为。</li>\n<li>let和const声明的变量不会被提升,必须在声明之后才能访问,避免了这种问题。</li>\n</ul>\n<ol start=\"3\">\n<li>引入暂时性死区(TDZ)</li>\n</ol>\n<ul>\n<li>let和const声明的变量在声明之前会进入暂时性死区,访问会抛出ReferenceError。这有助于避免一些隐藏的bug。</li>\n<li>var声明的变量在未初始化前默认值为undefined,可能会导致一些隐藏的错误。</li>\n</ul>\n<ol start=\"4\">\n<li>支持常量声明</li>\n</ol>\n<ul>\n<li>const关键字允许声明不可变的常量变量,有助于增强代码的可读性和稳定性。</li>\n<li>var无法直接声明常量,需要使用一些其他手段来实现。</li>\n</ul>\n<ol start=\"5\">\n<li>不允许重复声明</li>\n</ol>\n<ul>\n<li>let和const不允许在同一作用域内重复声明同名变量,有利于避免一些细微的错误。</li>\n<li>var则可以在同一作用域内重复声明同名变量而不会报错。</li>\n</ul>\n<p>ES6中的let和const相比var提供了更加清晰和严格的变量管理机制,有助于编写更加健壮和可维护的JavaScript代码。这些改进使得JavaScript的变量声明和作用域行为更加符合开发者的预期,减少了一些常见的错误。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天来聊一聊腾讯的一个面试题，let、const解决了什么问题？</p>\n<h2 id=\"let、const解决了什么问题？\"><a href=\"#let、const解决了什么问题？\" class=\"headerlink\" title=\"let、const解决了什么问题？\"></a>let、const解决了什么问题？</h2><p>我们来分析一下这个问题</p>\n<p>首先这个问题问我们let、const解决了什么问题？</p>\n<p>我们就需要去分别讲解一个let和const是干什么用的</p>\n<p>首先let和const是es6后面才有的东西，既然问到这个说明面试官的问题聚焦到了es6的范围</p>\n<p>既然如此我们就一定知道我们首先需要讲一下let和const是干什么的</p>\n<p>还要说明es6的let和const对比之前的var的优势在哪里</p>\n<h2 id=\"let关键字\"><a href=\"#let关键字\" class=\"headerlink\" title=\"let关键字\"></a>let关键字</h2><p>let是JavaScript中用于声明变量的关键字,它于2015年被ES6(ECMAScript 6)标准引入。与较早的var关键字相比,let有以下几个主要特点:</p>\n<ol>\n<li>块级作用域(Block Scope)</li>\n</ol>\n<p>使用let声明的变量具有块级作用域,即它们只在声明该变量的花括号{}内部可见和访问。这与使用var声明的变量具有函数作用域(Function Scope)的行为不同。</p>\n<ol start=\"2\">\n<li>暂时性死区(Temporal Dead Zone, TDZ)</li>\n</ol>\n<p>在变量声明之前使用let声明的变量会进入暂时性死区,此时访问该变量会抛出ReferenceError。这与使用var声明的变量在未初始化前默认值为undefined的行为不同。</p>\n<ol start=\"3\">\n<li>无变量提升(No Hoisting)</li>\n</ol>\n<p>let声明的变量不会像var一样被提升到作用域顶部,这意味着在声明之前无法访问let声明的变量。</p>\n<ol start=\"4\">\n<li>不允许重复声明</li>\n</ol>\n<p>在同一作用域内,使用let声明的变量不允许被重复声明,否则会抛出SyntaxError。而var则可以在同一作用域内重复声明同名变量而不会报错。</p>\n<p>let关键字提供了更加严格和直观的变量声明和作用域行为,有利于编写更加健壮和可维护的JavaScript代码。它的块级作用域、暂时性死区和无变量提升等特性,都有助于帮助开发者更好地管理变量的生命周期和作用域。</p>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>let关键字有的它都有，唯一的区别就是它被赋初值以后无法修改</p>\n<h2 id=\"let和const对比var，优势在哪里\"><a href=\"#let和const对比var，优势在哪里\" class=\"headerlink\" title=\"let和const对比var，优势在哪里\"></a>let和const对比var，优势在哪里</h2><p>ES6的使命是让JavaScript能够成为Java一样的企业级大型语言</p>\n<ol>\n<li>作用域管理更加清晰和直观</li>\n</ol>\n<ul>\n<li>var声明的变量具有函数作用域或全局作用域,这可能会导致意料之外的变量污染和泄露。</li>\n<li>let和const声明的变量具有块级作用域,限定在它们所在的花括号{}内部,使得变量的作用域更加明确和可控。</li>\n</ul>\n<ol start=\"2\">\n<li>避免变量提升问题</li>\n</ol>\n<ul>\n<li>var声明的变量会被提升到作用域顶部,这可能会导致意料之外的行为。</li>\n<li>let和const声明的变量不会被提升,必须在声明之后才能访问,避免了这种问题。</li>\n</ul>\n<ol start=\"3\">\n<li>引入暂时性死区(TDZ)</li>\n</ol>\n<ul>\n<li>let和const声明的变量在声明之前会进入暂时性死区,访问会抛出ReferenceError。这有助于避免一些隐藏的bug。</li>\n<li>var声明的变量在未初始化前默认值为undefined,可能会导致一些隐藏的错误。</li>\n</ul>\n<ol start=\"4\">\n<li>支持常量声明</li>\n</ol>\n<ul>\n<li>const关键字允许声明不可变的常量变量,有助于增强代码的可读性和稳定性。</li>\n<li>var无法直接声明常量,需要使用一些其他手段来实现。</li>\n</ul>\n<ol start=\"5\">\n<li>不允许重复声明</li>\n</ol>\n<ul>\n<li>let和const不允许在同一作用域内重复声明同名变量,有利于避免一些细微的错误。</li>\n<li>var则可以在同一作用域内重复声明同名变量而不会报错。</li>\n</ul>\n<p>ES6中的let和const相比var提供了更加清晰和严格的变量管理机制,有助于编写更加健壮和可维护的JavaScript代码。这些改进使得JavaScript的变量声明和作用域行为更加符合开发者的预期,减少了一些常见的错误。</p>\n"},{"title":"什么是HTTP? HTTP 和 HTTPS 的区别?","date":"2024-08-08T03:20:15.799Z","_content":"\n\n[参考](https://vue3js.cn/interview/http/HTTP_HTTPS.html)","source":"_posts/前端/HTML/002-什么是HTTP? HTTP 和 HTTPS 的区别?/index.md","raw":"---\ntitle: 什么是HTTP? HTTP 和 HTTPS 的区别?\ndate: {{ date }}\ncategories: \n- HTML\ntags: \n- 前端\n- http\n- https\n---\n\n\n[参考](https://vue3js.cn/interview/http/HTTP_HTTPS.html)","slug":"前端/HTML/002-什么是HTTP? HTTP 和 HTTPS 的区别?/index","published":1,"updated":"2024-08-08T03:32:35.215Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93q000sdgxr4jpefyoz","content":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/http/HTTP_HTTPS.html\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/http/HTTP_HTTPS.html\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"说说Cookie、Session和Token的区别？","date":"2024-08-08T03:10:05.127Z","_content":"\n[京东面试：说说Cookie、Session和Token的区别？](https://www.51cto.com/article/775430.html)\n\n\n## 1.Cookie、Session 和 Token 有什么区别？\n\nCookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者有很大的区别，简单来说 Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。\n\nToken 状态无关性解析：在传统的基于会话的认证方式中，服务器需要在后端保存用户的会话状态，通过 Session ID 进行会话的管理。而 Token 机制不需要在服务器上保存任何关于用户的状态信息，只需要在登录成功时，服务器端通过某种算法生成一个唯一的 Token 值，之后再将此 Token 发送给客户端存储（存储在 localStorage 或 sessionStorage 中），注意此时服务端是不存储这个 Token 值的，服务器端只进行效验而不保存此 Token，这就叫“状态无关性”。这样就可以减轻服务器存储和管理会话状态的负担，所以它比较适用于大型系统和分布式系统。\n\n具体来说，Cookie、Session 和 Token 的区别主要有以下几点区别：\n\n存储位置不同：Cookie 存储在客户端，即浏览器中的文本文件，通过在 HTTP 头中传递给服务器来进行通信；Session 是服务器端的存储方式，通常存储在服务器的内存或数据库中；Token 也是存储在客户端，但是通常以加密的方式存储在客户端的 localStorage 或 sessionStorage 中。\n数据安全性不同：Cookie 存储在客户端，可能会被窃取或篡改，因此对敏感信息的存储需要进行加密处理；Session 存储在服务器端，通过一个 Session ID 在客户端和服务器之间进行关联，可以避免敏感数据直接暴露；Token 通常使用加密算法生成，有效期较短且单向不可逆，可以提供较高的安全性。\n跨域支持不同：为了防止安全事故，因此 Cookie 是不支持跨域传输的，也就是不同域名下的 Cookie 是不能相互访问的；而 Session 机制通常是通过 Cookie 来保存 Session ID 的，因此 Session ID 默认情况下也是不支持跨域的；但 Token 可以轻松实现跨域，因为 Token 是存储在客户端的 localStorage 或者作为请求头的一部分发送到服务器的，所以不同的域名 Token 信息传输通常是不受影响的。\n状态管理不同：Cookie 是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息。\n\n## 2.Cookie 和 Session 有什么关系？\n\n准确来说 Cookie 的实现和 Session 是没有任何关系的，但 Session 的实现需要借助于 Cookie。\n\nSession 机制的实现流程如下：\n\n会话创建：通常情况下，当用户登录成功后，服务器会为该用户创建一个新的会话。在创建会话过程中，服务器会为该会话生成一个唯一的标识符，通常称为 Session ID。\nSession ID 传递：服务器将生成的 Session ID 通过响应的方式发送给客户端，使用 SetCookie 命令，将用户的 Session ID 保存在 Cookie 中，通常是一个名为 JSESSIONID 的 Cookie。\nSession 数据存储：在服务器端，Session 数据会被存储在一个能够关联 Session ID 的数据结构中（例如内存、数据库或者文件存储等）。常用的方式是将 Session ID 作为键，与对应的 Session 用户身份数据进行关联。\nSession ID 验证与检索：当用户发送一个新的请求时，客户端会将之前存储的 Session ID 携带在请求的 Cookie 或请求头中发送给服务器。服务器会根据 Session ID 找到对应的 Session 数据，从而获得用户的状态信息。\nSession 数据使用：服务器在获取到 Session 数据后，可以根据具体需求读取、修改或删除其中保存的状态信息。服务器可以通过 Session 来管理用户的登录状态、购物车内容、用户配置等。\nSession 过期与销毁：Session 有一个有效期限，一般通过设置一个固定的时间，或者在一定时间内没有用户活动时会将 Session 标记为过期。当 Session 过期时，服务器会销毁对应的 Session 数据，释放内存或其他资源。\n所以默认情况下，Session 是借助 Cookie 来完成身份标识的传递的，这样服务器端才能根据 Session ID 和保存的会话信息进行关联，用于找到某个具体登录的用户，所以说：默认情况下，Session 机制是依赖 Cookie 实现的。\n\n## 3.禁用 Cookie 之后 Session 还能用吗？\n\n通过上文我们知道，默认情况下 Session 机制是依赖 Cookie 实现的，那么是不是禁用了 Cookie 之后，Session 机制也就无法使用了呢？其实不然。\n\n除了默认情况下，我们可以使用 Cookie 来传递 Session ID 之外，我们可以通过一些特殊的手段来自行传递 Session ID，以此来摆脱禁用 Cookie 之后 Session 无法使用的情况，例如以下两种实现手段：\n\nURL Rewriting：可以在每个请求的 URL 中附加 Session ID 参数。服务器在接收到请求时，解析 URL 中的 Session ID，并与对应的 Session 数据进行关联。这种方式适用于没有禁用地址栏中的参数传递的情况。\n隐藏表单字段：可以将 Session ID 作为隐藏表单字段的方式传递给服务器。当用户提交表单时，Session ID 将随着表单数据一起发送给服务器，服务器据此建立与当前会话的关联。\n通过以上手段都可以将 Session ID 传递到服务器端（虽然麻烦点），然后在服务器端，我们再对以上传递的 Session ID 进行获取和映射，这样就手动完成了传递和匹配登录用户的工作了，Session 机制也得已继续使用了。\n\n## 小结\n\nCookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者的区别很大：Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。默认情况下 Session 使用了 Cookie 机制来传递 Session ID，但在禁用 Cookie 的情况下，使用特殊的手段依然可以传递 Session ID，依然可以继续使用 Session 机制。而 Token 是不在服务器端保存会话信息的，因此更适用于大型项目和分布式项目。\n","source":"_posts/前端/HTML/001-说说Cookie、Session和Token的区别？/index.md","raw":"---\ntitle: 说说Cookie、Session和Token的区别？\ndate: {{ date }}\ncategories: \n- HTML\ntags: \n- 前端\n- cookie\n- session\n- token\n---\n\n[京东面试：说说Cookie、Session和Token的区别？](https://www.51cto.com/article/775430.html)\n\n\n## 1.Cookie、Session 和 Token 有什么区别？\n\nCookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者有很大的区别，简单来说 Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。\n\nToken 状态无关性解析：在传统的基于会话的认证方式中，服务器需要在后端保存用户的会话状态，通过 Session ID 进行会话的管理。而 Token 机制不需要在服务器上保存任何关于用户的状态信息，只需要在登录成功时，服务器端通过某种算法生成一个唯一的 Token 值，之后再将此 Token 发送给客户端存储（存储在 localStorage 或 sessionStorage 中），注意此时服务端是不存储这个 Token 值的，服务器端只进行效验而不保存此 Token，这就叫“状态无关性”。这样就可以减轻服务器存储和管理会话状态的负担，所以它比较适用于大型系统和分布式系统。\n\n具体来说，Cookie、Session 和 Token 的区别主要有以下几点区别：\n\n存储位置不同：Cookie 存储在客户端，即浏览器中的文本文件，通过在 HTTP 头中传递给服务器来进行通信；Session 是服务器端的存储方式，通常存储在服务器的内存或数据库中；Token 也是存储在客户端，但是通常以加密的方式存储在客户端的 localStorage 或 sessionStorage 中。\n数据安全性不同：Cookie 存储在客户端，可能会被窃取或篡改，因此对敏感信息的存储需要进行加密处理；Session 存储在服务器端，通过一个 Session ID 在客户端和服务器之间进行关联，可以避免敏感数据直接暴露；Token 通常使用加密算法生成，有效期较短且单向不可逆，可以提供较高的安全性。\n跨域支持不同：为了防止安全事故，因此 Cookie 是不支持跨域传输的，也就是不同域名下的 Cookie 是不能相互访问的；而 Session 机制通常是通过 Cookie 来保存 Session ID 的，因此 Session ID 默认情况下也是不支持跨域的；但 Token 可以轻松实现跨域，因为 Token 是存储在客户端的 localStorage 或者作为请求头的一部分发送到服务器的，所以不同的域名 Token 信息传输通常是不受影响的。\n状态管理不同：Cookie 是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息。\n\n## 2.Cookie 和 Session 有什么关系？\n\n准确来说 Cookie 的实现和 Session 是没有任何关系的，但 Session 的实现需要借助于 Cookie。\n\nSession 机制的实现流程如下：\n\n会话创建：通常情况下，当用户登录成功后，服务器会为该用户创建一个新的会话。在创建会话过程中，服务器会为该会话生成一个唯一的标识符，通常称为 Session ID。\nSession ID 传递：服务器将生成的 Session ID 通过响应的方式发送给客户端，使用 SetCookie 命令，将用户的 Session ID 保存在 Cookie 中，通常是一个名为 JSESSIONID 的 Cookie。\nSession 数据存储：在服务器端，Session 数据会被存储在一个能够关联 Session ID 的数据结构中（例如内存、数据库或者文件存储等）。常用的方式是将 Session ID 作为键，与对应的 Session 用户身份数据进行关联。\nSession ID 验证与检索：当用户发送一个新的请求时，客户端会将之前存储的 Session ID 携带在请求的 Cookie 或请求头中发送给服务器。服务器会根据 Session ID 找到对应的 Session 数据，从而获得用户的状态信息。\nSession 数据使用：服务器在获取到 Session 数据后，可以根据具体需求读取、修改或删除其中保存的状态信息。服务器可以通过 Session 来管理用户的登录状态、购物车内容、用户配置等。\nSession 过期与销毁：Session 有一个有效期限，一般通过设置一个固定的时间，或者在一定时间内没有用户活动时会将 Session 标记为过期。当 Session 过期时，服务器会销毁对应的 Session 数据，释放内存或其他资源。\n所以默认情况下，Session 是借助 Cookie 来完成身份标识的传递的，这样服务器端才能根据 Session ID 和保存的会话信息进行关联，用于找到某个具体登录的用户，所以说：默认情况下，Session 机制是依赖 Cookie 实现的。\n\n## 3.禁用 Cookie 之后 Session 还能用吗？\n\n通过上文我们知道，默认情况下 Session 机制是依赖 Cookie 实现的，那么是不是禁用了 Cookie 之后，Session 机制也就无法使用了呢？其实不然。\n\n除了默认情况下，我们可以使用 Cookie 来传递 Session ID 之外，我们可以通过一些特殊的手段来自行传递 Session ID，以此来摆脱禁用 Cookie 之后 Session 无法使用的情况，例如以下两种实现手段：\n\nURL Rewriting：可以在每个请求的 URL 中附加 Session ID 参数。服务器在接收到请求时，解析 URL 中的 Session ID，并与对应的 Session 数据进行关联。这种方式适用于没有禁用地址栏中的参数传递的情况。\n隐藏表单字段：可以将 Session ID 作为隐藏表单字段的方式传递给服务器。当用户提交表单时，Session ID 将随着表单数据一起发送给服务器，服务器据此建立与当前会话的关联。\n通过以上手段都可以将 Session ID 传递到服务器端（虽然麻烦点），然后在服务器端，我们再对以上传递的 Session ID 进行获取和映射，这样就手动完成了传递和匹配登录用户的工作了，Session 机制也得已继续使用了。\n\n## 小结\n\nCookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者的区别很大：Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。默认情况下 Session 使用了 Cookie 机制来传递 Session ID，但在禁用 Cookie 的情况下，使用特殊的手段依然可以传递 Session ID，依然可以继续使用 Session 机制。而 Token 是不在服务器端保存会话信息的，因此更适用于大型项目和分布式项目。\n","slug":"前端/HTML/001-说说Cookie、Session和Token的区别？/index","published":1,"updated":"2024-08-08T03:32:31.407Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93r000vdgxr1zpd92qc","content":"<p><a class=\"link\"   href=\"https://www.51cto.com/article/775430.html\" >京东面试：说说Cookie、Session和Token的区别？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"1-Cookie、Session-和-Token-有什么区别？\"><a href=\"#1-Cookie、Session-和-Token-有什么区别？\" class=\"headerlink\" title=\"1.Cookie、Session 和 Token 有什么区别？\"></a>1.Cookie、Session 和 Token 有什么区别？</h2><p>Cookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者有很大的区别，简单来说 Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。</p>\n<p>Token 状态无关性解析：在传统的基于会话的认证方式中，服务器需要在后端保存用户的会话状态，通过 Session ID 进行会话的管理。而 Token 机制不需要在服务器上保存任何关于用户的状态信息，只需要在登录成功时，服务器端通过某种算法生成一个唯一的 Token 值，之后再将此 Token 发送给客户端存储（存储在 localStorage 或 sessionStorage 中），注意此时服务端是不存储这个 Token 值的，服务器端只进行效验而不保存此 Token，这就叫“状态无关性”。这样就可以减轻服务器存储和管理会话状态的负担，所以它比较适用于大型系统和分布式系统。</p>\n<p>具体来说，Cookie、Session 和 Token 的区别主要有以下几点区别：</p>\n<p>存储位置不同：Cookie 存储在客户端，即浏览器中的文本文件，通过在 HTTP 头中传递给服务器来进行通信；Session 是服务器端的存储方式，通常存储在服务器的内存或数据库中；Token 也是存储在客户端，但是通常以加密的方式存储在客户端的 localStorage 或 sessionStorage 中。<br>数据安全性不同：Cookie 存储在客户端，可能会被窃取或篡改，因此对敏感信息的存储需要进行加密处理；Session 存储在服务器端，通过一个 Session ID 在客户端和服务器之间进行关联，可以避免敏感数据直接暴露；Token 通常使用加密算法生成，有效期较短且单向不可逆，可以提供较高的安全性。<br>跨域支持不同：为了防止安全事故，因此 Cookie 是不支持跨域传输的，也就是不同域名下的 Cookie 是不能相互访问的；而 Session 机制通常是通过 Cookie 来保存 Session ID 的，因此 Session ID 默认情况下也是不支持跨域的；但 Token 可以轻松实现跨域，因为 Token 是存储在客户端的 localStorage 或者作为请求头的一部分发送到服务器的，所以不同的域名 Token 信息传输通常是不受影响的。<br>状态管理不同：Cookie 是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息。</p>\n<h2 id=\"2-Cookie-和-Session-有什么关系？\"><a href=\"#2-Cookie-和-Session-有什么关系？\" class=\"headerlink\" title=\"2.Cookie 和 Session 有什么关系？\"></a>2.Cookie 和 Session 有什么关系？</h2><p>准确来说 Cookie 的实现和 Session 是没有任何关系的，但 Session 的实现需要借助于 Cookie。</p>\n<p>Session 机制的实现流程如下：</p>\n<p>会话创建：通常情况下，当用户登录成功后，服务器会为该用户创建一个新的会话。在创建会话过程中，服务器会为该会话生成一个唯一的标识符，通常称为 Session ID。<br>Session ID 传递：服务器将生成的 Session ID 通过响应的方式发送给客户端，使用 SetCookie 命令，将用户的 Session ID 保存在 Cookie 中，通常是一个名为 JSESSIONID 的 Cookie。<br>Session 数据存储：在服务器端，Session 数据会被存储在一个能够关联 Session ID 的数据结构中（例如内存、数据库或者文件存储等）。常用的方式是将 Session ID 作为键，与对应的 Session 用户身份数据进行关联。<br>Session ID 验证与检索：当用户发送一个新的请求时，客户端会将之前存储的 Session ID 携带在请求的 Cookie 或请求头中发送给服务器。服务器会根据 Session ID 找到对应的 Session 数据，从而获得用户的状态信息。<br>Session 数据使用：服务器在获取到 Session 数据后，可以根据具体需求读取、修改或删除其中保存的状态信息。服务器可以通过 Session 来管理用户的登录状态、购物车内容、用户配置等。<br>Session 过期与销毁：Session 有一个有效期限，一般通过设置一个固定的时间，或者在一定时间内没有用户活动时会将 Session 标记为过期。当 Session 过期时，服务器会销毁对应的 Session 数据，释放内存或其他资源。<br>所以默认情况下，Session 是借助 Cookie 来完成身份标识的传递的，这样服务器端才能根据 Session ID 和保存的会话信息进行关联，用于找到某个具体登录的用户，所以说：默认情况下，Session 机制是依赖 Cookie 实现的。</p>\n<h2 id=\"3-禁用-Cookie-之后-Session-还能用吗？\"><a href=\"#3-禁用-Cookie-之后-Session-还能用吗？\" class=\"headerlink\" title=\"3.禁用 Cookie 之后 Session 还能用吗？\"></a>3.禁用 Cookie 之后 Session 还能用吗？</h2><p>通过上文我们知道，默认情况下 Session 机制是依赖 Cookie 实现的，那么是不是禁用了 Cookie 之后，Session 机制也就无法使用了呢？其实不然。</p>\n<p>除了默认情况下，我们可以使用 Cookie 来传递 Session ID 之外，我们可以通过一些特殊的手段来自行传递 Session ID，以此来摆脱禁用 Cookie 之后 Session 无法使用的情况，例如以下两种实现手段：</p>\n<p>URL Rewriting：可以在每个请求的 URL 中附加 Session ID 参数。服务器在接收到请求时，解析 URL 中的 Session ID，并与对应的 Session 数据进行关联。这种方式适用于没有禁用地址栏中的参数传递的情况。<br>隐藏表单字段：可以将 Session ID 作为隐藏表单字段的方式传递给服务器。当用户提交表单时，Session ID 将随着表单数据一起发送给服务器，服务器据此建立与当前会话的关联。<br>通过以上手段都可以将 Session ID 传递到服务器端（虽然麻烦点），然后在服务器端，我们再对以上传递的 Session ID 进行获取和映射，这样就手动完成了传递和匹配登录用户的工作了，Session 机制也得已继续使用了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Cookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者的区别很大：Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。默认情况下 Session 使用了 Cookie 机制来传递 Session ID，但在禁用 Cookie 的情况下，使用特殊的手段依然可以传递 Session ID，依然可以继续使用 Session 机制。而 Token 是不在服务器端保存会话信息的，因此更适用于大型项目和分布式项目。</p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://www.51cto.com/article/775430.html\" >京东面试：说说Cookie、Session和Token的区别？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"1-Cookie、Session-和-Token-有什么区别？\"><a href=\"#1-Cookie、Session-和-Token-有什么区别？\" class=\"headerlink\" title=\"1.Cookie、Session 和 Token 有什么区别？\"></a>1.Cookie、Session 和 Token 有什么区别？</h2><p>Cookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者有很大的区别，简单来说 Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。</p>\n<p>Token 状态无关性解析：在传统的基于会话的认证方式中，服务器需要在后端保存用户的会话状态，通过 Session ID 进行会话的管理。而 Token 机制不需要在服务器上保存任何关于用户的状态信息，只需要在登录成功时，服务器端通过某种算法生成一个唯一的 Token 值，之后再将此 Token 发送给客户端存储（存储在 localStorage 或 sessionStorage 中），注意此时服务端是不存储这个 Token 值的，服务器端只进行效验而不保存此 Token，这就叫“状态无关性”。这样就可以减轻服务器存储和管理会话状态的负担，所以它比较适用于大型系统和分布式系统。</p>\n<p>具体来说，Cookie、Session 和 Token 的区别主要有以下几点区别：</p>\n<p>存储位置不同：Cookie 存储在客户端，即浏览器中的文本文件，通过在 HTTP 头中传递给服务器来进行通信；Session 是服务器端的存储方式，通常存储在服务器的内存或数据库中；Token 也是存储在客户端，但是通常以加密的方式存储在客户端的 localStorage 或 sessionStorage 中。<br>数据安全性不同：Cookie 存储在客户端，可能会被窃取或篡改，因此对敏感信息的存储需要进行加密处理；Session 存储在服务器端，通过一个 Session ID 在客户端和服务器之间进行关联，可以避免敏感数据直接暴露；Token 通常使用加密算法生成，有效期较短且单向不可逆，可以提供较高的安全性。<br>跨域支持不同：为了防止安全事故，因此 Cookie 是不支持跨域传输的，也就是不同域名下的 Cookie 是不能相互访问的；而 Session 机制通常是通过 Cookie 来保存 Session ID 的，因此 Session ID 默认情况下也是不支持跨域的；但 Token 可以轻松实现跨域，因为 Token 是存储在客户端的 localStorage 或者作为请求头的一部分发送到服务器的，所以不同的域名 Token 信息传输通常是不受影响的。<br>状态管理不同：Cookie 是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息。</p>\n<h2 id=\"2-Cookie-和-Session-有什么关系？\"><a href=\"#2-Cookie-和-Session-有什么关系？\" class=\"headerlink\" title=\"2.Cookie 和 Session 有什么关系？\"></a>2.Cookie 和 Session 有什么关系？</h2><p>准确来说 Cookie 的实现和 Session 是没有任何关系的，但 Session 的实现需要借助于 Cookie。</p>\n<p>Session 机制的实现流程如下：</p>\n<p>会话创建：通常情况下，当用户登录成功后，服务器会为该用户创建一个新的会话。在创建会话过程中，服务器会为该会话生成一个唯一的标识符，通常称为 Session ID。<br>Session ID 传递：服务器将生成的 Session ID 通过响应的方式发送给客户端，使用 SetCookie 命令，将用户的 Session ID 保存在 Cookie 中，通常是一个名为 JSESSIONID 的 Cookie。<br>Session 数据存储：在服务器端，Session 数据会被存储在一个能够关联 Session ID 的数据结构中（例如内存、数据库或者文件存储等）。常用的方式是将 Session ID 作为键，与对应的 Session 用户身份数据进行关联。<br>Session ID 验证与检索：当用户发送一个新的请求时，客户端会将之前存储的 Session ID 携带在请求的 Cookie 或请求头中发送给服务器。服务器会根据 Session ID 找到对应的 Session 数据，从而获得用户的状态信息。<br>Session 数据使用：服务器在获取到 Session 数据后，可以根据具体需求读取、修改或删除其中保存的状态信息。服务器可以通过 Session 来管理用户的登录状态、购物车内容、用户配置等。<br>Session 过期与销毁：Session 有一个有效期限，一般通过设置一个固定的时间，或者在一定时间内没有用户活动时会将 Session 标记为过期。当 Session 过期时，服务器会销毁对应的 Session 数据，释放内存或其他资源。<br>所以默认情况下，Session 是借助 Cookie 来完成身份标识的传递的，这样服务器端才能根据 Session ID 和保存的会话信息进行关联，用于找到某个具体登录的用户，所以说：默认情况下，Session 机制是依赖 Cookie 实现的。</p>\n<h2 id=\"3-禁用-Cookie-之后-Session-还能用吗？\"><a href=\"#3-禁用-Cookie-之后-Session-还能用吗？\" class=\"headerlink\" title=\"3.禁用 Cookie 之后 Session 还能用吗？\"></a>3.禁用 Cookie 之后 Session 还能用吗？</h2><p>通过上文我们知道，默认情况下 Session 机制是依赖 Cookie 实现的，那么是不是禁用了 Cookie 之后，Session 机制也就无法使用了呢？其实不然。</p>\n<p>除了默认情况下，我们可以使用 Cookie 来传递 Session ID 之外，我们可以通过一些特殊的手段来自行传递 Session ID，以此来摆脱禁用 Cookie 之后 Session 无法使用的情况，例如以下两种实现手段：</p>\n<p>URL Rewriting：可以在每个请求的 URL 中附加 Session ID 参数。服务器在接收到请求时，解析 URL 中的 Session ID，并与对应的 Session 数据进行关联。这种方式适用于没有禁用地址栏中的参数传递的情况。<br>隐藏表单字段：可以将 Session ID 作为隐藏表单字段的方式传递给服务器。当用户提交表单时，Session ID 将随着表单数据一起发送给服务器，服务器据此建立与当前会话的关联。<br>通过以上手段都可以将 Session ID 传递到服务器端（虽然麻烦点），然后在服务器端，我们再对以上传递的 Session ID 进行获取和映射，这样就手动完成了传递和匹配登录用户的工作了，Session 机制也得已继续使用了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Cookie、Session 和 Token 通常都是用来保存用户登录信息的技术，但三者的区别很大：Cookie 适用于简单的状态管理，Session 适用于需要保护用户敏感信息的场景，而 Token 适用于状态无关的身份验证和授权。默认情况下 Session 使用了 Cookie 机制来传递 Session ID，但在禁用 Cookie 的情况下，使用特殊的手段依然可以传递 Session ID，依然可以继续使用 Session 机制。而 Token 是不在服务器端保存会话信息的，因此更适用于大型项目和分布式项目。</p>\n"},{"title":"Vue中v-show和v-if有什么区别？使用场景分别是什么？","date":"2024-08-08T03:15:59.765Z","_content":"\n[参考](https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9)","source":"_posts/前端/Vue/001-v-show和v-if有什么区别？使用场景分别是什么？/index.md","raw":"---\ntitle: Vue中v-show和v-if有什么区别？使用场景分别是什么？\ndate: {{ date }}\ncategories: \n- Vue\ntags:\n- 前端 \n- Vue\n- v-show\n- v-if\n---\n\n[参考](https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9)","slug":"前端/Vue/001-v-show和v-if有什么区别？使用场景分别是什么？/index","published":1,"updated":"2024-08-08T03:32:20.505Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93s0010dgxr16h11sk6","content":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"Vue组件之间的通信方式都有哪些？","date":"2024-08-08T03:24:17.088Z","_content":"\n\n[参考](https://vue3js.cn/interview/vue/communication.html)","source":"_posts/前端/Vue/002-Vue组件之间的通信方式都有哪些？/index.md","raw":"---\ntitle: Vue组件之间的通信方式都有哪些？\ndate: {{ date }}\ncategories: \n- Vue\ntags:\n- 前端 \n- Vue\n---\n\n\n[参考](https://vue3js.cn/interview/vue/communication.html)","slug":"前端/Vue/002-Vue组件之间的通信方式都有哪些？/index","published":1,"updated":"2024-08-08T03:32:23.909Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93t0013dgxr08jr27qf","content":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/vue/communication.html\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://vue3js.cn/interview/vue/communication.html\" >参考 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"Swift面试题导航链接","date":"2024-08-07T08:54:37.441Z","thumbnail":"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538696.jpeg","_content":"\n啊啊啊啊啊啊啊","source":"_posts/iOS/Swift/001-目录/README.md","raw":"---\ntitle: Swift面试题导航链接\ndate: {{ date }}\ncategories: \n- Swift\ntags: [iOS, 面试题, Swift]\nthumbnail: \"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538696.jpeg\"\n---\n\n啊啊啊啊啊啊啊","slug":"iOS/Swift/001-目录/README","published":1,"updated":"2024-08-07T08:58:55.671Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93u0017dgxrh3pv95nm","content":"<p>啊啊啊啊啊啊啊</p>\n","excerpt":"","more":"<p>啊啊啊啊啊啊啊</p>\n"},{"title":"Swift与OC的区别","date":"2024-08-07T08:55:05.085Z","_content":"\n吃吃吃吃吃吃","source":"_posts/iOS/Swift/002-Swift与OC的区别/README.md","raw":"---\ntitle: Swift与OC的区别\ndate: {{ date }}\ncategories: \n- Swift\ntags: [iOS, 面试题, Swift]\n---\n\n吃吃吃吃吃吃","slug":"iOS/Swift/002-Swift与OC的区别/README","published":1,"updated":"2024-08-07T08:58:48.573Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93v0019dgxr6dgxg7xr","content":"<p>吃吃吃吃吃吃</p>\n","excerpt":"","more":"<p>吃吃吃吃吃吃</p>\n"},{"title":"面试题导航链接","date":"2024-07-30T02:21:26.931Z","thumbnail":"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538696.jpeg","_content":"\n① [BAT等各个大厂iOS面试真题+答案大全](https://github.com/iOS-Mayday/heji)\n\n② [iOS中高级开发必看的热门书籍（经典必看）](https://github.com/iOS-Mayday/iOSAdvanced-Roadmap)\n\n<!-- more -->\n\n③　[iOS开发高级面试\"简历制作\"指导](https://github.com/iOS-Mayday/Interview-questions-iOS)\n\n④　[iOS面试流程到基础知识大全](https://github.com/iOS-Mayday/iOS-Interview-Strategy)\n\n⑤ [2016年3月 iOS 面试总结](https://halfrost.com/ios_interview/)\n\n[2022年，iOS开发面试问题汇总（底层基础）](https://www.jianshu.com/p/583d7b006815)","source":"_posts/iOS/OC/000-面试题导航链接/README.md","raw":"---\ntitle: 面试题导航链接\ndate: {{ date }}\ncategories: \n- 移动端iOS\ntags: [iOS, 面试题]\nthumbnail: \"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538696.jpeg\"\n---\n\n① [BAT等各个大厂iOS面试真题+答案大全](https://github.com/iOS-Mayday/heji)\n\n② [iOS中高级开发必看的热门书籍（经典必看）](https://github.com/iOS-Mayday/iOSAdvanced-Roadmap)\n\n<!-- more -->\n\n③　[iOS开发高级面试\"简历制作\"指导](https://github.com/iOS-Mayday/Interview-questions-iOS)\n\n④　[iOS面试流程到基础知识大全](https://github.com/iOS-Mayday/iOS-Interview-Strategy)\n\n⑤ [2016年3月 iOS 面试总结](https://halfrost.com/ios_interview/)\n\n[2022年，iOS开发面试问题汇总（底层基础）](https://www.jianshu.com/p/583d7b006815)","slug":"iOS/OC/000-面试题导航链接/README","published":1,"updated":"2024-08-07T08:59:26.661Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93w001edgxr5o0baa4g","content":"<p>① <a class=\"link\"   href=\"https://github.com/iOS-Mayday/heji\" >BAT等各个大厂iOS面试真题+答案大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>② <a class=\"link\"   href=\"https://github.com/iOS-Mayday/iOSAdvanced-Roadmap\" >iOS中高级开发必看的热门书籍（经典必看） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<span id=\"more\"></span>\n\n<p>③　<a class=\"link\"   href=\"https://github.com/iOS-Mayday/Interview-questions-iOS\" >iOS开发高级面试”简历制作”指导 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>④　<a class=\"link\"   href=\"https://github.com/iOS-Mayday/iOS-Interview-Strategy\" >iOS面试流程到基础知识大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>⑤ <a class=\"link\"   href=\"https://halfrost.com/ios_interview/\" >2016年3月 iOS 面试总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/583d7b006815\" >2022年，iOS开发面试问题汇总（底层基础） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"<p>① <a class=\"link\"   href=\"https://github.com/iOS-Mayday/heji\" >BAT等各个大厂iOS面试真题+答案大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>② <a class=\"link\"   href=\"https://github.com/iOS-Mayday/iOSAdvanced-Roadmap\" >iOS中高级开发必看的热门书籍（经典必看） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>","more":"<p>③　<a class=\"link\"   href=\"https://github.com/iOS-Mayday/Interview-questions-iOS\" >iOS开发高级面试”简历制作”指导 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>④　<a class=\"link\"   href=\"https://github.com/iOS-Mayday/iOS-Interview-Strategy\" >iOS面试流程到基础知识大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>⑤ <a class=\"link\"   href=\"https://halfrost.com/ios_interview/\" >2016年3月 iOS 面试总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/583d7b006815\" >2022年，iOS开发面试问题汇总（底层基础） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>"},{"title":"APNS推送","date":"2024-08-06T08:20:48.106Z","_content":"\n苹果推送通知服务 (Apple Push Notification Service，APNS) 是苹果公司提供的推送通知平台，用于将通知从第三方应用服务器发送到 iOS 设备。APNS 是 iOS 应用开发中非常重要的一部分，因为它允许应用在不运行的情况下仍能接收信息和更新。\n\n<!-- more -->\n\n## 一、之前的总结\n[我的简书-iOS的推送服务APNs详解](https://www.jianshu.com/p/a1c68ca79dbf)\n\n## 二、推送通知的类型\n\n推送通知分为本地推送与远程推送\n\n本地推送最大推送数量是64个，超过这个数量会被忽略\n\n本地推送：不需要联网也可以推送，是开发人员在APP内设定特定的时间来提醒用户干什么\n\n本地通知与远程通知都可以向不在前台运行的应用发送消息，这种消息既可能是即将发生的事件，也可能是服务器的新数据，不管是本地还是远程通知，他们在界面上的显示效果是相同的。\n\n二者的区别是本地推送是由本应用负责调用，只能从当前设备上的iOS发出。而远程推送是由服务器来控制。\n\n## 三、推送通知的流程\n\n1. 应用程序注册消息推送。\n\n2. iOS从APNS Server获取device token，应用程序接收device token。 \n\n3. 应用程序将device token发送给PUSH服务端程序。\n\n4. 服务端程序向APNS服务发送消息。\n\n5. APNS服务将消息发送给iPhone应用程序\n\n![](003.webp)\n\n### 1. 推送前\n\n1. Device连接APNs服务器并携带设备序列号 \n\n2. 连接成功，APNs经过打包和处理产生device_token并返回给注册的Device \n\n3. Device携带获取的device_token向我们自己的应用服务器注册 \n\n4. 完成需要推送的Device在APNs服务器和我们自己的应用服务器注册 \n\n![](001.webp)\n\n### 2. 推送中\n\n1. 首先，安装了具有推送功能的应用，我们的设备在有网络的情况下会连接苹果推送服务器，连接过程中，APNS会验证device_token，连接成功后维持一个长连接； \n\n2. Provider(我们自己的服务器)收到需要被推送的消息并结合被推送设备的device_token一起打包发送给APNS服务器； \n\n3. APNS服务器将推送信息推送给指定device_token的设备； \n\n4. 设备收到推送消息后通知我们的应用程序并显示和提示用户（声音、弹出框） \n\n![](002.webp)\n\n\n\n\n\n\n","source":"_posts/iOS/OC/021-APNS/README.md","raw":"---\ntitle: APNS推送\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- APNS\n- 推送\n---\n\n苹果推送通知服务 (Apple Push Notification Service，APNS) 是苹果公司提供的推送通知平台，用于将通知从第三方应用服务器发送到 iOS 设备。APNS 是 iOS 应用开发中非常重要的一部分，因为它允许应用在不运行的情况下仍能接收信息和更新。\n\n<!-- more -->\n\n## 一、之前的总结\n[我的简书-iOS的推送服务APNs详解](https://www.jianshu.com/p/a1c68ca79dbf)\n\n## 二、推送通知的类型\n\n推送通知分为本地推送与远程推送\n\n本地推送最大推送数量是64个，超过这个数量会被忽略\n\n本地推送：不需要联网也可以推送，是开发人员在APP内设定特定的时间来提醒用户干什么\n\n本地通知与远程通知都可以向不在前台运行的应用发送消息，这种消息既可能是即将发生的事件，也可能是服务器的新数据，不管是本地还是远程通知，他们在界面上的显示效果是相同的。\n\n二者的区别是本地推送是由本应用负责调用，只能从当前设备上的iOS发出。而远程推送是由服务器来控制。\n\n## 三、推送通知的流程\n\n1. 应用程序注册消息推送。\n\n2. iOS从APNS Server获取device token，应用程序接收device token。 \n\n3. 应用程序将device token发送给PUSH服务端程序。\n\n4. 服务端程序向APNS服务发送消息。\n\n5. APNS服务将消息发送给iPhone应用程序\n\n![](003.webp)\n\n### 1. 推送前\n\n1. Device连接APNs服务器并携带设备序列号 \n\n2. 连接成功，APNs经过打包和处理产生device_token并返回给注册的Device \n\n3. Device携带获取的device_token向我们自己的应用服务器注册 \n\n4. 完成需要推送的Device在APNs服务器和我们自己的应用服务器注册 \n\n![](001.webp)\n\n### 2. 推送中\n\n1. 首先，安装了具有推送功能的应用，我们的设备在有网络的情况下会连接苹果推送服务器，连接过程中，APNS会验证device_token，连接成功后维持一个长连接； \n\n2. Provider(我们自己的服务器)收到需要被推送的消息并结合被推送设备的device_token一起打包发送给APNS服务器； \n\n3. APNS服务器将推送信息推送给指定device_token的设备； \n\n4. 设备收到推送消息后通知我们的应用程序并显示和提示用户（声音、弹出框） \n\n![](002.webp)\n\n\n\n\n\n\n","slug":"iOS/OC/021-APNS/README","published":1,"updated":"2024-08-07T08:42:24.036Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93w001fdgxrdrtu3tw7","content":"<p>苹果推送通知服务 (Apple Push Notification Service，APNS) 是苹果公司提供的推送通知平台，用于将通知从第三方应用服务器发送到 iOS 设备。APNS 是 iOS 应用开发中非常重要的一部分，因为它允许应用在不运行的情况下仍能接收信息和更新。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、之前的总结\"><a href=\"#一、之前的总结\" class=\"headerlink\" title=\"一、之前的总结\"></a>一、之前的总结</h2><p><a class=\"link\"   href=\"https://www.jianshu.com/p/a1c68ca79dbf\" >我的简书-iOS的推送服务APNs详解 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"二、推送通知的类型\"><a href=\"#二、推送通知的类型\" class=\"headerlink\" title=\"二、推送通知的类型\"></a>二、推送通知的类型</h2><p>推送通知分为本地推送与远程推送</p>\n<p>本地推送最大推送数量是64个，超过这个数量会被忽略</p>\n<p>本地推送：不需要联网也可以推送，是开发人员在APP内设定特定的时间来提醒用户干什么</p>\n<p>本地通知与远程通知都可以向不在前台运行的应用发送消息，这种消息既可能是即将发生的事件，也可能是服务器的新数据，不管是本地还是远程通知，他们在界面上的显示效果是相同的。</p>\n<p>二者的区别是本地推送是由本应用负责调用，只能从当前设备上的iOS发出。而远程推送是由服务器来控制。</p>\n<h2 id=\"三、推送通知的流程\"><a href=\"#三、推送通知的流程\" class=\"headerlink\" title=\"三、推送通知的流程\"></a>三、推送通知的流程</h2><ol>\n<li><p>应用程序注册消息推送。</p>\n</li>\n<li><p>iOS从APNS Server获取device token，应用程序接收device token。 </p>\n</li>\n<li><p>应用程序将device token发送给PUSH服务端程序。</p>\n</li>\n<li><p>服务端程序向APNS服务发送消息。</p>\n</li>\n<li><p>APNS服务将消息发送给iPhone应用程序</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/003.webp\"\n                     \n                ></p>\n<h3 id=\"1-推送前\"><a href=\"#1-推送前\" class=\"headerlink\" title=\"1. 推送前\"></a>1. 推送前</h3><ol>\n<li><p>Device连接APNs服务器并携带设备序列号 </p>\n</li>\n<li><p>连接成功，APNs经过打包和处理产生device_token并返回给注册的Device </p>\n</li>\n<li><p>Device携带获取的device_token向我们自己的应用服务器注册 </p>\n</li>\n<li><p>完成需要推送的Device在APNs服务器和我们自己的应用服务器注册</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/001.webp\"\n                     \n                ></p>\n<h3 id=\"2-推送中\"><a href=\"#2-推送中\" class=\"headerlink\" title=\"2. 推送中\"></a>2. 推送中</h3><ol>\n<li><p>首先，安装了具有推送功能的应用，我们的设备在有网络的情况下会连接苹果推送服务器，连接过程中，APNS会验证device_token，连接成功后维持一个长连接； </p>\n</li>\n<li><p>Provider(我们自己的服务器)收到需要被推送的消息并结合被推送设备的device_token一起打包发送给APNS服务器； </p>\n</li>\n<li><p>APNS服务器将推送信息推送给指定device_token的设备； </p>\n</li>\n<li><p>设备收到推送消息后通知我们的应用程序并显示和提示用户（声音、弹出框）</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/002.webp\"\n                     \n                ></p>\n","excerpt":"<p>苹果推送通知服务 (Apple Push Notification Service，APNS) 是苹果公司提供的推送通知平台，用于将通知从第三方应用服务器发送到 iOS 设备。APNS 是 iOS 应用开发中非常重要的一部分，因为它允许应用在不运行的情况下仍能接收信息和更新。</p>","more":"<h2 id=\"一、之前的总结\"><a href=\"#一、之前的总结\" class=\"headerlink\" title=\"一、之前的总结\"></a>一、之前的总结</h2><p><a class=\"link\"   href=\"https://www.jianshu.com/p/a1c68ca79dbf\" >我的简书-iOS的推送服务APNs详解 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"二、推送通知的类型\"><a href=\"#二、推送通知的类型\" class=\"headerlink\" title=\"二、推送通知的类型\"></a>二、推送通知的类型</h2><p>推送通知分为本地推送与远程推送</p>\n<p>本地推送最大推送数量是64个，超过这个数量会被忽略</p>\n<p>本地推送：不需要联网也可以推送，是开发人员在APP内设定特定的时间来提醒用户干什么</p>\n<p>本地通知与远程通知都可以向不在前台运行的应用发送消息，这种消息既可能是即将发生的事件，也可能是服务器的新数据，不管是本地还是远程通知，他们在界面上的显示效果是相同的。</p>\n<p>二者的区别是本地推送是由本应用负责调用，只能从当前设备上的iOS发出。而远程推送是由服务器来控制。</p>\n<h2 id=\"三、推送通知的流程\"><a href=\"#三、推送通知的流程\" class=\"headerlink\" title=\"三、推送通知的流程\"></a>三、推送通知的流程</h2><ol>\n<li><p>应用程序注册消息推送。</p>\n</li>\n<li><p>iOS从APNS Server获取device token，应用程序接收device token。 </p>\n</li>\n<li><p>应用程序将device token发送给PUSH服务端程序。</p>\n</li>\n<li><p>服务端程序向APNS服务发送消息。</p>\n</li>\n<li><p>APNS服务将消息发送给iPhone应用程序</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/003.webp\"\n                     \n                ></p>\n<h3 id=\"1-推送前\"><a href=\"#1-推送前\" class=\"headerlink\" title=\"1. 推送前\"></a>1. 推送前</h3><ol>\n<li><p>Device连接APNs服务器并携带设备序列号 </p>\n</li>\n<li><p>连接成功，APNs经过打包和处理产生device_token并返回给注册的Device </p>\n</li>\n<li><p>Device携带获取的device_token向我们自己的应用服务器注册 </p>\n</li>\n<li><p>完成需要推送的Device在APNs服务器和我们自己的应用服务器注册</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/001.webp\"\n                     \n                ></p>\n<h3 id=\"2-推送中\"><a href=\"#2-推送中\" class=\"headerlink\" title=\"2. 推送中\"></a>2. 推送中</h3><ol>\n<li><p>首先，安装了具有推送功能的应用，我们的设备在有网络的情况下会连接苹果推送服务器，连接过程中，APNS会验证device_token，连接成功后维持一个长连接； </p>\n</li>\n<li><p>Provider(我们自己的服务器)收到需要被推送的消息并结合被推送设备的device_token一起打包发送给APNS服务器； </p>\n</li>\n<li><p>APNS服务器将推送信息推送给指定device_token的设备； </p>\n</li>\n<li><p>设备收到推送消息后通知我们的应用程序并显示和提示用户（声音、弹出框）</p>\n</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/06/iOS/OC/021-APNS/README/002.webp\"\n                     \n                ></p>"},{"title":"iOS中Runloop应用场景","date":"2024-08-09T01:59:53.725Z","_content":"\n[iOS组件化的那些事 - CTMediator](https://juejin.cn/post/6879980785177198606)\n\n","source":"_posts/iOS/OC/08-iOS组件化/index.md","raw":"---\ntitle: iOS中Runloop应用场景\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 组件化\n- CTMediator\n---\n\n[iOS组件化的那些事 - CTMediator](https://juejin.cn/post/6879980785177198606)\n\n","slug":"iOS/OC/08-iOS组件化/index","published":1,"updated":"2024-08-09T02:01:08.672Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93x001idgxrd3ma8s2k","content":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6879980785177198606\" >iOS组件化的那些事 - CTMediator <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6879980785177198606\" >iOS组件化的那些事 - CTMediator <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"Swift Kingfisher阅读","date":"2024-08-09T02:03:02.371Z","_content":"\n\n[我是这样学习拥有18k⭐️的Kingfisher优秀代码的--亲自实战优化项目代码和结构【物超所值】](https://juejin.cn/post/6929345703818985485)","source":"_posts/iOS/Swift/08-源码阅读/001-Kingfisher/index.md","raw":"---\ntitle: Swift Kingfisher阅读\ndate: {{ date }}\ncategories: \n- Swift\ntags: \n- iOS\n- Swift\n- Kingfisher\n---\n\n\n[我是这样学习拥有18k⭐️的Kingfisher优秀代码的--亲自实战优化项目代码和结构【物超所值】](https://juejin.cn/post/6929345703818985485)","slug":"iOS/Swift/08-源码阅读/001-Kingfisher/index","published":1,"updated":"2024-08-09T02:03:59.088Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93y001ldgxr01n0b4vl","content":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6929345703818985485\" >我是这样学习拥有18k⭐️的Kingfisher优秀代码的–亲自实战优化项目代码和结构【物超所值】 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6929345703818985485\" >我是这样学习拥有18k⭐️的Kingfisher优秀代码的–亲自实战优化项目代码和结构【物超所值】 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"iOS 属性关键字","date":"2024-07-22T08:01:21.525Z","_content":"\n<!-- # iOS 属性关键字 -->\n\n在iOS开发中，属性关键字用于修饰属性的行为和特性。理解和正确使用这些关键字可以帮助开发者更好地管理对象的内存和线程安全性。以下是常用的属性关键字及其解释：\n \n <!-- more -->\n\n### 内存管理关键字\n- **strong**：表示对对象的强引用，属性会持有对象，引用计数增加。\n  ```objective-c\n  @property (nonatomic, strong) NSString *name;\n  ```\n  \n- **weak**：表示对对象的弱引用，属性不会持有对象，引用计数不增加。如果对象被释放，weak引用会自动设置为nil，避免野指针。\n  ```objective-c\n  @property (nonatomic, weak) id<Delegate> delegate;\n  ```\n  \n- **assign**：直接赋值，不更改引用计数。通常用于基本数据类型或不需要持有的对象。\n  ```objective-c\n  @property (nonatomic, assign) NSInteger age;\n  ```\n  \n- **copy**：表示对对象进行拷贝，属性会持有拷贝后的对象。适用于NSString等类，为了防止属性被外部修改。\n  ```objective-c\n  @property (nonatomic, copy) NSString *title;\n  ```\n\n- **unsafe_unretained**：与weak类似，但对象被释放后不会自动设置为nil，容易导致野指针。适用于不支持弱引用的对象（在ARC之前常用）。\n  ```objective-c\n  @property (nonatomic, unsafe_unretained) id delegate;\n  ```\n\n### 原子性关键字\n- **atomic**：默认行为，确保属性的读写操作是线程安全的。性能较低，因为每次访问属性时都需要加锁。\n  ```objective-c\n  @property (atomic, strong) NSString *name;\n  ```\n\n- **nonatomic**：不保证线程安全，性能较高，适用于大多数场景。\n  ```objective-c\n  @property (nonatomic, strong) NSString *name;\n  ```\n\n### 属性的读写权限关键字\n- **readonly**：只生成getter方法，不生成setter方法，属性只能读不能写。\n  ```objective-c\n  @property (nonatomic, readonly) NSString *identifier;\n  ```\n\n- **readwrite**：生成getter和setter方法，属性可读可写。默认行为。\n  ```objective-c\n  @property (nonatomic, readwrite) NSString *name;\n  ```\n\n### 自定义方法名关键字\n- **getter**：自定义getter方法名。\n  ```objective-c\n  @property (nonatomic, getter=isEnabled) BOOL enabled;\n  ```\n\n- **setter**：自定义setter方法名。\n  ```objective-c\n  @property (nonatomic, setter=setEnabled:) BOOL enabled;\n  ```\n\n### 内存管理策略（在MRC中使用）\n- **retain**：表示对对象的强引用，属性会持有对象，引用计数增加。ARC环境下用strong代替。\n  ```objective-c\n  @property (nonatomic, retain) NSString *name;\n  ```\n\n- **assign**：直接赋值，不更改引用计数。ARC环境下用weak或assign代替。\n  ```objective-c\n  @property (nonatomic, assign) NSInteger age;\n  ```\n\n- **copy**：表示对对象进行拷贝，属性会持有拷贝后的对象。ARC环境下与strong结合使用。\n  ```objective-c\n  @property (nonatomic, copy) NSString *title;\n  ```\n\n### 特殊关键字\n- **nonnull**：表示属性不能为空。\n  ```objective-c\n  @property (nonatomic, strong, nonnull) NSString *name;\n  ```\n\n- **nullable**：表示属性可以为空。\n  ```objective-c\n  @property (nonatomic, strong, nullable) NSString *name;\n  ```\n\n- **null_resettable**：属性可以为空，但在访问时会自动初始化。\n  ```objective-c\n  @property (nonatomic, strong, null_resettable) UIView *view;\n  ```\n\n### 总结\n理解和正确使用属性关键字，可以有效管理内存、提高性能和确保线程安全。根据不同的场景选择合适的关键字，可以让代码更加健壮和高效。","source":"_posts/iOS/OC/001-OC属性、关键字/003-iOS属性关键字/README.md","raw":"---\ntitle: iOS 属性关键字\ndate: {{ date }}\ntags: [iOS, 面试题, 属性关键字]\n---\n\n<!-- # iOS 属性关键字 -->\n\n在iOS开发中，属性关键字用于修饰属性的行为和特性。理解和正确使用这些关键字可以帮助开发者更好地管理对象的内存和线程安全性。以下是常用的属性关键字及其解释：\n \n <!-- more -->\n\n### 内存管理关键字\n- **strong**：表示对对象的强引用，属性会持有对象，引用计数增加。\n  ```objective-c\n  @property (nonatomic, strong) NSString *name;\n  ```\n  \n- **weak**：表示对对象的弱引用，属性不会持有对象，引用计数不增加。如果对象被释放，weak引用会自动设置为nil，避免野指针。\n  ```objective-c\n  @property (nonatomic, weak) id<Delegate> delegate;\n  ```\n  \n- **assign**：直接赋值，不更改引用计数。通常用于基本数据类型或不需要持有的对象。\n  ```objective-c\n  @property (nonatomic, assign) NSInteger age;\n  ```\n  \n- **copy**：表示对对象进行拷贝，属性会持有拷贝后的对象。适用于NSString等类，为了防止属性被外部修改。\n  ```objective-c\n  @property (nonatomic, copy) NSString *title;\n  ```\n\n- **unsafe_unretained**：与weak类似，但对象被释放后不会自动设置为nil，容易导致野指针。适用于不支持弱引用的对象（在ARC之前常用）。\n  ```objective-c\n  @property (nonatomic, unsafe_unretained) id delegate;\n  ```\n\n### 原子性关键字\n- **atomic**：默认行为，确保属性的读写操作是线程安全的。性能较低，因为每次访问属性时都需要加锁。\n  ```objective-c\n  @property (atomic, strong) NSString *name;\n  ```\n\n- **nonatomic**：不保证线程安全，性能较高，适用于大多数场景。\n  ```objective-c\n  @property (nonatomic, strong) NSString *name;\n  ```\n\n### 属性的读写权限关键字\n- **readonly**：只生成getter方法，不生成setter方法，属性只能读不能写。\n  ```objective-c\n  @property (nonatomic, readonly) NSString *identifier;\n  ```\n\n- **readwrite**：生成getter和setter方法，属性可读可写。默认行为。\n  ```objective-c\n  @property (nonatomic, readwrite) NSString *name;\n  ```\n\n### 自定义方法名关键字\n- **getter**：自定义getter方法名。\n  ```objective-c\n  @property (nonatomic, getter=isEnabled) BOOL enabled;\n  ```\n\n- **setter**：自定义setter方法名。\n  ```objective-c\n  @property (nonatomic, setter=setEnabled:) BOOL enabled;\n  ```\n\n### 内存管理策略（在MRC中使用）\n- **retain**：表示对对象的强引用，属性会持有对象，引用计数增加。ARC环境下用strong代替。\n  ```objective-c\n  @property (nonatomic, retain) NSString *name;\n  ```\n\n- **assign**：直接赋值，不更改引用计数。ARC环境下用weak或assign代替。\n  ```objective-c\n  @property (nonatomic, assign) NSInteger age;\n  ```\n\n- **copy**：表示对对象进行拷贝，属性会持有拷贝后的对象。ARC环境下与strong结合使用。\n  ```objective-c\n  @property (nonatomic, copy) NSString *title;\n  ```\n\n### 特殊关键字\n- **nonnull**：表示属性不能为空。\n  ```objective-c\n  @property (nonatomic, strong, nonnull) NSString *name;\n  ```\n\n- **nullable**：表示属性可以为空。\n  ```objective-c\n  @property (nonatomic, strong, nullable) NSString *name;\n  ```\n\n- **null_resettable**：属性可以为空，但在访问时会自动初始化。\n  ```objective-c\n  @property (nonatomic, strong, null_resettable) UIView *view;\n  ```\n\n### 总结\n理解和正确使用属性关键字，可以有效管理内存、提高性能和确保线程安全。根据不同的场景选择合适的关键字，可以让代码更加健壮和高效。","slug":"iOS/OC/001-OC属性、关键字/003-iOS属性关键字/README","published":1,"updated":"2024-08-06T08:39:27.188Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93y001pdgxr32v0fv06","content":"<!-- # iOS 属性关键字 -->\n\n<p>在iOS开发中，属性关键字用于修饰属性的行为和特性。理解和正确使用这些关键字可以帮助开发者更好地管理对象的内存和线程安全性。以下是常用的属性关键字及其解释：</p>\n <span id=\"more\"></span>\n\n<h3 id=\"内存管理关键字\"><a href=\"#内存管理关键字\" class=\"headerlink\" title=\"内存管理关键字\"></a>内存管理关键字</h3><ul>\n<li><p><strong>strong</strong>：表示对对象的强引用，属性会持有对象，引用计数增加。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>weak</strong>：表示对对象的弱引用，属性不会持有对象，引用计数不增加。如果对象被释放，weak引用会自动设置为nil，避免野指针。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>assign</strong>：直接赋值，不更改引用计数。通常用于基本数据类型或不需要持有的对象。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>copy</strong>：表示对对象进行拷贝，属性会持有拷贝后的对象。适用于NSString等类，为了防止属性被外部修改。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>unsafe_unretained</strong>：与weak类似，但对象被释放后不会自动设置为nil，容易导致野指针。适用于不支持弱引用的对象（在ARC之前常用）。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, unsafe_unretained) id delegate;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"原子性关键字\"><a href=\"#原子性关键字\" class=\"headerlink\" title=\"原子性关键字\"></a>原子性关键字</h3><ul>\n<li><p><strong>atomic</strong>：默认行为，确保属性的读写操作是线程安全的。性能较低，因为每次访问属性时都需要加锁。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (atomic, strong) NSString *name;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>nonatomic</strong>：不保证线程安全，性能较高，适用于大多数场景。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"属性的读写权限关键字\"><a href=\"#属性的读写权限关键字\" class=\"headerlink\" title=\"属性的读写权限关键字\"></a>属性的读写权限关键字</h3><ul>\n<li><p><strong>readonly</strong>：只生成getter方法，不生成setter方法，属性只能读不能写。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>readwrite</strong>：生成getter和setter方法，属性可读可写。默认行为。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readwrite) NSString *name;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"自定义方法名关键字\"><a href=\"#自定义方法名关键字\" class=\"headerlink\" title=\"自定义方法名关键字\"></a>自定义方法名关键字</h3><ul>\n<li><p><strong>getter</strong>：自定义getter方法名。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, getter=isEnabled) BOOL enabled;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>setter</strong>：自定义setter方法名。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, setter=setEnabled:) BOOL enabled;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"内存管理策略（在MRC中使用）\"><a href=\"#内存管理策略（在MRC中使用）\" class=\"headerlink\" title=\"内存管理策略（在MRC中使用）\"></a>内存管理策略（在MRC中使用）</h3><ul>\n<li><p><strong>retain</strong>：表示对对象的强引用，属性会持有对象，引用计数增加。ARC环境下用strong代替。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, retain) NSString *name;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>assign</strong>：直接赋值，不更改引用计数。ARC环境下用weak或assign代替。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>copy</strong>：表示对对象进行拷贝，属性会持有拷贝后的对象。ARC环境下与strong结合使用。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"特殊关键字\"><a href=\"#特殊关键字\" class=\"headerlink\" title=\"特殊关键字\"></a>特殊关键字</h3><ul>\n<li><p><strong>nonnull</strong>：表示属性不能为空。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nonnull) NSString *name;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>nullable</strong>：表示属性可以为空。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString *name;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>null_resettable</strong>：属性可以为空，但在访问时会自动初始化。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) UIView *view;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解和正确使用属性关键字，可以有效管理内存、提高性能和确保线程安全。根据不同的场景选择合适的关键字，可以让代码更加健壮和高效。</p>\n","excerpt":"<!-- # iOS 属性关键字 -->\n\n<p>在iOS开发中，属性关键字用于修饰属性的行为和特性。理解和正确使用这些关键字可以帮助开发者更好地管理对象的内存和线程安全性。以下是常用的属性关键字及其解释：</p>","more":"<h3 id=\"内存管理关键字\"><a href=\"#内存管理关键字\" class=\"headerlink\" title=\"内存管理关键字\"></a>内存管理关键字</h3><ul>\n<li><p><strong>strong</strong>：表示对对象的强引用，属性会持有对象，引用计数增加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>weak</strong>：表示对对象的弱引用，属性不会持有对象，引用计数不增加。如果对象被释放，weak引用会自动设置为nil，避免野指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>assign</strong>：直接赋值，不更改引用计数。通常用于基本数据类型或不需要持有的对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>copy</strong>：表示对对象进行拷贝，属性会持有拷贝后的对象。适用于NSString等类，为了防止属性被外部修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>unsafe_unretained</strong>：与weak类似，但对象被释放后不会自动设置为nil，容易导致野指针。适用于不支持弱引用的对象（在ARC之前常用）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, unsafe_unretained) id delegate;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"原子性关键字\"><a href=\"#原子性关键字\" class=\"headerlink\" title=\"原子性关键字\"></a>原子性关键字</h3><ul>\n<li><p><strong>atomic</strong>：默认行为，确保属性的读写操作是线程安全的。性能较低，因为每次访问属性时都需要加锁。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (atomic, strong) NSString *name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>nonatomic</strong>：不保证线程安全，性能较高，适用于大多数场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"属性的读写权限关键字\"><a href=\"#属性的读写权限关键字\" class=\"headerlink\" title=\"属性的读写权限关键字\"></a>属性的读写权限关键字</h3><ul>\n<li><p><strong>readonly</strong>：只生成getter方法，不生成setter方法，属性只能读不能写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>readwrite</strong>：生成getter和setter方法，属性可读可写。默认行为。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readwrite) NSString *name;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"自定义方法名关键字\"><a href=\"#自定义方法名关键字\" class=\"headerlink\" title=\"自定义方法名关键字\"></a>自定义方法名关键字</h3><ul>\n<li><p><strong>getter</strong>：自定义getter方法名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, getter=isEnabled) BOOL enabled;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setter</strong>：自定义setter方法名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, setter=setEnabled:) BOOL enabled;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"内存管理策略（在MRC中使用）\"><a href=\"#内存管理策略（在MRC中使用）\" class=\"headerlink\" title=\"内存管理策略（在MRC中使用）\"></a>内存管理策略（在MRC中使用）</h3><ul>\n<li><p><strong>retain</strong>：表示对对象的强引用，属性会持有对象，引用计数增加。ARC环境下用strong代替。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, retain) NSString *name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>assign</strong>：直接赋值，不更改引用计数。ARC环境下用weak或assign代替。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>copy</strong>：表示对对象进行拷贝，属性会持有拷贝后的对象。ARC环境下与strong结合使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"特殊关键字\"><a href=\"#特殊关键字\" class=\"headerlink\" title=\"特殊关键字\"></a>特殊关键字</h3><ul>\n<li><p><strong>nonnull</strong>：表示属性不能为空。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nonnull) NSString *name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>nullable</strong>：表示属性可以为空。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString *name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>null_resettable</strong>：属性可以为空，但在访问时会自动初始化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) UIView *view;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解和正确使用属性关键字，可以有效管理内存、提高性能和确保线程安全。根据不同的场景选择合适的关键字，可以让代码更加健壮和高效。</p>"},{"title":"iOS ARC 下 所有权修饰符","date":"2024-07-22T08:01:21.547Z","_content":"\n<!-- # iOS ARC 下 所有权修饰符 -->\n\n在 iOS 的 ARC（Automatic Reference Counting）环境下，所有权修饰符用于指定对象的内存管理策略。ARC 自动处理对象的引用计数，但开发者可以通过使用这些修饰符来显式地控制对象的生命周期和内存管理。以下是常用的 ARC 所有权修饰符及其详细解释：\n \n<!-- more -->\n\n### 1. `__strong`\n- **作用**：表示对对象的强引用，持有对象。对象的引用计数会增加，直到所有对它的 `strong` 引用都被释放，才会被销毁。\n- **默认行为**：在 ARC 环境中，默认情况下所有对象都是 `__strong`，即使不显式声明。\n- **使用场景**：适用于需要长期持有的对象，如模型对象、视图控制器的子视图等。\n\n```objective-c\n// 默认情况下，所有对象都是 __strong\n__strong NSString *name = [[NSString alloc] init];\n```\n\n### 2. `__weak`\n- **作用**：表示对对象的弱引用，不持有对象。对象的引用计数不会增加，当对象被销毁时，weak 属性会自动设置为 nil，避免悬空指针（dangling pointer）。\n- **使用场景**：用于避免循环引用（如 `delegate`、`IBOutlet`）。\n\n```objective-c\n// 使用 __weak 避免循环引用\n__weak id<Delegate> delegate = self.delegate;\n```\n\n### 3. `__unsafe_unretained`\n- **作用**：类似于 `__weak`，但对象被销毁时不会自动设置为 nil，可能导致悬空指针。适用于不支持弱引用的对象。\n- **使用场景**：在特定情况下需要使用非 ARC 环境下不需要弱引用的对象，但需要小心避免悬空指针。\n\n```objective-c\n// 使用 __unsafe_unretained，可能导致悬空指针\n__unsafe_unretained id delegate = self.delegate;\n```\n\n### 4. `__autoreleasing`\n- **作用**：表示对象会被放入自动释放池中，在当前作用域结束时被释放。通常用于方法参数和返回值，以确保临时对象被自动释放。\n- **使用场景**：在处理 `NSError` 和其他双指针参数（如 `id *`）时。\n\n```objective-c\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error {\n    if (/* some failure condition */) {\n        if (error) {\n            *error = [NSError errorWithDomain:@\"com.example\" code:42 userInfo:nil];\n        }\n        return NO;\n    }\n    return YES;\n}\n```\n\n### 示例代码\n以下示例展示了 `__strong`、`__weak`、`__unsafe_unretained` 和 `__autoreleasing` 的使用：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *strongName;\n@property (nonatomic, weak) id<Delegate> weakDelegate;\n@property (nonatomic, unsafe_unretained) id unsafeDelegate;\n\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;\n\n@end\n\n@implementation MyClass\n\n- (void)example {\n    // __strong 变量，持有对象\n    __strong NSString *strongString = [[NSString alloc] initWithString:@\"Hello\"];\n    \n    // __weak 变量，不持有对象，当对象被销毁时自动设置为 nil\n    __weak NSString *weakString = strongString;\n    \n    // __unsafe_unretained 变量，不持有对象，当对象被销毁时不会自动设置为 nil\n    __unsafe_unretained NSString *unsafeString = strongString;\n    \n    NSLog(@\"strongString: %@\", strongString);\n    NSLog(@\"weakString: %@\", weakString);\n    NSLog(@\"unsafeString: %@\", unsafeString);\n}\n\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error {\n    if (/* some failure condition */) {\n        if (error) {\n            *error = [NSError errorWithDomain:@\"com.example\" code:42 userInfo:nil];\n        }\n        return NO;\n    }\n    return YES;\n}\n\n@end\n```\n\n### 总结\n- **`__strong`**：默认行为，适用于大多数场景，确保对象被持有。\n- **`__weak`**：用于避免循环引用，适用于 `delegate`、`IBOutlet` 等。\n- **`__unsafe_unretained`**：需要小心使用，避免悬空指针。推荐在 ARC 环境下尽量使用 `__weak` 代替。\n- **`__autoreleasing`**：用于方法参数和返回值，确保临时对象被自动释放。","source":"_posts/iOS/OC/001-OC属性、关键字/005-ARC下所有权修饰符/README.md","raw":"---\ntitle: iOS ARC 下 所有权修饰符\ndate: {{ date }}\ntags: [iOS, 面试题, 修饰符]\n---\n\n<!-- # iOS ARC 下 所有权修饰符 -->\n\n在 iOS 的 ARC（Automatic Reference Counting）环境下，所有权修饰符用于指定对象的内存管理策略。ARC 自动处理对象的引用计数，但开发者可以通过使用这些修饰符来显式地控制对象的生命周期和内存管理。以下是常用的 ARC 所有权修饰符及其详细解释：\n \n<!-- more -->\n\n### 1. `__strong`\n- **作用**：表示对对象的强引用，持有对象。对象的引用计数会增加，直到所有对它的 `strong` 引用都被释放，才会被销毁。\n- **默认行为**：在 ARC 环境中，默认情况下所有对象都是 `__strong`，即使不显式声明。\n- **使用场景**：适用于需要长期持有的对象，如模型对象、视图控制器的子视图等。\n\n```objective-c\n// 默认情况下，所有对象都是 __strong\n__strong NSString *name = [[NSString alloc] init];\n```\n\n### 2. `__weak`\n- **作用**：表示对对象的弱引用，不持有对象。对象的引用计数不会增加，当对象被销毁时，weak 属性会自动设置为 nil，避免悬空指针（dangling pointer）。\n- **使用场景**：用于避免循环引用（如 `delegate`、`IBOutlet`）。\n\n```objective-c\n// 使用 __weak 避免循环引用\n__weak id<Delegate> delegate = self.delegate;\n```\n\n### 3. `__unsafe_unretained`\n- **作用**：类似于 `__weak`，但对象被销毁时不会自动设置为 nil，可能导致悬空指针。适用于不支持弱引用的对象。\n- **使用场景**：在特定情况下需要使用非 ARC 环境下不需要弱引用的对象，但需要小心避免悬空指针。\n\n```objective-c\n// 使用 __unsafe_unretained，可能导致悬空指针\n__unsafe_unretained id delegate = self.delegate;\n```\n\n### 4. `__autoreleasing`\n- **作用**：表示对象会被放入自动释放池中，在当前作用域结束时被释放。通常用于方法参数和返回值，以确保临时对象被自动释放。\n- **使用场景**：在处理 `NSError` 和其他双指针参数（如 `id *`）时。\n\n```objective-c\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error {\n    if (/* some failure condition */) {\n        if (error) {\n            *error = [NSError errorWithDomain:@\"com.example\" code:42 userInfo:nil];\n        }\n        return NO;\n    }\n    return YES;\n}\n```\n\n### 示例代码\n以下示例展示了 `__strong`、`__weak`、`__unsafe_unretained` 和 `__autoreleasing` 的使用：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *strongName;\n@property (nonatomic, weak) id<Delegate> weakDelegate;\n@property (nonatomic, unsafe_unretained) id unsafeDelegate;\n\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;\n\n@end\n\n@implementation MyClass\n\n- (void)example {\n    // __strong 变量，持有对象\n    __strong NSString *strongString = [[NSString alloc] initWithString:@\"Hello\"];\n    \n    // __weak 变量，不持有对象，当对象被销毁时自动设置为 nil\n    __weak NSString *weakString = strongString;\n    \n    // __unsafe_unretained 变量，不持有对象，当对象被销毁时不会自动设置为 nil\n    __unsafe_unretained NSString *unsafeString = strongString;\n    \n    NSLog(@\"strongString: %@\", strongString);\n    NSLog(@\"weakString: %@\", weakString);\n    NSLog(@\"unsafeString: %@\", unsafeString);\n}\n\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error {\n    if (/* some failure condition */) {\n        if (error) {\n            *error = [NSError errorWithDomain:@\"com.example\" code:42 userInfo:nil];\n        }\n        return NO;\n    }\n    return YES;\n}\n\n@end\n```\n\n### 总结\n- **`__strong`**：默认行为，适用于大多数场景，确保对象被持有。\n- **`__weak`**：用于避免循环引用，适用于 `delegate`、`IBOutlet` 等。\n- **`__unsafe_unretained`**：需要小心使用，避免悬空指针。推荐在 ARC 环境下尽量使用 `__weak` 代替。\n- **`__autoreleasing`**：用于方法参数和返回值，确保临时对象被自动释放。","slug":"iOS/OC/001-OC属性、关键字/005-ARC下所有权修饰符/README","published":1,"updated":"2024-08-06T08:39:34.622Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp93z001rdgxregr34vhq","content":"<!-- # iOS ARC 下 所有权修饰符 -->\n\n<p>在 iOS 的 ARC（Automatic Reference Counting）环境下，所有权修饰符用于指定对象的内存管理策略。ARC 自动处理对象的引用计数，但开发者可以通过使用这些修饰符来显式地控制对象的生命周期和内存管理。以下是常用的 ARC 所有权修饰符及其详细解释：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-strong\"><a href=\"#1-strong\" class=\"headerlink\" title=\"1. __strong\"></a>1. <code>__strong</code></h3><ul>\n<li><strong>作用</strong>：表示对对象的强引用，持有对象。对象的引用计数会增加，直到所有对它的 <code>strong</code> 引用都被释放，才会被销毁。</li>\n<li><strong>默认行为</strong>：在 ARC 环境中，默认情况下所有对象都是 <code>__strong</code>，即使不显式声明。</li>\n<li><strong>使用场景</strong>：适用于需要长期持有的对象，如模型对象、视图控制器的子视图等。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认情况下，所有对象都是 __strong</span><br><span class=\"line\">__strong NSString *name = [[NSString alloc] init];</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-weak\"><a href=\"#2-weak\" class=\"headerlink\" title=\"2. __weak\"></a>2. <code>__weak</code></h3><ul>\n<li><strong>作用</strong>：表示对对象的弱引用，不持有对象。对象的引用计数不会增加，当对象被销毁时，weak 属性会自动设置为 nil，避免悬空指针（dangling pointer）。</li>\n<li><strong>使用场景</strong>：用于避免循环引用（如 <code>delegate</code>、<code>IBOutlet</code>）。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 __weak 避免循环引用</span><br><span class=\"line\">__weak id&lt;Delegate&gt; delegate = self.delegate;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-unsafe-unretained\"><a href=\"#3-unsafe-unretained\" class=\"headerlink\" title=\"3. __unsafe_unretained\"></a>3. <code>__unsafe_unretained</code></h3><ul>\n<li><strong>作用</strong>：类似于 <code>__weak</code>，但对象被销毁时不会自动设置为 nil，可能导致悬空指针。适用于不支持弱引用的对象。</li>\n<li><strong>使用场景</strong>：在特定情况下需要使用非 ARC 环境下不需要弱引用的对象，但需要小心避免悬空指针。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 __unsafe_unretained，可能导致悬空指针</span><br><span class=\"line\">__unsafe_unretained id delegate = self.delegate;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-autoreleasing\"><a href=\"#4-autoreleasing\" class=\"headerlink\" title=\"4. __autoreleasing\"></a>4. <code>__autoreleasing</code></h3><ul>\n<li><strong>作用</strong>：表示对象会被放入自动释放池中，在当前作用域结束时被释放。通常用于方法参数和返回值，以确保临时对象被自动释放。</li>\n<li><strong>使用场景</strong>：在处理 <code>NSError</code> 和其他双指针参数（如 <code>id *</code>）时。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error &#123;</span><br><span class=\"line\">    if (/* some failure condition */) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            *error = [NSError errorWithDomain:@&quot;com.example&quot; code:42 userInfo:nil];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下示例展示了 <code>__strong</code>、<code>__weak</code>、<code>__unsafe_unretained</code> 和 <code>__autoreleasing</code> 的使用：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *strongName;</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; weakDelegate;</span><br><span class=\"line\">@property (nonatomic, unsafe_unretained) id unsafeDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)example &#123;</span><br><span class=\"line\">    // __strong 变量，持有对象</span><br><span class=\"line\">    __strong NSString *strongString = [[NSString alloc] initWithString:@&quot;Hello&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // __weak 变量，不持有对象，当对象被销毁时自动设置为 nil</span><br><span class=\"line\">    __weak NSString *weakString = strongString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // __unsafe_unretained 变量，不持有对象，当对象被销毁时不会自动设置为 nil</span><br><span class=\"line\">    __unsafe_unretained NSString *unsafeString = strongString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;strongString: %@&quot;, strongString);</span><br><span class=\"line\">    NSLog(@&quot;weakString: %@&quot;, weakString);</span><br><span class=\"line\">    NSLog(@&quot;unsafeString: %@&quot;, unsafeString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error &#123;</span><br><span class=\"line\">    if (/* some failure condition */) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            *error = [NSError errorWithDomain:@&quot;com.example&quot; code:42 userInfo:nil];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>__strong</code>**：默认行为，适用于大多数场景，确保对象被持有。</li>\n<li>**<code>__weak</code>**：用于避免循环引用，适用于 <code>delegate</code>、<code>IBOutlet</code> 等。</li>\n<li>**<code>__unsafe_unretained</code>**：需要小心使用，避免悬空指针。推荐在 ARC 环境下尽量使用 <code>__weak</code> 代替。</li>\n<li>**<code>__autoreleasing</code>**：用于方法参数和返回值，确保临时对象被自动释放。</li>\n</ul>\n","excerpt":"<!-- # iOS ARC 下 所有权修饰符 -->\n\n<p>在 iOS 的 ARC（Automatic Reference Counting）环境下，所有权修饰符用于指定对象的内存管理策略。ARC 自动处理对象的引用计数，但开发者可以通过使用这些修饰符来显式地控制对象的生命周期和内存管理。以下是常用的 ARC 所有权修饰符及其详细解释：</p>","more":"<h3 id=\"1-strong\"><a href=\"#1-strong\" class=\"headerlink\" title=\"1. __strong\"></a>1. <code>__strong</code></h3><ul>\n<li><strong>作用</strong>：表示对对象的强引用，持有对象。对象的引用计数会增加，直到所有对它的 <code>strong</code> 引用都被释放，才会被销毁。</li>\n<li><strong>默认行为</strong>：在 ARC 环境中，默认情况下所有对象都是 <code>__strong</code>，即使不显式声明。</li>\n<li><strong>使用场景</strong>：适用于需要长期持有的对象，如模型对象、视图控制器的子视图等。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认情况下，所有对象都是 __strong</span><br><span class=\"line\">__strong NSString *name = [[NSString alloc] init];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-weak\"><a href=\"#2-weak\" class=\"headerlink\" title=\"2. __weak\"></a>2. <code>__weak</code></h3><ul>\n<li><strong>作用</strong>：表示对对象的弱引用，不持有对象。对象的引用计数不会增加，当对象被销毁时，weak 属性会自动设置为 nil，避免悬空指针（dangling pointer）。</li>\n<li><strong>使用场景</strong>：用于避免循环引用（如 <code>delegate</code>、<code>IBOutlet</code>）。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 __weak 避免循环引用</span><br><span class=\"line\">__weak id&lt;Delegate&gt; delegate = self.delegate;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-unsafe-unretained\"><a href=\"#3-unsafe-unretained\" class=\"headerlink\" title=\"3. __unsafe_unretained\"></a>3. <code>__unsafe_unretained</code></h3><ul>\n<li><strong>作用</strong>：类似于 <code>__weak</code>，但对象被销毁时不会自动设置为 nil，可能导致悬空指针。适用于不支持弱引用的对象。</li>\n<li><strong>使用场景</strong>：在特定情况下需要使用非 ARC 环境下不需要弱引用的对象，但需要小心避免悬空指针。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 __unsafe_unretained，可能导致悬空指针</span><br><span class=\"line\">__unsafe_unretained id delegate = self.delegate;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-autoreleasing\"><a href=\"#4-autoreleasing\" class=\"headerlink\" title=\"4. __autoreleasing\"></a>4. <code>__autoreleasing</code></h3><ul>\n<li><strong>作用</strong>：表示对象会被放入自动释放池中，在当前作用域结束时被释放。通常用于方法参数和返回值，以确保临时对象被自动释放。</li>\n<li><strong>使用场景</strong>：在处理 <code>NSError</code> 和其他双指针参数（如 <code>id *</code>）时。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error &#123;</span><br><span class=\"line\">    if (/* some failure condition */) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            *error = [NSError errorWithDomain:@&quot;com.example&quot; code:42 userInfo:nil];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下示例展示了 <code>__strong</code>、<code>__weak</code>、<code>__unsafe_unretained</code> 和 <code>__autoreleasing</code> 的使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *strongName;</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; weakDelegate;</span><br><span class=\"line\">@property (nonatomic, unsafe_unretained) id unsafeDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)example &#123;</span><br><span class=\"line\">    // __strong 变量，持有对象</span><br><span class=\"line\">    __strong NSString *strongString = [[NSString alloc] initWithString:@&quot;Hello&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // __weak 变量，不持有对象，当对象被销毁时自动设置为 nil</span><br><span class=\"line\">    __weak NSString *weakString = strongString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // __unsafe_unretained 变量，不持有对象，当对象被销毁时不会自动设置为 nil</span><br><span class=\"line\">    __unsafe_unretained NSString *unsafeString = strongString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;strongString: %@&quot;, strongString);</span><br><span class=\"line\">    NSLog(@&quot;weakString: %@&quot;, weakString);</span><br><span class=\"line\">    NSLog(@&quot;unsafeString: %@&quot;, unsafeString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error &#123;</span><br><span class=\"line\">    if (/* some failure condition */) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            *error = [NSError errorWithDomain:@&quot;com.example&quot; code:42 userInfo:nil];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>__strong</code>**：默认行为，适用于大多数场景，确保对象被持有。</li>\n<li>**<code>__weak</code>**：用于避免循环引用，适用于 <code>delegate</code>、<code>IBOutlet</code> 等。</li>\n<li>**<code>__unsafe_unretained</code>**：需要小心使用，避免悬空指针。推荐在 ARC 环境下尽量使用 <code>__weak</code> 代替。</li>\n<li>**<code>__autoreleasing</code>**：用于方法参数和返回值，确保临时对象被自动释放。</li>\n</ul>"},{"title":"请问 @property 的本质是什么？","date":"2024-07-22T08:01:21.632Z","_content":"\n<!-- # @property 的本质是什么？ -->\n\n在 Objective-C 中，`@property` 是一种用于声明类的属性的语法糖。**它的本质是帮助开发者自动生成属性的 getter 和 setter 方法，以及属性所需的实例变量（ivar）。**`@property` 使得代码更简洁、可读性更高，并且减少了手动编写 getter 和 setter 方法的繁琐工作。为了更详细地理解 `@property` 的本质，下面从几个方面进行解释：\n\n<!-- more -->\n\n### `@property` 的基本组成部分\n\n当你在类中声明一个属性时：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n```\n\n`@property` 包含以下几个部分：\n\n- **属性特性（Attributes）**：如 `nonatomic`、`strong`，用于指定属性的行为。\n- **类型（Type）**：如 `NSString *`，指定属性的数据类型。\n- **属性名（Name）**：如 `name`，指定属性的名称。\n\n### `@property` 的工作原理\n\n在编译时，`@property` 会生成与之相关的实例变量、getter 和 setter 方法。以上面的例子为例，`@property (nonatomic, strong) NSString *name;` 将生成以下内容：\n\n#### 1. 实例变量\n\n编译器生成一个名为 `_name` 的实例变量（ivar）：\n\n```objective-c\n@interface MyClass : NSObject {\n    NSString *_name;\n}\n```\n\n#### 2. Getter 方法\n\n编译器生成一个名为 `name` 的 getter 方法：\n\n```objective-c\n- (NSString *)name {\n    return _name;\n}\n```\n\n#### 3. Setter 方法\n\n编译器生成一个名为 `setName:` 的 setter 方法：\n\n```objective-c\n- (void)setName:(NSString *)newName {\n    if (_name != newName) {\n        [_name release];\n        _name = [newName retain];\n    }\n}\n```\n\n### `@property` 的属性特性\n\n`@property` 可以通过属性特性来控制生成的 getter 和 setter 的行为。常用的属性特性包括：\n\n- **atomic / nonatomic**：决定属性的原子性。`atomic` 保证多线程环境下的安全，但性能较低；`nonatomic` 性能较高，但不保证线程安全。\n- **strong / weak / assign / copy**：指定属性的内存管理语义。\n- **readonly / readwrite**：指定属性是否只读。默认是 `readwrite`，可以生成 getter 和 setter；`readonly` 只生成 getter。\n- **getter / setter**：指定自定义的 getter 和 setter 方法名。\n\n```objective-c\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, weak) id<Delegate> delegate;\n@property (nonatomic, assign) NSInteger age;\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, readonly) NSString *identifier;\n@property (getter=isValid, setter=setValid:) BOOL valid;\n```\n\n### 实例分析\n\n假设你有以下代码：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, readonly) NSString *identifier;\n\n@end\n\n@implementation MyClass\n\n@synthesize name = _name; // 手动指定实例变量名\n@synthesize identifier = _identifier; // 手动指定只读属性的实例变量名\n\n@end\n```\n\n这段代码：\n\n1. 为 `name` 属性生成 `_name` 实例变量、getter 和 setter 方法。\n2. 为 `identifier` 属性生成 `_identifier` 实例变量和 getter 方法。\n\n如果没有使用 `@synthesize`，编译器会自动合成这些方法和实例变量。\n\n### 总结\n\n`@property` 的本质是一个语法糖，它在编译时自动生成与属性相关的实例变量、getter 和 setter 方法。通过使用 `@property`，开发者可以简化代码，提高可读性和可维护性。理解 `@property` 的本质和工作原理，有助于更好地掌握 Objective-C 的内存管理和编程技巧。","source":"_posts/iOS/OC/001-OC属性、关键字/008-@property的本质是什么？/README.md","raw":"---\ntitle: 请问 @property 的本质是什么？\ndate: {{ date }}\ntags: [iOS, 面试题, property]\n---\n\n<!-- # @property 的本质是什么？ -->\n\n在 Objective-C 中，`@property` 是一种用于声明类的属性的语法糖。**它的本质是帮助开发者自动生成属性的 getter 和 setter 方法，以及属性所需的实例变量（ivar）。**`@property` 使得代码更简洁、可读性更高，并且减少了手动编写 getter 和 setter 方法的繁琐工作。为了更详细地理解 `@property` 的本质，下面从几个方面进行解释：\n\n<!-- more -->\n\n### `@property` 的基本组成部分\n\n当你在类中声明一个属性时：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n```\n\n`@property` 包含以下几个部分：\n\n- **属性特性（Attributes）**：如 `nonatomic`、`strong`，用于指定属性的行为。\n- **类型（Type）**：如 `NSString *`，指定属性的数据类型。\n- **属性名（Name）**：如 `name`，指定属性的名称。\n\n### `@property` 的工作原理\n\n在编译时，`@property` 会生成与之相关的实例变量、getter 和 setter 方法。以上面的例子为例，`@property (nonatomic, strong) NSString *name;` 将生成以下内容：\n\n#### 1. 实例变量\n\n编译器生成一个名为 `_name` 的实例变量（ivar）：\n\n```objective-c\n@interface MyClass : NSObject {\n    NSString *_name;\n}\n```\n\n#### 2. Getter 方法\n\n编译器生成一个名为 `name` 的 getter 方法：\n\n```objective-c\n- (NSString *)name {\n    return _name;\n}\n```\n\n#### 3. Setter 方法\n\n编译器生成一个名为 `setName:` 的 setter 方法：\n\n```objective-c\n- (void)setName:(NSString *)newName {\n    if (_name != newName) {\n        [_name release];\n        _name = [newName retain];\n    }\n}\n```\n\n### `@property` 的属性特性\n\n`@property` 可以通过属性特性来控制生成的 getter 和 setter 的行为。常用的属性特性包括：\n\n- **atomic / nonatomic**：决定属性的原子性。`atomic` 保证多线程环境下的安全，但性能较低；`nonatomic` 性能较高，但不保证线程安全。\n- **strong / weak / assign / copy**：指定属性的内存管理语义。\n- **readonly / readwrite**：指定属性是否只读。默认是 `readwrite`，可以生成 getter 和 setter；`readonly` 只生成 getter。\n- **getter / setter**：指定自定义的 getter 和 setter 方法名。\n\n```objective-c\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, weak) id<Delegate> delegate;\n@property (nonatomic, assign) NSInteger age;\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, readonly) NSString *identifier;\n@property (getter=isValid, setter=setValid:) BOOL valid;\n```\n\n### 实例分析\n\n假设你有以下代码：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, readonly) NSString *identifier;\n\n@end\n\n@implementation MyClass\n\n@synthesize name = _name; // 手动指定实例变量名\n@synthesize identifier = _identifier; // 手动指定只读属性的实例变量名\n\n@end\n```\n\n这段代码：\n\n1. 为 `name` 属性生成 `_name` 实例变量、getter 和 setter 方法。\n2. 为 `identifier` 属性生成 `_identifier` 实例变量和 getter 方法。\n\n如果没有使用 `@synthesize`，编译器会自动合成这些方法和实例变量。\n\n### 总结\n\n`@property` 的本质是一个语法糖，它在编译时自动生成与属性相关的实例变量、getter 和 setter 方法。通过使用 `@property`，开发者可以简化代码，提高可读性和可维护性。理解 `@property` 的本质和工作原理，有助于更好地掌握 Objective-C 的内存管理和编程技巧。","slug":"iOS/OC/001-OC属性、关键字/008-@property的本质是什么？/README","published":1,"updated":"2024-08-06T08:39:45.899Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp940001tdgxrc1g9bkf3","content":"<!-- # @property 的本质是什么？ -->\n\n<p>在 Objective-C 中，<code>@property</code> 是一种用于声明类的属性的语法糖。<strong>它的本质是帮助开发者自动生成属性的 getter 和 setter 方法，以及属性所需的实例变量（ivar）。</strong><code>@property</code> 使得代码更简洁、可读性更高，并且减少了手动编写 getter 和 setter 方法的繁琐工作。为了更详细地理解 <code>@property</code> 的本质，下面从几个方面进行解释：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"property-的基本组成部分\"><a href=\"#property-的基本组成部分\" class=\"headerlink\" title=\"@property 的基本组成部分\"></a><code>@property</code> 的基本组成部分</h3><p>当你在类中声明一个属性时：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<p><code>@property</code> 包含以下几个部分：</p>\n<ul>\n<li><strong>属性特性（Attributes）</strong>：如 <code>nonatomic</code>、<code>strong</code>，用于指定属性的行为。</li>\n<li><strong>类型（Type）</strong>：如 <code>NSString *</code>，指定属性的数据类型。</li>\n<li><strong>属性名（Name）</strong>：如 <code>name</code>，指定属性的名称。</li>\n</ul>\n<h3 id=\"property-的工作原理\"><a href=\"#property-的工作原理\" class=\"headerlink\" title=\"@property 的工作原理\"></a><code>@property</code> 的工作原理</h3><p>在编译时，<code>@property</code> 会生成与之相关的实例变量、getter 和 setter 方法。以上面的例子为例，<code>@property (nonatomic, strong) NSString *name;</code> 将生成以下内容：</p>\n<h4 id=\"1-实例变量\"><a href=\"#1-实例变量\" class=\"headerlink\" title=\"1. 实例变量\"></a>1. 实例变量</h4><p>编译器生成一个名为 <code>_name</code> 的实例变量（ivar）：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject &#123;</span><br><span class=\"line\">    NSString *_name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-Getter-方法\"><a href=\"#2-Getter-方法\" class=\"headerlink\" title=\"2. Getter 方法\"></a>2. Getter 方法</h4><p>编译器生成一个名为 <code>name</code> 的 getter 方法：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-Setter-方法\"><a href=\"#3-Setter-方法\" class=\"headerlink\" title=\"3. Setter 方法\"></a>3. Setter 方法</h4><p>编译器生成一个名为 <code>setName:</code> 的 setter 方法：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)newName &#123;</span><br><span class=\"line\">    if (_name != newName) &#123;</span><br><span class=\"line\">        [_name release];</span><br><span class=\"line\">        _name = [newName retain];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"property-的属性特性\"><a href=\"#property-的属性特性\" class=\"headerlink\" title=\"@property 的属性特性\"></a><code>@property</code> 的属性特性</h3><p><code>@property</code> 可以通过属性特性来控制生成的 getter 和 setter 的行为。常用的属性特性包括：</p>\n<ul>\n<li><strong>atomic &#x2F; nonatomic</strong>：决定属性的原子性。<code>atomic</code> 保证多线程环境下的安全，但性能较低；<code>nonatomic</code> 性能较高，但不保证线程安全。</li>\n<li><strong>strong &#x2F; weak &#x2F; assign &#x2F; copy</strong>：指定属性的内存管理语义。</li>\n<li><strong>readonly &#x2F; readwrite</strong>：指定属性是否只读。默认是 <code>readwrite</code>，可以生成 getter 和 setter；<code>readonly</code> 只生成 getter。</li>\n<li><strong>getter &#x2F; setter</strong>：指定自定义的 getter 和 setter 方法名。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br><span class=\"line\">@property (getter=isValid, setter=setValid:) BOOL valid;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h3><p>假设你有以下代码：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">@synthesize name = _name; // 手动指定实例变量名</span><br><span class=\"line\">@synthesize identifier = _identifier; // 手动指定只读属性的实例变量名</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<p>这段代码：</p>\n<ol>\n<li>为 <code>name</code> 属性生成 <code>_name</code> 实例变量、getter 和 setter 方法。</li>\n<li>为 <code>identifier</code> 属性生成 <code>_identifier</code> 实例变量和 getter 方法。</li>\n</ol>\n<p>如果没有使用 <code>@synthesize</code>，编译器会自动合成这些方法和实例变量。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>@property</code> 的本质是一个语法糖，它在编译时自动生成与属性相关的实例变量、getter 和 setter 方法。通过使用 <code>@property</code>，开发者可以简化代码，提高可读性和可维护性。理解 <code>@property</code> 的本质和工作原理，有助于更好地掌握 Objective-C 的内存管理和编程技巧。</p>\n","excerpt":"<!-- # @property 的本质是什么？ -->\n\n<p>在 Objective-C 中，<code>@property</code> 是一种用于声明类的属性的语法糖。<strong>它的本质是帮助开发者自动生成属性的 getter 和 setter 方法，以及属性所需的实例变量（ivar）。</strong><code>@property</code> 使得代码更简洁、可读性更高，并且减少了手动编写 getter 和 setter 方法的繁琐工作。为了更详细地理解 <code>@property</code> 的本质，下面从几个方面进行解释：</p>","more":"<h3 id=\"property-的基本组成部分\"><a href=\"#property-的基本组成部分\" class=\"headerlink\" title=\"@property 的基本组成部分\"></a><code>@property</code> 的基本组成部分</h3><p>当你在类中声明一个属性时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p><code>@property</code> 包含以下几个部分：</p>\n<ul>\n<li><strong>属性特性（Attributes）</strong>：如 <code>nonatomic</code>、<code>strong</code>，用于指定属性的行为。</li>\n<li><strong>类型（Type）</strong>：如 <code>NSString *</code>，指定属性的数据类型。</li>\n<li><strong>属性名（Name）</strong>：如 <code>name</code>，指定属性的名称。</li>\n</ul>\n<h3 id=\"property-的工作原理\"><a href=\"#property-的工作原理\" class=\"headerlink\" title=\"@property 的工作原理\"></a><code>@property</code> 的工作原理</h3><p>在编译时，<code>@property</code> 会生成与之相关的实例变量、getter 和 setter 方法。以上面的例子为例，<code>@property (nonatomic, strong) NSString *name;</code> 将生成以下内容：</p>\n<h4 id=\"1-实例变量\"><a href=\"#1-实例变量\" class=\"headerlink\" title=\"1. 实例变量\"></a>1. 实例变量</h4><p>编译器生成一个名为 <code>_name</code> 的实例变量（ivar）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject &#123;</span><br><span class=\"line\">    NSString *_name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Getter-方法\"><a href=\"#2-Getter-方法\" class=\"headerlink\" title=\"2. Getter 方法\"></a>2. Getter 方法</h4><p>编译器生成一个名为 <code>name</code> 的 getter 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Setter-方法\"><a href=\"#3-Setter-方法\" class=\"headerlink\" title=\"3. Setter 方法\"></a>3. Setter 方法</h4><p>编译器生成一个名为 <code>setName:</code> 的 setter 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)newName &#123;</span><br><span class=\"line\">    if (_name != newName) &#123;</span><br><span class=\"line\">        [_name release];</span><br><span class=\"line\">        _name = [newName retain];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"property-的属性特性\"><a href=\"#property-的属性特性\" class=\"headerlink\" title=\"@property 的属性特性\"></a><code>@property</code> 的属性特性</h3><p><code>@property</code> 可以通过属性特性来控制生成的 getter 和 setter 的行为。常用的属性特性包括：</p>\n<ul>\n<li><strong>atomic &#x2F; nonatomic</strong>：决定属性的原子性。<code>atomic</code> 保证多线程环境下的安全，但性能较低；<code>nonatomic</code> 性能较高，但不保证线程安全。</li>\n<li><strong>strong &#x2F; weak &#x2F; assign &#x2F; copy</strong>：指定属性的内存管理语义。</li>\n<li><strong>readonly &#x2F; readwrite</strong>：指定属性是否只读。默认是 <code>readwrite</code>，可以生成 getter 和 setter；<code>readonly</code> 只生成 getter。</li>\n<li><strong>getter &#x2F; setter</strong>：指定自定义的 getter 和 setter 方法名。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br><span class=\"line\">@property (nonatomic, assign) NSInteger age;</span><br><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br><span class=\"line\">@property (getter=isValid, setter=setValid:) BOOL valid;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h3><p>假设你有以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@property (nonatomic, readonly) NSString *identifier;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">@synthesize name = _name; // 手动指定实例变量名</span><br><span class=\"line\">@synthesize identifier = _identifier; // 手动指定只读属性的实例变量名</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>这段代码：</p>\n<ol>\n<li>为 <code>name</code> 属性生成 <code>_name</code> 实例变量、getter 和 setter 方法。</li>\n<li>为 <code>identifier</code> 属性生成 <code>_identifier</code> 实例变量和 getter 方法。</li>\n</ol>\n<p>如果没有使用 <code>@synthesize</code>，编译器会自动合成这些方法和实例变量。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>@property</code> 的本质是一个语法糖，它在编译时自动生成与属性相关的实例变量、getter 和 setter 方法。通过使用 <code>@property</code>，开发者可以简化代码，提高可读性和可维护性。理解 <code>@property</code> 的本质和工作原理，有助于更好地掌握 Objective-C 的内存管理和编程技巧。</p>"},{"title":"为什么UITableView的delegate属性修饰符assign","date":"2024-07-22T08:01:21.532Z","_content":"\n<!-- # 为什么UITableView的delegate属性修饰符assign -->\n\n在早期的 iOS 开发中，`UITableView` 的 `delegate` 属性使用 `assign` 修饰符是为了避免循环引用（retain cycle）。以下是详细解释：\n\n<!-- more -->\n\n### 循环引用问题\n\n`delegate` 通常用于代理模式，这种模式在 iOS 开发中非常常见。代理对象通常是视图控制器，而被代理的对象是视图组件（如 `UITableView`）。如果 `delegate` 属性使用 `strong` 或 `retain`，会导致以下循环引用：\n\n- 视图控制器（ViewController）持有 `UITableView` 对象的强引用。\n- `UITableView` 对象又通过 `delegate` 属性持有视图控制器的强引用。\n\n这样，两者之间互相持有对方的强引用，导致内存无法释放，形成循环引用（retain cycle）。\n\n### 使用 `assign` 修饰符\n\n为了解决这个问题，`delegate` 属性在早期使用 `assign` 修饰符：\n\n```objective-c\n@property (nonatomic, assign) id<UITableViewDelegate> delegate;\n```\n\n- **assign**：直接赋值，不更改引用计数。这样 `UITableView` 对象对 `delegate`（通常是视图控制器）的引用不会增加引用计数，从而避免了循环引用。\n\n### 从 `assign` 到 `weak`\n\n在ARC（Automatic Reference Counting）引入之后，苹果推荐使用 `weak` 修饰符来代替 `assign`。`weak` 属性不仅可以避免循环引用，还能在目标对象被释放时自动将指针置为 `nil`，避免悬空指针（dangling pointer）的问题。\n\n因此，现代的 iOS 开发中，`UITableView` 的 `delegate` 属性一般使用 `weak` 修饰符：\n\n```objective-c\n@property (nonatomic, weak) id<UITableViewDelegate> delegate;\n```\n\n这样，`UITableView` 对 `delegate` 的引用不会增加引用计数，并且在 `delegate` 被释放时自动置为 `nil`，更加安全。\n\n### 总结\n\n- 早期的 `delegate` 属性使用 `assign` 是为了避免循环引用，防止内存泄漏。\n- ARC 引入后，推荐使用 `weak` 修饰符，既避免循环引用，又防止悬空指针问题。\n\n因此，在现代 iOS 开发中，`UITableView` 和其他视图组件的 `delegate` 属性通常使用 `weak` 修饰符。","source":"_posts/iOS/OC/001-OC属性、关键字/004-为什么UITableView的delegate属性修饰符assign/README.md","raw":"---\ntitle: 为什么UITableView的delegate属性修饰符assign\ndate: {{ date }}\ntags: [iOS, 面试题, delegate, UITableView, assign]\n---\n\n<!-- # 为什么UITableView的delegate属性修饰符assign -->\n\n在早期的 iOS 开发中，`UITableView` 的 `delegate` 属性使用 `assign` 修饰符是为了避免循环引用（retain cycle）。以下是详细解释：\n\n<!-- more -->\n\n### 循环引用问题\n\n`delegate` 通常用于代理模式，这种模式在 iOS 开发中非常常见。代理对象通常是视图控制器，而被代理的对象是视图组件（如 `UITableView`）。如果 `delegate` 属性使用 `strong` 或 `retain`，会导致以下循环引用：\n\n- 视图控制器（ViewController）持有 `UITableView` 对象的强引用。\n- `UITableView` 对象又通过 `delegate` 属性持有视图控制器的强引用。\n\n这样，两者之间互相持有对方的强引用，导致内存无法释放，形成循环引用（retain cycle）。\n\n### 使用 `assign` 修饰符\n\n为了解决这个问题，`delegate` 属性在早期使用 `assign` 修饰符：\n\n```objective-c\n@property (nonatomic, assign) id<UITableViewDelegate> delegate;\n```\n\n- **assign**：直接赋值，不更改引用计数。这样 `UITableView` 对象对 `delegate`（通常是视图控制器）的引用不会增加引用计数，从而避免了循环引用。\n\n### 从 `assign` 到 `weak`\n\n在ARC（Automatic Reference Counting）引入之后，苹果推荐使用 `weak` 修饰符来代替 `assign`。`weak` 属性不仅可以避免循环引用，还能在目标对象被释放时自动将指针置为 `nil`，避免悬空指针（dangling pointer）的问题。\n\n因此，现代的 iOS 开发中，`UITableView` 的 `delegate` 属性一般使用 `weak` 修饰符：\n\n```objective-c\n@property (nonatomic, weak) id<UITableViewDelegate> delegate;\n```\n\n这样，`UITableView` 对 `delegate` 的引用不会增加引用计数，并且在 `delegate` 被释放时自动置为 `nil`，更加安全。\n\n### 总结\n\n- 早期的 `delegate` 属性使用 `assign` 是为了避免循环引用，防止内存泄漏。\n- ARC 引入后，推荐使用 `weak` 修饰符，既避免循环引用，又防止悬空指针问题。\n\n因此，在现代 iOS 开发中，`UITableView` 和其他视图组件的 `delegate` 属性通常使用 `weak` 修饰符。","slug":"iOS/OC/001-OC属性、关键字/004-为什么UITableView的delegate属性修饰符assign/README","published":1,"updated":"2024-08-06T08:39:31.012Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp941001wdgxr4lo81tsl","content":"<!-- # 为什么UITableView的delegate属性修饰符assign -->\n\n<p>在早期的 iOS 开发中，<code>UITableView</code> 的 <code>delegate</code> 属性使用 <code>assign</code> 修饰符是为了避免循环引用（retain cycle）。以下是详细解释：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h3><p><code>delegate</code> 通常用于代理模式，这种模式在 iOS 开发中非常常见。代理对象通常是视图控制器，而被代理的对象是视图组件（如 <code>UITableView</code>）。如果 <code>delegate</code> 属性使用 <code>strong</code> 或 <code>retain</code>，会导致以下循环引用：</p>\n<ul>\n<li>视图控制器（ViewController）持有 <code>UITableView</code> 对象的强引用。</li>\n<li><code>UITableView</code> 对象又通过 <code>delegate</code> 属性持有视图控制器的强引用。</li>\n</ul>\n<p>这样，两者之间互相持有对方的强引用，导致内存无法释放，形成循环引用（retain cycle）。</p>\n<h3 id=\"使用-assign-修饰符\"><a href=\"#使用-assign-修饰符\" class=\"headerlink\" title=\"使用 assign 修饰符\"></a>使用 <code>assign</code> 修饰符</h3><p>为了解决这个问题，<code>delegate</code> 属性在早期使用 <code>assign</code> 修饰符：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) id&lt;UITableViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><strong>assign</strong>：直接赋值，不更改引用计数。这样 <code>UITableView</code> 对象对 <code>delegate</code>（通常是视图控制器）的引用不会增加引用计数，从而避免了循环引用。</li>\n</ul>\n<h3 id=\"从-assign-到-weak\"><a href=\"#从-assign-到-weak\" class=\"headerlink\" title=\"从 assign 到 weak\"></a>从 <code>assign</code> 到 <code>weak</code></h3><p>在ARC（Automatic Reference Counting）引入之后，苹果推荐使用 <code>weak</code> 修饰符来代替 <code>assign</code>。<code>weak</code> 属性不仅可以避免循环引用，还能在目标对象被释放时自动将指针置为 <code>nil</code>，避免悬空指针（dangling pointer）的问题。</p>\n<p>因此，现代的 iOS 开发中，<code>UITableView</code> 的 <code>delegate</code> 属性一般使用 <code>weak</code> 修饰符：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id&lt;UITableViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></div>\n\n<p>这样，<code>UITableView</code> 对 <code>delegate</code> 的引用不会增加引用计数，并且在 <code>delegate</code> 被释放时自动置为 <code>nil</code>，更加安全。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>早期的 <code>delegate</code> 属性使用 <code>assign</code> 是为了避免循环引用，防止内存泄漏。</li>\n<li>ARC 引入后，推荐使用 <code>weak</code> 修饰符，既避免循环引用，又防止悬空指针问题。</li>\n</ul>\n<p>因此，在现代 iOS 开发中，<code>UITableView</code> 和其他视图组件的 <code>delegate</code> 属性通常使用 <code>weak</code> 修饰符。</p>\n","excerpt":"<!-- # 为什么UITableView的delegate属性修饰符assign -->\n\n<p>在早期的 iOS 开发中，<code>UITableView</code> 的 <code>delegate</code> 属性使用 <code>assign</code> 修饰符是为了避免循环引用（retain cycle）。以下是详细解释：</p>","more":"<h3 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h3><p><code>delegate</code> 通常用于代理模式，这种模式在 iOS 开发中非常常见。代理对象通常是视图控制器，而被代理的对象是视图组件（如 <code>UITableView</code>）。如果 <code>delegate</code> 属性使用 <code>strong</code> 或 <code>retain</code>，会导致以下循环引用：</p>\n<ul>\n<li>视图控制器（ViewController）持有 <code>UITableView</code> 对象的强引用。</li>\n<li><code>UITableView</code> 对象又通过 <code>delegate</code> 属性持有视图控制器的强引用。</li>\n</ul>\n<p>这样，两者之间互相持有对方的强引用，导致内存无法释放，形成循环引用（retain cycle）。</p>\n<h3 id=\"使用-assign-修饰符\"><a href=\"#使用-assign-修饰符\" class=\"headerlink\" title=\"使用 assign 修饰符\"></a>使用 <code>assign</code> 修饰符</h3><p>为了解决这个问题，<code>delegate</code> 属性在早期使用 <code>assign</code> 修饰符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, assign) id&lt;UITableViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>assign</strong>：直接赋值，不更改引用计数。这样 <code>UITableView</code> 对象对 <code>delegate</code>（通常是视图控制器）的引用不会增加引用计数，从而避免了循环引用。</li>\n</ul>\n<h3 id=\"从-assign-到-weak\"><a href=\"#从-assign-到-weak\" class=\"headerlink\" title=\"从 assign 到 weak\"></a>从 <code>assign</code> 到 <code>weak</code></h3><p>在ARC（Automatic Reference Counting）引入之后，苹果推荐使用 <code>weak</code> 修饰符来代替 <code>assign</code>。<code>weak</code> 属性不仅可以避免循环引用，还能在目标对象被释放时自动将指针置为 <code>nil</code>，避免悬空指针（dangling pointer）的问题。</p>\n<p>因此，现代的 iOS 开发中，<code>UITableView</code> 的 <code>delegate</code> 属性一般使用 <code>weak</code> 修饰符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id&lt;UITableViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure>\n\n<p>这样，<code>UITableView</code> 对 <code>delegate</code> 的引用不会增加引用计数，并且在 <code>delegate</code> 被释放时自动置为 <code>nil</code>，更加安全。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>早期的 <code>delegate</code> 属性使用 <code>assign</code> 是为了避免循环引用，防止内存泄漏。</li>\n<li>ARC 引入后，推荐使用 <code>weak</code> 修饰符，既避免循环引用，又防止悬空指针问题。</li>\n</ul>\n<p>因此，在现代 iOS 开发中，<code>UITableView</code> 和其他视图组件的 <code>delegate</code> 属性通常使用 <code>weak</code> 修饰符。</p>"},{"title":"请问 @synthesize 和 @dynamic 分别有什么作用？","date":"2024-07-22T08:01:21.648Z","_content":"\n<!-- # @synthesize 和 @dynamic 分别有什么作用？ -->\n\n在 Objective-C 中，`@synthesize` 和 `@dynamic` 是用来辅助属性（`@property`）的实现的关键字。它们在处理属性的 getter 和 setter 方法时具有不同的作用和用途。\n\n<!-- more -->\n\n### `@synthesize`\n\n`@synthesize` 用于自动生成属性的 getter 和 setter 方法。如果你不手动实现这些方法，编译器会根据 `@synthesize` 来生成默认的实现。使用 `@synthesize` 时，你还可以指定属性的实例变量名。\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n// 自动生成 _name 实例变量、getter 和 setter 方法\n@synthesize name = _name;\n\n@end\n```\n\n#### 作用\n- **自动生成 getter 和 setter 方法**：`@synthesize` 告诉编译器自动为属性生成相应的 getter 和 setter 方法。\n- **指定实例变量名**：可以用 `@synthesize propertyName = instanceVariableName` 的形式来指定属性对应的实例变量名。\n\n#### 默认行为\n如果不显式使用 `@synthesize`，编译器会默认合成实例变量和相应的 getter、setter 方法：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n// 默认情况下，编译器会自动生成 _name 实例变量和方法\n\n@end\n```\n\n### `@dynamic`\n\n`@dynamic` 告诉编译器不要自动生成属性的 getter 和 setter 方法，开发者需要在运行时动态地提供这些方法的实现。通常用于 Core Data 或其他需要在运行时动态处理属性的场景。\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n@dynamic name;\n\n@end\n```\n\n#### 作用\n- **禁用自动生成**：`@dynamic` 禁用编译器对属性自动生成的 getter 和 setter 方法。\n- **运行时提供实现**：开发者需要在运行时通过手动实现或其他方式提供 getter 和 setter 方法。\n\n#### 使用场景\n- **Core Data**：在使用 Core Data 时，属性的实现通常由 Core Data 动态提供，而不是由编译器自动生成。\n- **动态方法解析**：在某些高级用例中，开发者可能需要使用 `@dynamic` 并手动实现 `resolveInstanceMethod:` 或消息转发机制。\n\n### 总结\n\n- **`@synthesize`**：\n  - 用于自动生成属性的 getter 和 setter 方法。\n  - 可以指定属性的实例变量名。\n  - 如果不显式使用，编译器会默认合成。\n\n- **`@dynamic`**：\n  - 告诉编译器不要自动生成 getter 和 setter 方法。\n  - 需要在运行时动态提供方法的实现。\n  - 通常用于 Core Data 或其他需要动态处理属性的场景。\n\n通过理解 `@synthesize` 和 `@dynamic` 的作用和使用场景，开发者可以更灵活地管理属性的实现，满足不同的编程需求。","source":"_posts/iOS/OC/001-OC属性、关键字/009-@synthesize和@dynamic分别有什么作用？/README.md","raw":"---\ntitle: 请问 @synthesize 和 @dynamic 分别有什么作用？\ndate: {{ date }}\ntags: [iOS, 面试题, synthesize, dynamic]\n---\n\n<!-- # @synthesize 和 @dynamic 分别有什么作用？ -->\n\n在 Objective-C 中，`@synthesize` 和 `@dynamic` 是用来辅助属性（`@property`）的实现的关键字。它们在处理属性的 getter 和 setter 方法时具有不同的作用和用途。\n\n<!-- more -->\n\n### `@synthesize`\n\n`@synthesize` 用于自动生成属性的 getter 和 setter 方法。如果你不手动实现这些方法，编译器会根据 `@synthesize` 来生成默认的实现。使用 `@synthesize` 时，你还可以指定属性的实例变量名。\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n// 自动生成 _name 实例变量、getter 和 setter 方法\n@synthesize name = _name;\n\n@end\n```\n\n#### 作用\n- **自动生成 getter 和 setter 方法**：`@synthesize` 告诉编译器自动为属性生成相应的 getter 和 setter 方法。\n- **指定实例变量名**：可以用 `@synthesize propertyName = instanceVariableName` 的形式来指定属性对应的实例变量名。\n\n#### 默认行为\n如果不显式使用 `@synthesize`，编译器会默认合成实例变量和相应的 getter、setter 方法：\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n// 默认情况下，编译器会自动生成 _name 实例变量和方法\n\n@end\n```\n\n### `@dynamic`\n\n`@dynamic` 告诉编译器不要自动生成属性的 getter 和 setter 方法，开发者需要在运行时动态地提供这些方法的实现。通常用于 Core Data 或其他需要在运行时动态处理属性的场景。\n\n```objective-c\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n@dynamic name;\n\n@end\n```\n\n#### 作用\n- **禁用自动生成**：`@dynamic` 禁用编译器对属性自动生成的 getter 和 setter 方法。\n- **运行时提供实现**：开发者需要在运行时通过手动实现或其他方式提供 getter 和 setter 方法。\n\n#### 使用场景\n- **Core Data**：在使用 Core Data 时，属性的实现通常由 Core Data 动态提供，而不是由编译器自动生成。\n- **动态方法解析**：在某些高级用例中，开发者可能需要使用 `@dynamic` 并手动实现 `resolveInstanceMethod:` 或消息转发机制。\n\n### 总结\n\n- **`@synthesize`**：\n  - 用于自动生成属性的 getter 和 setter 方法。\n  - 可以指定属性的实例变量名。\n  - 如果不显式使用，编译器会默认合成。\n\n- **`@dynamic`**：\n  - 告诉编译器不要自动生成 getter 和 setter 方法。\n  - 需要在运行时动态提供方法的实现。\n  - 通常用于 Core Data 或其他需要动态处理属性的场景。\n\n通过理解 `@synthesize` 和 `@dynamic` 的作用和使用场景，开发者可以更灵活地管理属性的实现，满足不同的编程需求。","slug":"iOS/OC/001-OC属性、关键字/009-@synthesize和@dynamic分别有什么作用？/README","published":1,"updated":"2024-08-06T08:39:49.575Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp941001xdgxr2jm13nbd","content":"<!-- # @synthesize 和 @dynamic 分别有什么作用？ -->\n\n<p>在 Objective-C 中，<code>@synthesize</code> 和 <code>@dynamic</code> 是用来辅助属性（<code>@property</code>）的实现的关键字。它们在处理属性的 getter 和 setter 方法时具有不同的作用和用途。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"synthesize\"><a href=\"#synthesize\" class=\"headerlink\" title=\"@synthesize\"></a><code>@synthesize</code></h3><p><code>@synthesize</code> 用于自动生成属性的 getter 和 setter 方法。如果你不手动实现这些方法，编译器会根据 <code>@synthesize</code> 来生成默认的实现。使用 <code>@synthesize</code> 时，你还可以指定属性的实例变量名。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 自动生成 _name 实例变量、getter 和 setter 方法</span><br><span class=\"line\">@synthesize name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li><strong>自动生成 getter 和 setter 方法</strong>：<code>@synthesize</code> 告诉编译器自动为属性生成相应的 getter 和 setter 方法。</li>\n<li><strong>指定实例变量名</strong>：可以用 <code>@synthesize propertyName = instanceVariableName</code> 的形式来指定属性对应的实例变量名。</li>\n</ul>\n<h4 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h4><p>如果不显式使用 <code>@synthesize</code>，编译器会默认合成实例变量和相应的 getter、setter 方法：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认情况下，编译器会自动生成 _name 实例变量和方法</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"dynamic\"><a href=\"#dynamic\" class=\"headerlink\" title=\"@dynamic\"></a><code>@dynamic</code></h3><p><code>@dynamic</code> 告诉编译器不要自动生成属性的 getter 和 setter 方法，开发者需要在运行时动态地提供这些方法的实现。通常用于 Core Data 或其他需要在运行时动态处理属性的场景。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">@dynamic name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li><strong>禁用自动生成</strong>：<code>@dynamic</code> 禁用编译器对属性自动生成的 getter 和 setter 方法。</li>\n<li><strong>运行时提供实现</strong>：开发者需要在运行时通过手动实现或其他方式提供 getter 和 setter 方法。</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li><strong>Core Data</strong>：在使用 Core Data 时，属性的实现通常由 Core Data 动态提供，而不是由编译器自动生成。</li>\n<li><strong>动态方法解析</strong>：在某些高级用例中，开发者可能需要使用 <code>@dynamic</code> 并手动实现 <code>resolveInstanceMethod:</code> 或消息转发机制。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>**<code>@synthesize</code>**：</p>\n<ul>\n<li>用于自动生成属性的 getter 和 setter 方法。</li>\n<li>可以指定属性的实例变量名。</li>\n<li>如果不显式使用，编译器会默认合成。</li>\n</ul>\n</li>\n<li><p>**<code>@dynamic</code>**：</p>\n<ul>\n<li>告诉编译器不要自动生成 getter 和 setter 方法。</li>\n<li>需要在运行时动态提供方法的实现。</li>\n<li>通常用于 Core Data 或其他需要动态处理属性的场景。</li>\n</ul>\n</li>\n</ul>\n<p>通过理解 <code>@synthesize</code> 和 <code>@dynamic</code> 的作用和使用场景，开发者可以更灵活地管理属性的实现，满足不同的编程需求。</p>\n","excerpt":"<!-- # @synthesize 和 @dynamic 分别有什么作用？ -->\n\n<p>在 Objective-C 中，<code>@synthesize</code> 和 <code>@dynamic</code> 是用来辅助属性（<code>@property</code>）的实现的关键字。它们在处理属性的 getter 和 setter 方法时具有不同的作用和用途。</p>","more":"<h3 id=\"synthesize\"><a href=\"#synthesize\" class=\"headerlink\" title=\"@synthesize\"></a><code>@synthesize</code></h3><p><code>@synthesize</code> 用于自动生成属性的 getter 和 setter 方法。如果你不手动实现这些方法，编译器会根据 <code>@synthesize</code> 来生成默认的实现。使用 <code>@synthesize</code> 时，你还可以指定属性的实例变量名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 自动生成 _name 实例变量、getter 和 setter 方法</span><br><span class=\"line\">@synthesize name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li><strong>自动生成 getter 和 setter 方法</strong>：<code>@synthesize</code> 告诉编译器自动为属性生成相应的 getter 和 setter 方法。</li>\n<li><strong>指定实例变量名</strong>：可以用 <code>@synthesize propertyName = instanceVariableName</code> 的形式来指定属性对应的实例变量名。</li>\n</ul>\n<h4 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h4><p>如果不显式使用 <code>@synthesize</code>，编译器会默认合成实例变量和相应的 getter、setter 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 默认情况下，编译器会自动生成 _name 实例变量和方法</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dynamic\"><a href=\"#dynamic\" class=\"headerlink\" title=\"@dynamic\"></a><code>@dynamic</code></h3><p><code>@dynamic</code> 告诉编译器不要自动生成属性的 getter 和 setter 方法，开发者需要在运行时动态地提供这些方法的实现。通常用于 Core Data 或其他需要在运行时动态处理属性的场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\"></span><br><span class=\"line\">@dynamic name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li><strong>禁用自动生成</strong>：<code>@dynamic</code> 禁用编译器对属性自动生成的 getter 和 setter 方法。</li>\n<li><strong>运行时提供实现</strong>：开发者需要在运行时通过手动实现或其他方式提供 getter 和 setter 方法。</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li><strong>Core Data</strong>：在使用 Core Data 时，属性的实现通常由 Core Data 动态提供，而不是由编译器自动生成。</li>\n<li><strong>动态方法解析</strong>：在某些高级用例中，开发者可能需要使用 <code>@dynamic</code> 并手动实现 <code>resolveInstanceMethod:</code> 或消息转发机制。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>**<code>@synthesize</code>**：</p>\n<ul>\n<li>用于自动生成属性的 getter 和 setter 方法。</li>\n<li>可以指定属性的实例变量名。</li>\n<li>如果不显式使用，编译器会默认合成。</li>\n</ul>\n</li>\n<li><p>**<code>@dynamic</code>**：</p>\n<ul>\n<li>告诉编译器不要自动生成 getter 和 setter 方法。</li>\n<li>需要在运行时动态提供方法的实现。</li>\n<li>通常用于 Core Data 或其他需要动态处理属性的场景。</li>\n</ul>\n</li>\n</ul>\n<p>通过理解 <code>@synthesize</code> 和 <code>@dynamic</code> 的作用和使用场景，开发者可以更灵活地管理属性的实现，满足不同的编程需求。</p>"},{"title":"对象回收时 weak 指针自动被置为 nil 是如何实现的？","date":"2024-07-22T08:01:21.666Z","_content":"\n<!-- # 对象回收时 weak 指针自动被置为 nil 是如何实现的？ -->\n\n在 iOS的自动引用计数（ARC）机制中，当对象被回收时，所有指向该对象的 `__weak` 指针都会被自动置为 `nil`。这个功能是通过Objective-C运行时（runtime）的弱引用表（weak reference table）实现的。以下是实现这一功能的详细机制：\n\n<!-- more -->\n\n### 1. 弱引用表（Weak Reference Table）\n\nObjective-C运行时维护了一张全局的弱引用表，这张表记录了所有的弱引用。当创建一个弱引用时，这个弱引用会被添加到弱引用表中。\n\n### 2. 创建弱引用\n\n当你创建一个弱引用时，例如：\n\n```objective-c\n__weak MyClass *weakRef = strongRef;\n```\n\nARC 会在弱引用表中添加一个条目，记录 `weakRef` 指向的对象地址以及 `weakRef` 本身的地址。这个条目让运行时知道哪些弱引用指向了某个对象。\n\n### 3. 对象销毁\n\n当一个对象的引用计数降到零时，ARC 会释放这个对象。在释放对象之前，运行时会查阅弱引用表，找到所有指向这个对象的弱引用，并将它们置为 `nil`。\n\n### 4. 实现细节\n\n具体实现涉及以下步骤：\n\n- **添加弱引用**：\n  当创建弱引用时，ARC 通过调用 `objc_storeWeak` 函数将弱引用存储在弱引用表中。\n\n- **释放对象**：\n  当对象引用计数降到零时，ARC 通过调用 `objc_release` 函数来处理对象的释放。在释放之前，会调用 `clearDeallocating` 函数。\n\n- **清理弱引用**：\n  `clearDeallocating` 函数会查找弱引用表中所有指向即将销毁的对象的弱引用，并将它们置为 `nil`。这个过程包括以下步骤：\n  - 查找弱引用表中的条目。\n  - 将每个弱引用的值设置为 `nil`。\n  - 从弱引用表中移除这些条目。\n\n### 代码示例\n\n以下是一个简单的示例，演示了弱引用自动置为 `nil` 的行为：\n\n```objective-c\n#import <Foundation/Foundation.h>\n\n@interface MyClass : NSObject\n@end\n\n@implementation MyClass\n- (void)dealloc {\n    NSLog(@\"MyClass instance is being deallocated\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *strongRef = [[MyClass alloc] init];\n        __weak MyClass *weakRef = strongRef;\n        \n        NSLog(@\"Before setting strongRef to nil: weakRef = %@\", weakRef);\n        \n        strongRef = nil; // MyClass instance is deallocated\n        \n        NSLog(@\"After setting strongRef to nil: weakRef = %@\", weakRef);\n    }\n    return 0;\n}\n```\n\n输出：\n\n```\nBefore setting strongRef to nil: weakRef = <MyClass: 0x100508ee0>\nMyClass instance is being deallocated\nAfter setting strongRef to nil: weakRef = (null)\n```\n\n### 内部机制\n\n以下是一些关键函数和概念，用于实现弱引用自动置为 `nil` 的机制：\n\n- **objc_storeWeak**：\n  这个函数用于存储弱引用，并在弱引用表中注册这个弱引用。\n\n- **clearDeallocating**：\n  当对象引用计数降到零时，这个函数会被调用，用于清理弱引用表中的条目。\n\n- **弱引用表**：\n  运行时维护的全局哈希表，用于存储所有弱引用的地址和它们指向的对象。\n\n### 总结\n\n弱引用自动置为 `nil` 的机制是通过 Objective-C 运行时的弱引用表实现的。当对象被回收时，运行时会查找并清理所有指向该对象的弱引用，将它们置为 `nil`。这个机制确保了弱引用不会悬挂，避免了潜在的崩溃和未定义行为。理解这一机制有助于更好地掌握 ARC 和内存管理。","source":"_posts/iOS/OC/001-OC属性、关键字/010-weak指针被自动置为nil是如何实现？/README.md","raw":"---\ntitle: 对象回收时 weak 指针自动被置为 nil 是如何实现的？\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- weak\n---\n\n<!-- # 对象回收时 weak 指针自动被置为 nil 是如何实现的？ -->\n\n在 iOS的自动引用计数（ARC）机制中，当对象被回收时，所有指向该对象的 `__weak` 指针都会被自动置为 `nil`。这个功能是通过Objective-C运行时（runtime）的弱引用表（weak reference table）实现的。以下是实现这一功能的详细机制：\n\n<!-- more -->\n\n### 1. 弱引用表（Weak Reference Table）\n\nObjective-C运行时维护了一张全局的弱引用表，这张表记录了所有的弱引用。当创建一个弱引用时，这个弱引用会被添加到弱引用表中。\n\n### 2. 创建弱引用\n\n当你创建一个弱引用时，例如：\n\n```objective-c\n__weak MyClass *weakRef = strongRef;\n```\n\nARC 会在弱引用表中添加一个条目，记录 `weakRef` 指向的对象地址以及 `weakRef` 本身的地址。这个条目让运行时知道哪些弱引用指向了某个对象。\n\n### 3. 对象销毁\n\n当一个对象的引用计数降到零时，ARC 会释放这个对象。在释放对象之前，运行时会查阅弱引用表，找到所有指向这个对象的弱引用，并将它们置为 `nil`。\n\n### 4. 实现细节\n\n具体实现涉及以下步骤：\n\n- **添加弱引用**：\n  当创建弱引用时，ARC 通过调用 `objc_storeWeak` 函数将弱引用存储在弱引用表中。\n\n- **释放对象**：\n  当对象引用计数降到零时，ARC 通过调用 `objc_release` 函数来处理对象的释放。在释放之前，会调用 `clearDeallocating` 函数。\n\n- **清理弱引用**：\n  `clearDeallocating` 函数会查找弱引用表中所有指向即将销毁的对象的弱引用，并将它们置为 `nil`。这个过程包括以下步骤：\n  - 查找弱引用表中的条目。\n  - 将每个弱引用的值设置为 `nil`。\n  - 从弱引用表中移除这些条目。\n\n### 代码示例\n\n以下是一个简单的示例，演示了弱引用自动置为 `nil` 的行为：\n\n```objective-c\n#import <Foundation/Foundation.h>\n\n@interface MyClass : NSObject\n@end\n\n@implementation MyClass\n- (void)dealloc {\n    NSLog(@\"MyClass instance is being deallocated\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *strongRef = [[MyClass alloc] init];\n        __weak MyClass *weakRef = strongRef;\n        \n        NSLog(@\"Before setting strongRef to nil: weakRef = %@\", weakRef);\n        \n        strongRef = nil; // MyClass instance is deallocated\n        \n        NSLog(@\"After setting strongRef to nil: weakRef = %@\", weakRef);\n    }\n    return 0;\n}\n```\n\n输出：\n\n```\nBefore setting strongRef to nil: weakRef = <MyClass: 0x100508ee0>\nMyClass instance is being deallocated\nAfter setting strongRef to nil: weakRef = (null)\n```\n\n### 内部机制\n\n以下是一些关键函数和概念，用于实现弱引用自动置为 `nil` 的机制：\n\n- **objc_storeWeak**：\n  这个函数用于存储弱引用，并在弱引用表中注册这个弱引用。\n\n- **clearDeallocating**：\n  当对象引用计数降到零时，这个函数会被调用，用于清理弱引用表中的条目。\n\n- **弱引用表**：\n  运行时维护的全局哈希表，用于存储所有弱引用的地址和它们指向的对象。\n\n### 总结\n\n弱引用自动置为 `nil` 的机制是通过 Objective-C 运行时的弱引用表实现的。当对象被回收时，运行时会查找并清理所有指向该对象的弱引用，将它们置为 `nil`。这个机制确保了弱引用不会悬挂，避免了潜在的崩溃和未定义行为。理解这一机制有助于更好地掌握 ARC 和内存管理。","slug":"iOS/OC/001-OC属性、关键字/010-weak指针被自动置为nil是如何实现？/README","published":1,"updated":"2024-08-06T08:39:53.709Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp9420021dgxr24qeg8ec","content":"<!-- # 对象回收时 weak 指针自动被置为 nil 是如何实现的？ -->\n\n<p>在 iOS的自动引用计数（ARC）机制中，当对象被回收时，所有指向该对象的 <code>__weak</code> 指针都会被自动置为 <code>nil</code>。这个功能是通过Objective-C运行时（runtime）的弱引用表（weak reference table）实现的。以下是实现这一功能的详细机制：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-弱引用表（Weak-Reference-Table）\"><a href=\"#1-弱引用表（Weak-Reference-Table）\" class=\"headerlink\" title=\"1. 弱引用表（Weak Reference Table）\"></a>1. 弱引用表（Weak Reference Table）</h3><p>Objective-C运行时维护了一张全局的弱引用表，这张表记录了所有的弱引用。当创建一个弱引用时，这个弱引用会被添加到弱引用表中。</p>\n<h3 id=\"2-创建弱引用\"><a href=\"#2-创建弱引用\" class=\"headerlink\" title=\"2. 创建弱引用\"></a>2. 创建弱引用</h3><p>当你创建一个弱引用时，例如：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak MyClass *weakRef = strongRef;</span><br></pre></td></tr></table></figure></div>\n\n<p>ARC 会在弱引用表中添加一个条目，记录 <code>weakRef</code> 指向的对象地址以及 <code>weakRef</code> 本身的地址。这个条目让运行时知道哪些弱引用指向了某个对象。</p>\n<h3 id=\"3-对象销毁\"><a href=\"#3-对象销毁\" class=\"headerlink\" title=\"3. 对象销毁\"></a>3. 对象销毁</h3><p>当一个对象的引用计数降到零时，ARC 会释放这个对象。在释放对象之前，运行时会查阅弱引用表，找到所有指向这个对象的弱引用，并将它们置为 <code>nil</code>。</p>\n<h3 id=\"4-实现细节\"><a href=\"#4-实现细节\" class=\"headerlink\" title=\"4. 实现细节\"></a>4. 实现细节</h3><p>具体实现涉及以下步骤：</p>\n<ul>\n<li><p><strong>添加弱引用</strong>：<br>当创建弱引用时，ARC 通过调用 <code>objc_storeWeak</code> 函数将弱引用存储在弱引用表中。</p>\n</li>\n<li><p><strong>释放对象</strong>：<br>当对象引用计数降到零时，ARC 通过调用 <code>objc_release</code> 函数来处理对象的释放。在释放之前，会调用 <code>clearDeallocating</code> 函数。</p>\n</li>\n<li><p><strong>清理弱引用</strong>：<br><code>clearDeallocating</code> 函数会查找弱引用表中所有指向即将销毁的对象的弱引用，并将它们置为 <code>nil</code>。这个过程包括以下步骤：</p>\n<ul>\n<li>查找弱引用表中的条目。</li>\n<li>将每个弱引用的值设置为 <code>nil</code>。</li>\n<li>从弱引用表中移除这些条目。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><p>以下是一个简单的示例，演示了弱引用自动置为 <code>nil</code> 的行为：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">    NSLog(@&quot;MyClass instance is being deallocated&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        MyClass *strongRef = [[MyClass alloc] init];</span><br><span class=\"line\">        __weak MyClass *weakRef = strongRef;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;Before setting strongRef to nil: weakRef = %@&quot;, weakRef);</span><br><span class=\"line\">        </span><br><span class=\"line\">        strongRef = nil; // MyClass instance is deallocated</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;After setting strongRef to nil: weakRef = %@&quot;, weakRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before setting strongRef to nil: weakRef = &lt;MyClass: 0x100508ee0&gt;</span><br><span class=\"line\">MyClass instance is being deallocated</span><br><span class=\"line\">After setting strongRef to nil: weakRef = (null)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"内部机制\"><a href=\"#内部机制\" class=\"headerlink\" title=\"内部机制\"></a>内部机制</h3><p>以下是一些关键函数和概念，用于实现弱引用自动置为 <code>nil</code> 的机制：</p>\n<ul>\n<li><p><strong>objc_storeWeak</strong>：<br>这个函数用于存储弱引用，并在弱引用表中注册这个弱引用。</p>\n</li>\n<li><p><strong>clearDeallocating</strong>：<br>当对象引用计数降到零时，这个函数会被调用，用于清理弱引用表中的条目。</p>\n</li>\n<li><p><strong>弱引用表</strong>：<br>运行时维护的全局哈希表，用于存储所有弱引用的地址和它们指向的对象。</p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>弱引用自动置为 <code>nil</code> 的机制是通过 Objective-C 运行时的弱引用表实现的。当对象被回收时，运行时会查找并清理所有指向该对象的弱引用，将它们置为 <code>nil</code>。这个机制确保了弱引用不会悬挂，避免了潜在的崩溃和未定义行为。理解这一机制有助于更好地掌握 ARC 和内存管理。</p>\n","excerpt":"<!-- # 对象回收时 weak 指针自动被置为 nil 是如何实现的？ -->\n\n<p>在 iOS的自动引用计数（ARC）机制中，当对象被回收时，所有指向该对象的 <code>__weak</code> 指针都会被自动置为 <code>nil</code>。这个功能是通过Objective-C运行时（runtime）的弱引用表（weak reference table）实现的。以下是实现这一功能的详细机制：</p>","more":"<h3 id=\"1-弱引用表（Weak-Reference-Table）\"><a href=\"#1-弱引用表（Weak-Reference-Table）\" class=\"headerlink\" title=\"1. 弱引用表（Weak Reference Table）\"></a>1. 弱引用表（Weak Reference Table）</h3><p>Objective-C运行时维护了一张全局的弱引用表，这张表记录了所有的弱引用。当创建一个弱引用时，这个弱引用会被添加到弱引用表中。</p>\n<h3 id=\"2-创建弱引用\"><a href=\"#2-创建弱引用\" class=\"headerlink\" title=\"2. 创建弱引用\"></a>2. 创建弱引用</h3><p>当你创建一个弱引用时，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak MyClass *weakRef = strongRef;</span><br></pre></td></tr></table></figure>\n\n<p>ARC 会在弱引用表中添加一个条目，记录 <code>weakRef</code> 指向的对象地址以及 <code>weakRef</code> 本身的地址。这个条目让运行时知道哪些弱引用指向了某个对象。</p>\n<h3 id=\"3-对象销毁\"><a href=\"#3-对象销毁\" class=\"headerlink\" title=\"3. 对象销毁\"></a>3. 对象销毁</h3><p>当一个对象的引用计数降到零时，ARC 会释放这个对象。在释放对象之前，运行时会查阅弱引用表，找到所有指向这个对象的弱引用，并将它们置为 <code>nil</code>。</p>\n<h3 id=\"4-实现细节\"><a href=\"#4-实现细节\" class=\"headerlink\" title=\"4. 实现细节\"></a>4. 实现细节</h3><p>具体实现涉及以下步骤：</p>\n<ul>\n<li><p><strong>添加弱引用</strong>：<br>当创建弱引用时，ARC 通过调用 <code>objc_storeWeak</code> 函数将弱引用存储在弱引用表中。</p>\n</li>\n<li><p><strong>释放对象</strong>：<br>当对象引用计数降到零时，ARC 通过调用 <code>objc_release</code> 函数来处理对象的释放。在释放之前，会调用 <code>clearDeallocating</code> 函数。</p>\n</li>\n<li><p><strong>清理弱引用</strong>：<br><code>clearDeallocating</code> 函数会查找弱引用表中所有指向即将销毁的对象的弱引用，并将它们置为 <code>nil</code>。这个过程包括以下步骤：</p>\n<ul>\n<li>查找弱引用表中的条目。</li>\n<li>将每个弱引用的值设置为 <code>nil</code>。</li>\n<li>从弱引用表中移除这些条目。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><p>以下是一个简单的示例，演示了弱引用自动置为 <code>nil</code> 的行为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">    NSLog(@&quot;MyClass instance is being deallocated&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        MyClass *strongRef = [[MyClass alloc] init];</span><br><span class=\"line\">        __weak MyClass *weakRef = strongRef;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;Before setting strongRef to nil: weakRef = %@&quot;, weakRef);</span><br><span class=\"line\">        </span><br><span class=\"line\">        strongRef = nil; // MyClass instance is deallocated</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;After setting strongRef to nil: weakRef = %@&quot;, weakRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before setting strongRef to nil: weakRef = &lt;MyClass: 0x100508ee0&gt;</span><br><span class=\"line\">MyClass instance is being deallocated</span><br><span class=\"line\">After setting strongRef to nil: weakRef = (null)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内部机制\"><a href=\"#内部机制\" class=\"headerlink\" title=\"内部机制\"></a>内部机制</h3><p>以下是一些关键函数和概念，用于实现弱引用自动置为 <code>nil</code> 的机制：</p>\n<ul>\n<li><p><strong>objc_storeWeak</strong>：<br>这个函数用于存储弱引用，并在弱引用表中注册这个弱引用。</p>\n</li>\n<li><p><strong>clearDeallocating</strong>：<br>当对象引用计数降到零时，这个函数会被调用，用于清理弱引用表中的条目。</p>\n</li>\n<li><p><strong>弱引用表</strong>：<br>运行时维护的全局哈希表，用于存储所有弱引用的地址和它们指向的对象。</p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>弱引用自动置为 <code>nil</code> 的机制是通过 Objective-C 运行时的弱引用表实现的。当对象被回收时，运行时会查找并清理所有指向该对象的弱引用，将它们置为 <code>nil</code>。这个机制确保了弱引用不会悬挂，避免了潜在的崩溃和未定义行为。理解这一机制有助于更好地掌握 ARC 和内存管理。</p>"},{"title":"怎么用 copy 关键字？","date":"2024-07-22T08:01:21.699Z","_content":"\n<!-- # 怎么用 copy 关键字？ -->\n\n* NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性\n* block也经常使用copy关键字\n    * block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.\n    * 在ARC中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但是建议写上copy，因为这样显示告知调用者“编译器会自动对 block 进行了 copy 操作”\n\n\n<!-- more -->\n\n\n假如有一个NSMutableString,现在用他给一个retain修饰 NSString赋值,那么只是将NSString指向了NSMutableString所指向的位置,并对NSMUtbaleString计数器加一,此时,如果对NSMutableString进行修改,也会导致NSString的值修改,原则上这是不允许的. 如果是copy修饰的NSString对象,在用NSMutableString给他赋值时,会进行深拷贝,及把内容也给拷贝了一份,两者指向不同的位置,即使改变了NSMutableString的值,NSString的值也不会改变.\n\n所以用copy是为了安全,防止NSMutableString赋值给NSString时,前者修改引起后者值变化而用的.\n\n\n\nstrong修饰NSString\n\n```objective-c\n@property (nonatomic, strong) NSString *name;\n\n- (void)string_strong {\n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.name = mStr;\n\n    NSLog(@\"使用strong第一次得到的名字：%@\", self.name);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用strong第二次得到的名字：%@\", self.name);\n}\n\n// 输出\n使用strong第一次得到的名字：张三\n使用strong第二次得到的名字：张三丰\n```\n\n\n\n\n\ncopy修饰NSString\n\n```objective-c\n@property (nonatomic, copy) NSString *title;\n\n- (void)string_copy {\n    \n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.title = mStr;\n\n    NSLog(@\"使用copy第一次得到的名字：%@\", self.title);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用copy第二次得到的名字：%@\", self.title);\n}\n\n// 输出\n使用copy第一次得到的名字：张三\n使用copy第二次得到的名字：张三\n```\n\n\n\n\n\n# 这个写法会出什么问题：@property (copy) NSMutableArray *arr;\n\n1. atomic 属性会影响性能；\n2. 由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃；\n\n\n\n```objc\n@property (nonatomic, copy) NSMutableString *testStr;\n\n- (void)mutableString_copy {\n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.testStr = mStr;\n\n    NSLog(@\"使用copy第一次得到的名字：%@\", self.testStr);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用copy第二次得到的名字：%@\", self.testStr);\n    \n    [self.testStr appendString:@\"123\"];\n    \n    NSLog(@\"使用copy第三次得到的名字：%@\", self.testStr);\n}\n\n// 输出\n使用copy第一次得到的名字：张三\n使用copy第一次得到的名字：张三\nTerminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Attempt to mutate immutable object with appendString:'.........\n\n// 崩溃原因\n由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃。\n```\n\n\n\n\n\n# 如何让自己的类用 copy 修饰符？\n\n1. 需要声明该类遵从NSCopying 或 NSMutableCopying协议；\n\n2. 实现NSCopying协议，该协议只有一个方法：`-(id)copyWithZone:(NSZone *)zone;`\n\n* **拓展**\n\n    copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\n\n    mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\n\n\n\n\n\n# 对于深拷贝和浅拷贝的理解\n\n系统对象 NSString/NSMutableString/NSArray/NSMutableArray 的 copy 与 mutableCopy 方法。\n\n\n\n在 iOS 开发中，`NSString`、`NSMutableString`、`NSArray` 和 `NSMutableArray` 都是非常常用的对象。这些对象都有 `copy` 和 `mutableCopy` 方法，用于创建不可变副本或可变副本。理解这些方法的行为对于正确处理对象的拷贝和内存管理至关重要。\n\n### `copy` 与 `mutableCopy` 方法\n\n- **`copy`**：创建对象的不可变副本。如果对象本身是不可变的，那么 `copy` 方法通常会返回对象本身。\n- **`mutableCopy`**：创建对象的可变副本，不论对象本身是否可变。\n\n### NSString 和 NSMutableString\n\n#### NSString\n\n- `copy`：返回对象本身，因为 `NSString` 是不可变的。\n- `mutableCopy`：返回一个新的 `NSMutableString` 对象。\n\n```objc\nNSString *originalString = @\"Hello, World!\";\nNSString *stringCopy = [originalString copy]; // 返回原对象本身\nNSMutableString *mutableStringCopy = [originalString mutableCopy]; // 返回新的 NSMutableString 对象\n```\n\n![](001.png)\n\n#### NSMutableString\n\n- `copy`：返回一个新的 `NSString` 对象，因为 `NSMutableString` 是可变的。\n- `mutableCopy`：返回一个新的 `NSMutableString` 对象。\n\n```objc\nNSMutableString *originalMutableString = [NSMutableString stringWithString:@\"Hello, World!\"];\nNSString *stringCopy = [originalMutableString copy]; // 返回新的 NSString 对象\nNSMutableString *mutableStringCopy = [originalMutableString mutableCopy]; // 返回新的 NSMutableString 对象\n```\n\n![](002.png)\n\n\n\n### NSArray 和 NSMutableArray\n\n#### NSArray\n\n- `copy`：返回对象本身，因为 `NSArray` 是不可变的。\n- `mutableCopy`：返回一个新的 `NSMutableArray` 对象。\n\n```objc\nNSArray *originalArray = @[@\"One\", @\"Two\", @\"Three\"];\nNSArray *arrayCopy = [originalArray copy]; // 返回原对象本身\nNSMutableArray *mutableArrayCopy = [originalArray mutableCopy]; // 返回新的 NSMutableArray 对象\n```\n\n![](003.png)\n\n\n\n#### NSMutableArray\n\n- `copy`：返回一个新的 `NSArray` 对象，因为 `NSMutableArray` 是可变的。\n- `mutableCopy`：返回一个新的 `NSMutableArray` 对象。\n\n```objc\nNSMutableArray *originalMutableArray = [NSMutableArray arrayWithArray:@[@\"One\", @\"Two\", @\"Three\"]];\nNSArray *arrayCopy = [originalMutableArray copy]; // 返回新的 NSArray 对象\nNSMutableArray *mutableArrayCopy = [originalMutableArray mutableCopy]; // 返回新的 NSMutableArray 对象\n```\n\n![](004.png)\n\n\n\n### 总结\n\n- 对于不可变对象（如 `NSString` 和 `NSArray`），`copy` 方法返回原对象本身，而 `mutableCopy` 方法返回一个新的可变对象。\n- 对于可变对象（如 `NSMutableString` 和 `NSMutableArray`），`copy` 方法返回一个新的不可变对象，而 `mutableCopy` 方法返回一个新的可变对象。\n\n这种行为确保了对象的拷贝操作能够正确地维护对象的可变性属性，从而避免不必要的副本创建和内存消耗。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README.md","raw":"---\ntitle: 怎么用 copy 关键字？\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- copy\n---\n\n<!-- # 怎么用 copy 关键字？ -->\n\n* NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性\n* block也经常使用copy关键字\n    * block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.\n    * 在ARC中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但是建议写上copy，因为这样显示告知调用者“编译器会自动对 block 进行了 copy 操作”\n\n\n<!-- more -->\n\n\n假如有一个NSMutableString,现在用他给一个retain修饰 NSString赋值,那么只是将NSString指向了NSMutableString所指向的位置,并对NSMUtbaleString计数器加一,此时,如果对NSMutableString进行修改,也会导致NSString的值修改,原则上这是不允许的. 如果是copy修饰的NSString对象,在用NSMutableString给他赋值时,会进行深拷贝,及把内容也给拷贝了一份,两者指向不同的位置,即使改变了NSMutableString的值,NSString的值也不会改变.\n\n所以用copy是为了安全,防止NSMutableString赋值给NSString时,前者修改引起后者值变化而用的.\n\n\n\nstrong修饰NSString\n\n```objective-c\n@property (nonatomic, strong) NSString *name;\n\n- (void)string_strong {\n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.name = mStr;\n\n    NSLog(@\"使用strong第一次得到的名字：%@\", self.name);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用strong第二次得到的名字：%@\", self.name);\n}\n\n// 输出\n使用strong第一次得到的名字：张三\n使用strong第二次得到的名字：张三丰\n```\n\n\n\n\n\ncopy修饰NSString\n\n```objective-c\n@property (nonatomic, copy) NSString *title;\n\n- (void)string_copy {\n    \n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.title = mStr;\n\n    NSLog(@\"使用copy第一次得到的名字：%@\", self.title);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用copy第二次得到的名字：%@\", self.title);\n}\n\n// 输出\n使用copy第一次得到的名字：张三\n使用copy第二次得到的名字：张三\n```\n\n\n\n\n\n# 这个写法会出什么问题：@property (copy) NSMutableArray *arr;\n\n1. atomic 属性会影响性能；\n2. 由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃；\n\n\n\n```objc\n@property (nonatomic, copy) NSMutableString *testStr;\n\n- (void)mutableString_copy {\n    NSMutableString *mStr = [NSMutableString stringWithString:@\"张三\"];\n\n    self.testStr = mStr;\n\n    NSLog(@\"使用copy第一次得到的名字：%@\", self.testStr);\n\n    [mStr appendString:@\"丰\"];\n\n    NSLog(@\"使用copy第二次得到的名字：%@\", self.testStr);\n    \n    [self.testStr appendString:@\"123\"];\n    \n    NSLog(@\"使用copy第三次得到的名字：%@\", self.testStr);\n}\n\n// 输出\n使用copy第一次得到的名字：张三\n使用copy第一次得到的名字：张三\nTerminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Attempt to mutate immutable object with appendString:'.........\n\n// 崩溃原因\n由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃。\n```\n\n\n\n\n\n# 如何让自己的类用 copy 修饰符？\n\n1. 需要声明该类遵从NSCopying 或 NSMutableCopying协议；\n\n2. 实现NSCopying协议，该协议只有一个方法：`-(id)copyWithZone:(NSZone *)zone;`\n\n* **拓展**\n\n    copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\n\n    mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\n\n\n\n\n\n# 对于深拷贝和浅拷贝的理解\n\n系统对象 NSString/NSMutableString/NSArray/NSMutableArray 的 copy 与 mutableCopy 方法。\n\n\n\n在 iOS 开发中，`NSString`、`NSMutableString`、`NSArray` 和 `NSMutableArray` 都是非常常用的对象。这些对象都有 `copy` 和 `mutableCopy` 方法，用于创建不可变副本或可变副本。理解这些方法的行为对于正确处理对象的拷贝和内存管理至关重要。\n\n### `copy` 与 `mutableCopy` 方法\n\n- **`copy`**：创建对象的不可变副本。如果对象本身是不可变的，那么 `copy` 方法通常会返回对象本身。\n- **`mutableCopy`**：创建对象的可变副本，不论对象本身是否可变。\n\n### NSString 和 NSMutableString\n\n#### NSString\n\n- `copy`：返回对象本身，因为 `NSString` 是不可变的。\n- `mutableCopy`：返回一个新的 `NSMutableString` 对象。\n\n```objc\nNSString *originalString = @\"Hello, World!\";\nNSString *stringCopy = [originalString copy]; // 返回原对象本身\nNSMutableString *mutableStringCopy = [originalString mutableCopy]; // 返回新的 NSMutableString 对象\n```\n\n![](001.png)\n\n#### NSMutableString\n\n- `copy`：返回一个新的 `NSString` 对象，因为 `NSMutableString` 是可变的。\n- `mutableCopy`：返回一个新的 `NSMutableString` 对象。\n\n```objc\nNSMutableString *originalMutableString = [NSMutableString stringWithString:@\"Hello, World!\"];\nNSString *stringCopy = [originalMutableString copy]; // 返回新的 NSString 对象\nNSMutableString *mutableStringCopy = [originalMutableString mutableCopy]; // 返回新的 NSMutableString 对象\n```\n\n![](002.png)\n\n\n\n### NSArray 和 NSMutableArray\n\n#### NSArray\n\n- `copy`：返回对象本身，因为 `NSArray` 是不可变的。\n- `mutableCopy`：返回一个新的 `NSMutableArray` 对象。\n\n```objc\nNSArray *originalArray = @[@\"One\", @\"Two\", @\"Three\"];\nNSArray *arrayCopy = [originalArray copy]; // 返回原对象本身\nNSMutableArray *mutableArrayCopy = [originalArray mutableCopy]; // 返回新的 NSMutableArray 对象\n```\n\n![](003.png)\n\n\n\n#### NSMutableArray\n\n- `copy`：返回一个新的 `NSArray` 对象，因为 `NSMutableArray` 是可变的。\n- `mutableCopy`：返回一个新的 `NSMutableArray` 对象。\n\n```objc\nNSMutableArray *originalMutableArray = [NSMutableArray arrayWithArray:@[@\"One\", @\"Two\", @\"Three\"]];\nNSArray *arrayCopy = [originalMutableArray copy]; // 返回新的 NSArray 对象\nNSMutableArray *mutableArrayCopy = [originalMutableArray mutableCopy]; // 返回新的 NSMutableArray 对象\n```\n\n![](004.png)\n\n\n\n### 总结\n\n- 对于不可变对象（如 `NSString` 和 `NSArray`），`copy` 方法返回原对象本身，而 `mutableCopy` 方法返回一个新的可变对象。\n- 对于可变对象（如 `NSMutableString` 和 `NSMutableArray`），`copy` 方法返回一个新的不可变对象，而 `mutableCopy` 方法返回一个新的可变对象。\n\n这种行为确保了对象的拷贝操作能够正确地维护对象的可变性属性，从而避免不必要的副本创建和内存消耗。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"iOS/OC/001-OC属性、关键字/012-copy关键字/README","published":1,"updated":"2024-08-06T08:40:47.968Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp9430023dgxrabgvh9c8","content":"<!-- # 怎么用 copy 关键字？ -->\n\n<ul>\n<li>NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性</li>\n<li>block也经常使用copy关键字<ul>\n<li>block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.</li>\n<li>在ARC中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但是建议写上copy，因为这样显示告知调用者“编译器会自动对 block 进行了 copy 操作”</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n\n<p>假如有一个NSMutableString,现在用他给一个retain修饰 NSString赋值,那么只是将NSString指向了NSMutableString所指向的位置,并对NSMUtbaleString计数器加一,此时,如果对NSMutableString进行修改,也会导致NSString的值修改,原则上这是不允许的. 如果是copy修饰的NSString对象,在用NSMutableString给他赋值时,会进行深拷贝,及把内容也给拷贝了一份,两者指向不同的位置,即使改变了NSMutableString的值,NSString的值也不会改变.</p>\n<p>所以用copy是为了安全,防止NSMutableString赋值给NSString时,前者修改引起后者值变化而用的.</p>\n<p>strong修饰NSString</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)string_strong &#123;</span><br><span class=\"line\">    NSMutableString *mStr = [NSMutableString stringWithString:@&quot;张三&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.name = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用strong第一次得到的名字：%@&quot;, self.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:@&quot;丰&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用strong第二次得到的名字：%@&quot;, self.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">使用strong第一次得到的名字：张三</span><br><span class=\"line\">使用strong第二次得到的名字：张三丰</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n<p>copy修饰NSString</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)string_copy &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSMutableString *mStr = [NSMutableString stringWithString:@&quot;张三&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.title = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用copy第一次得到的名字：%@&quot;, self.title);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:@&quot;丰&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用copy第二次得到的名字：%@&quot;, self.title);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">使用copy第一次得到的名字：张三</span><br><span class=\"line\">使用copy第二次得到的名字：张三</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n<h1 id=\"这个写法会出什么问题：-property-copy-NSMutableArray-arr\"><a href=\"#这个写法会出什么问题：-property-copy-NSMutableArray-arr\" class=\"headerlink\" title=\"这个写法会出什么问题：@property (copy) NSMutableArray *arr;\"></a>这个写法会出什么问题：@property (copy) NSMutableArray *arr;</h1><ol>\n<li>atomic 属性会影响性能；</li>\n<li>由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃；</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSMutableString</span> *testStr;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)mutableString_copy &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mStr = [<span class=\"built_in\">NSMutableString</span> stringWithString:<span class=\"string\">@&quot;张三&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.testStr = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第一次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:<span class=\"string\">@&quot;丰&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第二次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.testStr appendString:<span class=\"string\">@&quot;123&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第三次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">使用<span class=\"keyword\">copy</span>第一次得到的名字：张三</span><br><span class=\"line\">使用<span class=\"keyword\">copy</span>第一次得到的名字：张三</span><br><span class=\"line\">Terminating app due to uncaught exception <span class=\"string\">&#x27;NSInvalidArgumentException&#x27;</span>, reason: <span class=\"string\">&#x27;Attempt to mutate immutable object with appendString:&#x27;</span>.........</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 崩溃原因</span></span><br><span class=\"line\">由于<span class=\"keyword\">copy</span>复制了一个不可变的<span class=\"built_in\">NSArray</span>对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃。</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n<h1 id=\"如何让自己的类用-copy-修饰符？\"><a href=\"#如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"如何让自己的类用 copy 修饰符？\"></a>如何让自己的类用 copy 修饰符？</h1><ol>\n<li><p>需要声明该类遵从NSCopying 或 NSMutableCopying协议；</p>\n</li>\n<li><p>实现NSCopying协议，该协议只有一个方法：<code>-(id)copyWithZone:(NSZone *)zone;</code></p>\n</li>\n</ol>\n<ul>\n<li><p><strong>拓展</strong></p>\n<p>  copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；</p>\n<p>  mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；</p>\n</li>\n</ul>\n<h1 id=\"对于深拷贝和浅拷贝的理解\"><a href=\"#对于深拷贝和浅拷贝的理解\" class=\"headerlink\" title=\"对于深拷贝和浅拷贝的理解\"></a>对于深拷贝和浅拷贝的理解</h1><p>系统对象 NSString&#x2F;NSMutableString&#x2F;NSArray&#x2F;NSMutableArray 的 copy 与 mutableCopy 方法。</p>\n<p>在 iOS 开发中，<code>NSString</code>、<code>NSMutableString</code>、<code>NSArray</code> 和 <code>NSMutableArray</code> 都是非常常用的对象。这些对象都有 <code>copy</code> 和 <code>mutableCopy</code> 方法，用于创建不可变副本或可变副本。理解这些方法的行为对于正确处理对象的拷贝和内存管理至关重要。</p>\n<h3 id=\"copy-与-mutableCopy-方法\"><a href=\"#copy-与-mutableCopy-方法\" class=\"headerlink\" title=\"copy 与 mutableCopy 方法\"></a><code>copy</code> 与 <code>mutableCopy</code> 方法</h3><ul>\n<li>**<code>copy</code>**：创建对象的不可变副本。如果对象本身是不可变的，那么 <code>copy</code> 方法通常会返回对象本身。</li>\n<li>**<code>mutableCopy</code>**：创建对象的可变副本，不论对象本身是否可变。</li>\n</ul>\n<h3 id=\"NSString-和-NSMutableString\"><a href=\"#NSString-和-NSMutableString\" class=\"headerlink\" title=\"NSString 和 NSMutableString\"></a>NSString 和 NSMutableString</h3><h4 id=\"NSString\"><a href=\"#NSString\" class=\"headerlink\" title=\"NSString\"></a>NSString</h4><ul>\n<li><code>copy</code>：返回对象本身，因为 <code>NSString</code> 是不可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableString</code> 对象。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *stringCopy = [originalString <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回原对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableStringCopy = [originalString mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableString 对象</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/001.png\"\n                     \n                ></p>\n<h4 id=\"NSMutableString\"><a href=\"#NSMutableString\" class=\"headerlink\" title=\"NSMutableString\"></a>NSMutableString</h4><ul>\n<li><code>copy</code>：返回一个新的 <code>NSString</code> 对象，因为 <code>NSMutableString</code> 是可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableString</code> 对象。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *originalMutableString = [<span class=\"built_in\">NSMutableString</span> stringWithString:<span class=\"string\">@&quot;Hello, World!&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *stringCopy = [originalMutableString <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回新的 NSString 对象</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableStringCopy = [originalMutableString mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableString 对象</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/002.png\"\n                     \n                ></p>\n<h3 id=\"NSArray-和-NSMutableArray\"><a href=\"#NSArray-和-NSMutableArray\" class=\"headerlink\" title=\"NSArray 和 NSMutableArray\"></a>NSArray 和 NSMutableArray</h3><h4 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h4><ul>\n<li><code>copy</code>：返回对象本身，因为 <code>NSArray</code> 是不可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableArray</code> 对象。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *originalArray = @[<span class=\"string\">@&quot;One&quot;</span>, <span class=\"string\">@&quot;Two&quot;</span>, <span class=\"string\">@&quot;Three&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arrayCopy = [originalArray <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回原对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *mutableArrayCopy = [originalArray mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableArray 对象</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/003.png\"\n                     \n                ></p>\n<h4 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h4><ul>\n<li><code>copy</code>：返回一个新的 <code>NSArray</code> 对象，因为 <code>NSMutableArray</code> 是可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableArray</code> 对象。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *originalMutableArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:@[<span class=\"string\">@&quot;One&quot;</span>, <span class=\"string\">@&quot;Two&quot;</span>, <span class=\"string\">@&quot;Three&quot;</span>]];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arrayCopy = [originalMutableArray <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回新的 NSArray 对象</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *mutableArrayCopy = [originalMutableArray mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableArray 对象</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/004.png\"\n                     \n                ></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>对于不可变对象（如 <code>NSString</code> 和 <code>NSArray</code>），<code>copy</code> 方法返回原对象本身，而 <code>mutableCopy</code> 方法返回一个新的可变对象。</li>\n<li>对于可变对象（如 <code>NSMutableString</code> 和 <code>NSMutableArray</code>），<code>copy</code> 方法返回一个新的不可变对象，而 <code>mutableCopy</code> 方法返回一个新的可变对象。</li>\n</ul>\n<p>这种行为确保了对象的拷贝操作能够正确地维护对象的可变性属性，从而避免不必要的副本创建和内存消耗。</p>\n","excerpt":"<!-- # 怎么用 copy 关键字？ -->\n\n<ul>\n<li>NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性</li>\n<li>block也经常使用copy关键字<ul>\n<li>block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.</li>\n<li>在ARC中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但是建议写上copy，因为这样显示告知调用者“编译器会自动对 block 进行了 copy 操作”</li>\n</ul>\n</li>\n</ul>","more":"<p>假如有一个NSMutableString,现在用他给一个retain修饰 NSString赋值,那么只是将NSString指向了NSMutableString所指向的位置,并对NSMUtbaleString计数器加一,此时,如果对NSMutableString进行修改,也会导致NSString的值修改,原则上这是不允许的. 如果是copy修饰的NSString对象,在用NSMutableString给他赋值时,会进行深拷贝,及把内容也给拷贝了一份,两者指向不同的位置,即使改变了NSMutableString的值,NSString的值也不会改变.</p>\n<p>所以用copy是为了安全,防止NSMutableString赋值给NSString时,前者修改引起后者值变化而用的.</p>\n<p>strong修饰NSString</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)string_strong &#123;</span><br><span class=\"line\">    NSMutableString *mStr = [NSMutableString stringWithString:@&quot;张三&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.name = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用strong第一次得到的名字：%@&quot;, self.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:@&quot;丰&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用strong第二次得到的名字：%@&quot;, self.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">使用strong第一次得到的名字：张三</span><br><span class=\"line\">使用strong第二次得到的名字：张三丰</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>copy修饰NSString</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)string_copy &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSMutableString *mStr = [NSMutableString stringWithString:@&quot;张三&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.title = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用copy第一次得到的名字：%@&quot;, self.title);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:@&quot;丰&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;使用copy第二次得到的名字：%@&quot;, self.title);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">使用copy第一次得到的名字：张三</span><br><span class=\"line\">使用copy第二次得到的名字：张三</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"这个写法会出什么问题：-property-copy-NSMutableArray-arr\"><a href=\"#这个写法会出什么问题：-property-copy-NSMutableArray-arr\" class=\"headerlink\" title=\"这个写法会出什么问题：@property (copy) NSMutableArray *arr;\"></a>这个写法会出什么问题：@property (copy) NSMutableArray *arr;</h1><ol>\n<li>atomic 属性会影响性能；</li>\n<li>由于copy复制了一个不可变的NSArray对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃；</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSMutableString</span> *testStr;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)mutableString_copy &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mStr = [<span class=\"built_in\">NSMutableString</span> stringWithString:<span class=\"string\">@&quot;张三&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.testStr = mStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第一次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\"></span><br><span class=\"line\">    [mStr appendString:<span class=\"string\">@&quot;丰&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第二次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.testStr appendString:<span class=\"string\">@&quot;123&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;使用copy第三次得到的名字：%@&quot;</span>, <span class=\"keyword\">self</span>.testStr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">使用<span class=\"keyword\">copy</span>第一次得到的名字：张三</span><br><span class=\"line\">使用<span class=\"keyword\">copy</span>第一次得到的名字：张三</span><br><span class=\"line\">Terminating app due to uncaught exception <span class=\"string\">&#x27;NSInvalidArgumentException&#x27;</span>, reason: <span class=\"string\">&#x27;Attempt to mutate immutable object with appendString:&#x27;</span>.........</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 崩溃原因</span></span><br><span class=\"line\">由于<span class=\"keyword\">copy</span>复制了一个不可变的<span class=\"built_in\">NSArray</span>对象，如果对arr进行添加、删除、修改数组内部元素的时候，程序找不到对应的方法而崩溃。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"如何让自己的类用-copy-修饰符？\"><a href=\"#如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"如何让自己的类用 copy 修饰符？\"></a>如何让自己的类用 copy 修饰符？</h1><ol>\n<li><p>需要声明该类遵从NSCopying 或 NSMutableCopying协议；</p>\n</li>\n<li><p>实现NSCopying协议，该协议只有一个方法：<code>-(id)copyWithZone:(NSZone *)zone;</code></p>\n</li>\n</ol>\n<ul>\n<li><p><strong>拓展</strong></p>\n<p>  copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；</p>\n<p>  mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；</p>\n</li>\n</ul>\n<h1 id=\"对于深拷贝和浅拷贝的理解\"><a href=\"#对于深拷贝和浅拷贝的理解\" class=\"headerlink\" title=\"对于深拷贝和浅拷贝的理解\"></a>对于深拷贝和浅拷贝的理解</h1><p>系统对象 NSString&#x2F;NSMutableString&#x2F;NSArray&#x2F;NSMutableArray 的 copy 与 mutableCopy 方法。</p>\n<p>在 iOS 开发中，<code>NSString</code>、<code>NSMutableString</code>、<code>NSArray</code> 和 <code>NSMutableArray</code> 都是非常常用的对象。这些对象都有 <code>copy</code> 和 <code>mutableCopy</code> 方法，用于创建不可变副本或可变副本。理解这些方法的行为对于正确处理对象的拷贝和内存管理至关重要。</p>\n<h3 id=\"copy-与-mutableCopy-方法\"><a href=\"#copy-与-mutableCopy-方法\" class=\"headerlink\" title=\"copy 与 mutableCopy 方法\"></a><code>copy</code> 与 <code>mutableCopy</code> 方法</h3><ul>\n<li>**<code>copy</code>**：创建对象的不可变副本。如果对象本身是不可变的，那么 <code>copy</code> 方法通常会返回对象本身。</li>\n<li>**<code>mutableCopy</code>**：创建对象的可变副本，不论对象本身是否可变。</li>\n</ul>\n<h3 id=\"NSString-和-NSMutableString\"><a href=\"#NSString-和-NSMutableString\" class=\"headerlink\" title=\"NSString 和 NSMutableString\"></a>NSString 和 NSMutableString</h3><h4 id=\"NSString\"><a href=\"#NSString\" class=\"headerlink\" title=\"NSString\"></a>NSString</h4><ul>\n<li><code>copy</code>：返回对象本身，因为 <code>NSString</code> 是不可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableString</code> 对象。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *originalString = <span class=\"string\">@&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *stringCopy = [originalString <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回原对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableStringCopy = [originalString mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableString 对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/001.png\"\n                     \n                ></p>\n<h4 id=\"NSMutableString\"><a href=\"#NSMutableString\" class=\"headerlink\" title=\"NSMutableString\"></a>NSMutableString</h4><ul>\n<li><code>copy</code>：返回一个新的 <code>NSString</code> 对象，因为 <code>NSMutableString</code> 是可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableString</code> 对象。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *originalMutableString = [<span class=\"built_in\">NSMutableString</span> stringWithString:<span class=\"string\">@&quot;Hello, World!&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *stringCopy = [originalMutableString <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回新的 NSString 对象</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableStringCopy = [originalMutableString mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableString 对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/002.png\"\n                     \n                ></p>\n<h3 id=\"NSArray-和-NSMutableArray\"><a href=\"#NSArray-和-NSMutableArray\" class=\"headerlink\" title=\"NSArray 和 NSMutableArray\"></a>NSArray 和 NSMutableArray</h3><h4 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h4><ul>\n<li><code>copy</code>：返回对象本身，因为 <code>NSArray</code> 是不可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableArray</code> 对象。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *originalArray = @[<span class=\"string\">@&quot;One&quot;</span>, <span class=\"string\">@&quot;Two&quot;</span>, <span class=\"string\">@&quot;Three&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arrayCopy = [originalArray <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回原对象本身</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *mutableArrayCopy = [originalArray mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableArray 对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/003.png\"\n                     \n                ></p>\n<h4 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h4><ul>\n<li><code>copy</code>：返回一个新的 <code>NSArray</code> 对象，因为 <code>NSMutableArray</code> 是可变的。</li>\n<li><code>mutableCopy</code>：返回一个新的 <code>NSMutableArray</code> 对象。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *originalMutableArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:@[<span class=\"string\">@&quot;One&quot;</span>, <span class=\"string\">@&quot;Two&quot;</span>, <span class=\"string\">@&quot;Three&quot;</span>]];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arrayCopy = [originalMutableArray <span class=\"keyword\">copy</span>]; <span class=\"comment\">// 返回新的 NSArray 对象</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *mutableArrayCopy = [originalMutableArray mutableCopy]; <span class=\"comment\">// 返回新的 NSMutableArray 对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/README/004.png\"\n                     \n                ></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>对于不可变对象（如 <code>NSString</code> 和 <code>NSArray</code>），<code>copy</code> 方法返回原对象本身，而 <code>mutableCopy</code> 方法返回一个新的可变对象。</li>\n<li>对于可变对象（如 <code>NSMutableString</code> 和 <code>NSMutableArray</code>），<code>copy</code> 方法返回一个新的不可变对象，而 <code>mutableCopy</code> 方法返回一个新的可变对象。</li>\n</ul>\n<p>这种行为确保了对象的拷贝操作能够正确地维护对象的可变性属性，从而避免不必要的副本创建和内存消耗。</p>"},{"title":"iOS中copy与mutableCopy","date":"2024-08-08T02:13:19.451Z","_content":"\n# 参考文档\n- 杂七杂八\n  - [copy和mutableCopy都是浅拷贝！！！](https://blog.csdn.net/qq_18425655/article/details/51325921)\n  - [iOS中的copy，mutableCopy,深拷贝和浅拷贝](https://www.jianshu.com/p/a99f3da35560)\n  - [关于NSString的copy和mutableCopy](https://blog.csdn.net/small_smart_jin/article/details/50804607)\n  - [iOS中关键字copy与mutableCopy的详解，看我你就都懂了](https://www.jianshu.com/p/700f58eb0b86)\n  - [copy和mutableCopy到底是浅拷贝还是深拷贝？](\nhttps://blog.csdn.net/jslsblog/article/details/38563009)\n  - [青玉伏案：Objective-C中的深拷贝和浅拷贝](https://www.cnblogs.com/ludashi/p/3894151.html)\n\n- Stackoverflow\n  * [Deep Copy and Shallow Copy](https://stackoverflow.com/questions/9912794/deep-copy-and-shallow-copy)\n  * [What is the difference between a deep copy and a shallow copy?](https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy)\n\n- Documents\n  * [apple documentation Copy ](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html#//apple_ref/doc/uid/TP40010162-SW3)\n  * [维基百科 - Object copying](https://en.wikipedia.org/wiki/Object_copying)\n\n# 目录\n* 一、copy、mutableCopy\n* 二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\n* 三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\n* 四、另一个角度来看\n  * 4.1、浅拷贝\n  * 4.2、单层深copy\n  * 4.3、双层深拷贝\n  * 4.4、完全深拷贝\n  * 4.5、自定义类对象之间的深浅拷贝问题\n* 五、@property中的copy关键字\n* 六、copy和block\n\n\n# 一、copy、mutableCopy\n\n> * ##### copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\n> * ##### mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\n\n![](005.webp)\n\n\n\n# 二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\n\n```\n // const是常量字符串,存在常量区 \n // constStr指针存在栈区, 指针指向常量区 \nNSString * constStr = @\"const\";\nNSString * constStrCopy = [constStr copy];\nNSMutableString * constStrMutableCopy = [constStr mutableCopy];\nNSLog(@\"constStr = %p = %@\",constStr,constStr);\nNSLog(@\"constStrCopy = %p = %@\",constStrCopy,constStrCopy);\nNSLog(@\"constStrMutableCopy = %p = %@\",constStrMutableCopy,constStrMutableCopy);\n\n// originStr在栈中,指向堆区的地址 \nNSString * originStr = [NSString stringWithFormat:@\"origin\"];\nNSString * originStrCopy = [originStr copy];\nNSMutableString * originStrMutableCopy = [originStr mutableCopy];\nNSLog(@\"originStr = %p = %@\",originStr,originStr);\nNSLog(@\"originStrCopy = %p = %@\",originStrCopy,originStrCopy);\nNSLog(@\"originStrMutableCopy = %p = %@\",originStrMutableCopy,originStrMutableCopy);\n    \nNSMutableString *mutableOriginStr = [NSMutableString stringWithFormat:@\"mutableOrigin\"];\nNSMutableString *mutableOriginStrCopy = [mutableOriginStr copy];\nNSMutableString *mutableOriginStrMutableCopy = [mutableOriginStr mutableCopy];\nNSLog(@\"mutableOriginStr = %p = %@\",mutableOriginStr,mutableOriginStr);\nNSLog(@\"mutableOriginStrCopy = %p = %@\",mutableOriginStrCopy,mutableOriginStrCopy);\nNSLog(@\"mutableOriginStrMutableCopy = %p = %@\",mutableOriginStrMutableCopy,mutableOriginStrMutableCopy);\n\n\n// 返回值测试对象是否为mutable\n[constStrMutableCopy appendString:@\"const\"];\n[originStrMutableCopy appendString:@\"origin\"];\n#pragma warnning - ERROR\n[mutableOriginStrCopy appendString:@\"mm\"];   // ERROR\n```\n输出\n```\nconstStr = 0x109a32558\nconstStrCopy = 0x109a32558\nconstStrMutableCopy = 0x60000307ad00\n\noriginStr = 0xc117d077374719f4\noriginStrCopy = 0xc117d077374719f4\noriginStrMutableCopy = 0x60000307ac40\n\nmutableOriginStr = 0x60000307ac70\nmutableOriginStrCopy = 0x600003e7d960\nmutableOriginStrMutableCopy = 0x60000307adc0\n```\n\n![总结图](006.png)\n\n> ###### 总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\n> ######  copy返回的对象是不可变的，mutableCopy是可变的。\n\n**NSString内存分配结论：**\n[iOS的关于堆区和栈区](https://www.aliyun.com/jiaocheng/359361.html)\n```\n@\"\" 和 initWithString：方法生成的字符串分配在常量区，系统自动管理内存；\n\ninitWithFormat：和 stringWithFormat: 方法生成的字符串分配在堆区，autorelease；\n```\n\n# 三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\n\n[copy和mutableCopy都是浅拷贝！！！](https://blog.csdn.net/qq_18425655/article/details/51325921)\n[iOS深浅拷贝（纠错）](https://www.jianshu.com/p/ad1fb29b6070)\n\n\n![浅拷贝与深拷贝](007.png)\n\n\n> ###### 观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\n\n**验证一：NSArray进行copy与mutableCopy，并改变NSArray内元素值，查看拷贝对象内部值的变化。**\n```\n    NSArray * arr = [NSArray arrayWithObjects:\n                     [NSMutableString stringWithString:@\"one\"],\n                     [NSMutableString stringWithString:@\"two\"],\n                     [NSMutableString stringWithString:@\"three\"],\n                     [NSMutableString stringWithString:@\"four\"],nil];\n    NSArray * arrcopy = [arr copy];\n    NSMutableArray * arrmutablecopy = [arr mutableCopy];\n    NSLog(@\"arr = %p = %p\",arr,arr[0]);\n    NSLog(@\"arrcopy = %p = %p\",arrcopy,arrcopy[0]);\n    NSLog(@\"arrmutablecopy = %p = %p\",arrmutablecopy,arrmutablecopy[0]);\n\n    NSMutableString * mStr;\n    mStr = arr[0];\n    [mStr appendString:@\"--array\"];\n\n    NSLog(@\"改变内部元素后 arr：%@ = %p\",arr,arr[0]);\n    NSLog(@\"改变内部元素后 arrcopy：%@ = %p\",arrcopy,arrcopy[0]);\n    NSLog(@\"改变内部元素后 arrmutablecopy：%@ = %p\",arrmutablecopy,arrmutablecopy[0]);\n```\n\n输出\n```\narr = 0x604000446390 = 0x604000445d90\narrcopy = 0x604000446390 = 0x604000445d90\narrmutablecopy = 0x604000445520 = 0x604000445d90\n改变内部元素后 arr：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n改变内部元素后 arrcopy：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n改变内部元素后 arrmutablecopy：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n```\n\n**验证二：NSMutableArray进行copy与mutableCopy，并改变NSMutableArray内元素值，查看拷贝对象内部值的变化。**\n\n```\n    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:\n                                  [NSMutableString stringWithString:@\"abc\"],\n                                  [NSMutableString stringWithString:@\"def\"],\n                                  [NSMutableString stringWithString:@\"ghi\"],\n                                  [NSMutableString stringWithString:@\"jkl\"], nil];\n    NSArray * mutableArrcopy = [mutableArr copy];\n    NSMutableArray * mutableArrmutablecopy = [mutableArr mutableCopy];\n    NSLog(@\"mutableArr = %p = %p\",mutableArr,mutableArr[0]);\n    NSLog(@\"mutableArrcopy = %p = %p\",mutableArrcopy,mutableArrcopy[0]);\n    NSLog(@\"mutableArrmutablecopy = %p = %p\",mutableArrmutablecopy,mutableArrmutablecopy[0]);\n    \n    NSMutableString * mStr1;\n    mStr1 = mutableArr[0];\n    [mStr1 appendString:@\"--mutablearray\"];\n    \n    [mutableArrmutablecopy addObject:@\"FFF\"];\n    \n    NSLog(@\"改变内部元素后 mutableArr：%@ = %p\",mutableArr,mutableArr[0]);\n    NSLog(@\"改变内部元素后 mutableArrcopy：%@ = %p\",mutableArrcopy,mutableArrcopy[0]);\n    NSLog(@\"改变内部元素后 mutableArrmutablecopy：%@ = %p\",mutableArrmutablecopy,mutableArrmutablecopy[0]);\n```\n\n输出\n```\nmutableArr = 0x604000452b10 = 0x604000452a80\nmutableArrcopy = 0x604000452b70 = 0x604000452a80\nmutableArrmutablecopy = 0x60400025fe90 = 0x604000452a80\n改变内部元素后 mutableArr：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl\n) = 0x604000452a80\n改变内部元素后 mutableArrcopy：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl\n) = 0x604000452a80\n改变内部元素后 mutableArrmutablecopy：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl,\n    FFF\n) = 0x604000452a80\n```\n\n![总结图](006.png)\n\n> ###### 总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\n> ###### mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\n\n\n> ###### 特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\n\n\n\n# 四、另一个角度来看\n\n## 4.1、浅拷贝\n\n[iOS 图文并茂的带你了解深拷贝与浅拷贝](https://www.cnblogs.com/beckwang0912/p/7212075.html)\n[Objective-C copy，看我就够了](https://www.jianshu.com/p/ebbac2fec4c6)\n\n```\nNSArray *arr = [NSArray arrayWithObjects:@\"1\", nil];\nNSArray *copyArr = [arr copy];\nNSLog(@\"%p\", arr);\nNSLog(@\"%p\", copyArr);\n```\n输出：浅拷贝\n```\n2018-10-24 10:00:17.256591+0800 TodayNews[2229:70407] 0x60000043d3c0\n2018-10-24 10:00:17.256705+0800 TodayNews[2229:70407] 0x60000043d3c0\n```\n\n## 4.2、单层深copy\n\n**这里的单层指的是完成了NSArray对象的深copy，而未对其容器内对象进行处理。**\n```\nNSArray *arr = [NSArray arrayWithObjects:@\"1\", nil];\nNSArray *copyArr = [arr mutableCopy];\n    \nNSLog(@\"%p\", arr);\nNSLog(@\"%p\", copyArr);\n    \n// 打印arr、copyArr内部元素进行对比\nNSLog(@\"%p\", arr[0]);\nNSLog(@\"%p\", copyArr[0]);\n```\n输出：\n```\n2018-10-24 10:06:10.985032+0800 TodayNews[2330:73697] 0x60000043a200\n2018-10-24 10:06:10.985224+0800 TodayNews[2330:73697] 0x600000642a60\n2018-10-24 10:06:10.985347+0800 TodayNews[2330:73697] 0x102bf00d8\n2018-10-24 10:06:10.985438+0800 TodayNews[2330:73697] 0x102bf00d8\n```\n\n## 4.3、双层深拷贝\n```\n    // 随意创建一个NSMutableString对象\n    NSMutableString *mutableString = [NSMutableString stringWithString:@\"1\"];\n    // 随意创建一个包涵NSMutableString的NSMutableArray对象\n    NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@\"1\"];\n    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];\n    // 将mutableString和mutableArr放入一个新的NSArray中\n    NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];\n    // 通过官方文档提供的方式创建copy\n    NSArray *testArrCopy = [[NSArray alloc] initWithArray:testArr copyItems:YES];\n    \n    // testArr和testArrCopy指针对比\n    NSLog(@\"%p\", testArr);\n    NSLog(@\"%p\", testArrCopy);\n    \n    // testArr和testArrCopy中元素指针对比\n    // mutableString对比\n    NSLog(@\"%p\", testArr[0]);\n    NSLog(@\"%p\", testArrCopy[0]);\n    // mutableArr对比\n    NSLog(@\"%p\", testArr[1]);\n    NSLog(@\"%p\", testArrCopy[1]);\n    \n    // mutableArr中的元素对比，即mutalbeString1对比\n    NSLog(@\"%p\", testArr[1][0]);\n    NSLog(@\"%p\", testArrCopy[1][0]);\n```\n输出\n\n```\n2018-10-24 10:10:20.994041+0800 TodayNews[2442:76854] 0x600000426500\n2018-10-24 10:10:20.994165+0800 TodayNews[2442:76854] 0x6000004264c0\n2018-10-24 10:10:20.994280+0800 TodayNews[2442:76854] 0x600000652870\n2018-10-24 10:10:20.994421+0800 TodayNews[2442:76854] 0xa000000000000311\n2018-10-24 10:10:20.994512+0800 TodayNews[2442:76854] 0x600000652960\n2018-10-24 10:10:20.994599+0800 TodayNews[2442:76854] 0x600000005ef0\n2018-10-24 10:10:20.994701+0800 TodayNews[2442:76854] 0x6000006528a0\n2018-10-24 10:10:20.994993+0800 TodayNews[2442:76854] 0x6000006528a0\n```\n\n## 4.4、完全深拷贝\n\n方式一：**如果想完美的解决NSArray嵌套NSArray这种情形，可以使用归档、解档的方式。**\n```\n// 随意创建一个NSMutableString对象\nNSMutableString *mutableString = [NSMutableString stringWithString:@\"1\"];\n// 随意创建一个包涵NSMutableString的NSMutableArray对象\nNSMutableString *mutalbeString1 = [NSMutableString stringWithString:@\"1\"];\nNSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];\n// 将mutableString和mutableArr放入一个新的NSArray中\nNSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];\n// 通过归档、解档方式创建copy\nNSArray *testArrCopy = [NSKeyedUnarchiver unarchiveObjectWithData:\n                            [NSKeyedArchiver archivedDataWithRootObject:testArr]];;\n    \n// testArr和testArrCopy指针对比\nNSLog(@\"%p\", testArr);\nNSLog(@\"%p\", testArrCopy);\n    \n// testArr和testArrCopy中元素指针对比\n// mutableString对比\nNSLog(@\"%p\", testArr[0]);\nNSLog(@\"%p\", testArrCopy[0]);\n// mutableArr对比\nNSLog(@\"%p\", testArr[1]);\nNSLog(@\"%p\", testArrCopy[1]);\n    \n// mutableArr中的元素对比，即mutalbeString1对比\nNSLog(@\"%p\", testArr[1][0]);\nNSLog(@\"%p\", testArrCopy[1][0]);\n```\n输出\n\n```\n2018-10-24 10:15:11.448311+0800 TodayNews[2549:80583] 0x600000430640\n2018-10-24 10:15:11.448435+0800 TodayNews[2549:80583] 0x6000004309e0\n2018-10-24 10:15:11.448528+0800 TodayNews[2549:80583] 0x60000045e2a0\n2018-10-24 10:15:11.448684+0800 TodayNews[2549:80583] 0x60000045e3c0\n2018-10-24 10:15:11.448773+0800 TodayNews[2549:80583] 0x60000045d0d0\n2018-10-24 10:15:11.448925+0800 TodayNews[2549:80583] 0x60000045e450\n2018-10-24 10:15:11.449012+0800 TodayNews[2549:80583] 0x60000045e1b0\n2018-10-24 10:15:11.449161+0800 TodayNews[2549:80583] 0x60000045e7e0\n```\n\n**方式二：```- (instancetype)initWithArray:(NSArray<ObjectType> *)array copyItems:(BOOL)flag```;**\n\n```\nNSMutableArray *marry1 = [[NSMutableArray alloc] init];\n    \nNSMutableString *mstr1 = [[NSMutableString alloc]initWithString:@\"value1\"];\nNSMutableString *mstr2 = [[NSMutableString alloc]initWithString:@\"value2\"];\n    \n[marry1 addObject:mstr1];\n[marry1 addObject:mstr2];\n    \nNSArray *marray2 = [[NSArray alloc] initWithArray:marry1 copyItems:YES];\n    \nNSLog(@\"marry1:%p - %@ \\r\\n\",marry1,marry1);\nNSLog(@\"marry2:%p - %@ \\r\\n\",marray2,marray2);\nNSLog(@\"数组元素地址:value1:%p - value2:%p \\r\\n\",marry1[0],marry1[1]);\nNSLog(@\"数组元素地址:value1:%p - value2:%p \\r\\n\",marray2[0],marray2[1]);\n```\n\n## 4.5、自定义类对象之间的深浅拷贝问题\n\n在Objective-C中并不是所有的类都支持拷贝；只有遵循NSCopying协议的类，才支持copy拷贝，只有遵循NSMutableCopying协议的类，才支持mutableCopy拷贝。如果没有遵循拷贝协议，拷贝时会出错。\n\n如果我们想再我们自定义的类中支持copy和mutableCopy那么我们就需要使我们定义的类遵循NSCopying和NSMutableCopying协议，代码如下：\n\n```\n@interface Study_CustomObject_copy_mutableCopy : NSObject <NSCopying, NSMutableCopying>  // 协议\n@property (copy,nonatomic) NSString *name;\n@property (copy,nonatomic) NSString *age;\n@end\n\n@implementation Study_CustomObject_copy_mutableCopy\n- (id)copyWithZone:(NSZone *)zone\n{\n    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];\n    customobject.age = self.age;\n    customobject.name = self.name;\n    return customobject;\n}\n- (id)mutableCopyWithZone:(NSZone *)zone {\n    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];\n    customobject.age = self.age;\n    customobject.name = self.name;\n    return customobject;\n}\n@end\n```\n\n\n**调用 、 输出**\n\n```\n// 调用\n{\n    Study_CustomObject_copy_mutableCopy *object = [[Study_CustomObject_copy_mutableCopy alloc]init];\n    object.age = @\"99\";\n    object.name = @\"lionsom\";\n    \n    Study_CustomObject_copy_mutableCopy *objectCopy = [object copy];\n    Study_CustomObject_copy_mutableCopy *objectMutableCopy = [object mutableCopy];\n    \n    NSLog(@\"object === %p , name === %p , age === %p\",object, object.name, object.age);\n    NSLog(@\"objectCopy === %p , name === %p , age === %p\",objectCopy, objectCopy.name, objectCopy.age);\n    NSLog(@\"objectMutableCopy === %p , name === %p , age === %p\",objectMutableCopy, objectMutableCopy.name, objectMutableCopy.age);\n}\n\n// 输出\nobject === 0x60400023d7a0 , name === 0x100744ed8 , age === 0x100744eb8\nobjectCopy === 0x60400023bd80 , name === 0x100744ed8 , age === 0x100744eb8\nobjectMutableCopy === 0x60400023d180 , name === 0x100744ed8 , age === 0x100744eb8\n```\n\n\n# 五、@property中的copy关键字\n[iOS内存管理（6）--NSArray与NSMutableArray用copy修饰还是strong](https://blog.csdn.net/winzlee/article/details/51752354)\n[OC的深拷贝与浅拷贝--NSArray与NSMutableArray应该使用copy还是strong？](https://blog.csdn.net/G_eorge/article/details/78219957?locationNum=9&fps=1)\n\n* ##### NSString\n  *  strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**推荐**)copy 关键词：两个string指向不同的内存地址，互不影响；\n\n* ##### NSMutableString\n   * (**推荐**)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**崩溃**)copy 关键词：copy之后，就把变量string变成了不可变的NSString类型，对不可变的NSString使用了NSMutableString的方法appendString。\n\n* ##### NSArray\n  * strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**推荐**)copy 关键词：此时内存地址都是不同的，修改一个，互不影响；\n\n* ##### NSMutableArray\n  * (**推荐**)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**崩溃**)copy 关键词：copy之后，就把变量array变成了不可变的NSArray类型，对不可变的NSArray使用了NSMutableArray的方法addObject。\n\n\n> 当修饰可变类型的属性时，如NSMutableArray、NSMutableDictionary、NSMutableString，用strong。\n>\n> 当修饰不可变类型的属性时，如NSArray、NSDictionary、NSString，用copy。\n\n\n# 六、copy和block\n\n[block使用copy原理](https://blog.csdn.net/leonliu070602/article/details/52981884)\n\n简单来说，block就像一个函数指针，指向我们要使用的函数。\n\n就和函数调用一样的，不管你在哪里写了这个block，只要你把它放在了内存中（通过调用存在这个block的方法或者是函数），不管放在栈中还是在堆中，还是在静态区。只要他没有被销毁，你都可以通过你声明的block调用他。\n\n说到在类中声明一个block为什么要用copy修饰的话，那就要先说block的三种类型。\n\n\n\n1._NSConcreteGlobalBlock,全局的静态block，不会访问外部的变量。就是说如果你的block没有调用其他的外部变量，那你的block类型就是这种。例如：你仅仅在你的block里面写一个NSLog(\"hello world\");\n\n2._NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。这个block就是你声明的时候不用c opy修饰，并且你的block访问了外部变量。\n\n3._NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。好了，这个就是今天的主角 ，用copy修饰的block。\n\n\n\n我们知道，函数的声明周期是随着函数调用的结束就终止了。我们的block是写在函数中的。\n\n如果是全局静态block的话，他直到程序结束的时候，才会被被释放。但是我们实际操作中基本上不会使用到不访问外部变量的block。【但是在测试三种区别的时候，因为没有很好的理解这种block，（用没有copy修饰和没有访问外部变量的block）试了好多次，以为是放在静态区里面的block没有随函数结束被释放。这是个小坑】\n\n如果是保存在栈中的block，他会随着函数调用结束被销毁。从而导致我们在执行一个包含block的函数之后，就无法再访问这个block。因为（函数结束，函数栈就销毁了，存在函数里面的block也就没有了），我们再使用block时，就会产生空指针异常。\n\n如果是堆中的block，也就是copy修饰的block。他的生命 周期就是随着对象的销毁而结束的。只要对象不销毁，我们就可以调用的到在堆中的block。\n\n\n\n这就是为什么我们要用copy来修饰block。因为不用copy修饰的访问外部变量的block，只在他所在的函数被调用的那一瞬间可以使用。之后就消失了。\n\n\n\n\n\n\n","source":"_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy.md","raw":"---\ntitle: iOS中copy与mutableCopy\ndate: {{ date }}\ncategories: \n- 移动端iOS\ntags: [iOS, 面试题, copy]\n---\n\n# 参考文档\n- 杂七杂八\n  - [copy和mutableCopy都是浅拷贝！！！](https://blog.csdn.net/qq_18425655/article/details/51325921)\n  - [iOS中的copy，mutableCopy,深拷贝和浅拷贝](https://www.jianshu.com/p/a99f3da35560)\n  - [关于NSString的copy和mutableCopy](https://blog.csdn.net/small_smart_jin/article/details/50804607)\n  - [iOS中关键字copy与mutableCopy的详解，看我你就都懂了](https://www.jianshu.com/p/700f58eb0b86)\n  - [copy和mutableCopy到底是浅拷贝还是深拷贝？](\nhttps://blog.csdn.net/jslsblog/article/details/38563009)\n  - [青玉伏案：Objective-C中的深拷贝和浅拷贝](https://www.cnblogs.com/ludashi/p/3894151.html)\n\n- Stackoverflow\n  * [Deep Copy and Shallow Copy](https://stackoverflow.com/questions/9912794/deep-copy-and-shallow-copy)\n  * [What is the difference between a deep copy and a shallow copy?](https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy)\n\n- Documents\n  * [apple documentation Copy ](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html#//apple_ref/doc/uid/TP40010162-SW3)\n  * [维基百科 - Object copying](https://en.wikipedia.org/wiki/Object_copying)\n\n# 目录\n* 一、copy、mutableCopy\n* 二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\n* 三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\n* 四、另一个角度来看\n  * 4.1、浅拷贝\n  * 4.2、单层深copy\n  * 4.3、双层深拷贝\n  * 4.4、完全深拷贝\n  * 4.5、自定义类对象之间的深浅拷贝问题\n* 五、@property中的copy关键字\n* 六、copy和block\n\n\n# 一、copy、mutableCopy\n\n> * ##### copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\n> * ##### mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\n\n![](005.webp)\n\n\n\n# 二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\n\n```\n // const是常量字符串,存在常量区 \n // constStr指针存在栈区, 指针指向常量区 \nNSString * constStr = @\"const\";\nNSString * constStrCopy = [constStr copy];\nNSMutableString * constStrMutableCopy = [constStr mutableCopy];\nNSLog(@\"constStr = %p = %@\",constStr,constStr);\nNSLog(@\"constStrCopy = %p = %@\",constStrCopy,constStrCopy);\nNSLog(@\"constStrMutableCopy = %p = %@\",constStrMutableCopy,constStrMutableCopy);\n\n// originStr在栈中,指向堆区的地址 \nNSString * originStr = [NSString stringWithFormat:@\"origin\"];\nNSString * originStrCopy = [originStr copy];\nNSMutableString * originStrMutableCopy = [originStr mutableCopy];\nNSLog(@\"originStr = %p = %@\",originStr,originStr);\nNSLog(@\"originStrCopy = %p = %@\",originStrCopy,originStrCopy);\nNSLog(@\"originStrMutableCopy = %p = %@\",originStrMutableCopy,originStrMutableCopy);\n    \nNSMutableString *mutableOriginStr = [NSMutableString stringWithFormat:@\"mutableOrigin\"];\nNSMutableString *mutableOriginStrCopy = [mutableOriginStr copy];\nNSMutableString *mutableOriginStrMutableCopy = [mutableOriginStr mutableCopy];\nNSLog(@\"mutableOriginStr = %p = %@\",mutableOriginStr,mutableOriginStr);\nNSLog(@\"mutableOriginStrCopy = %p = %@\",mutableOriginStrCopy,mutableOriginStrCopy);\nNSLog(@\"mutableOriginStrMutableCopy = %p = %@\",mutableOriginStrMutableCopy,mutableOriginStrMutableCopy);\n\n\n// 返回值测试对象是否为mutable\n[constStrMutableCopy appendString:@\"const\"];\n[originStrMutableCopy appendString:@\"origin\"];\n#pragma warnning - ERROR\n[mutableOriginStrCopy appendString:@\"mm\"];   // ERROR\n```\n输出\n```\nconstStr = 0x109a32558\nconstStrCopy = 0x109a32558\nconstStrMutableCopy = 0x60000307ad00\n\noriginStr = 0xc117d077374719f4\noriginStrCopy = 0xc117d077374719f4\noriginStrMutableCopy = 0x60000307ac40\n\nmutableOriginStr = 0x60000307ac70\nmutableOriginStrCopy = 0x600003e7d960\nmutableOriginStrMutableCopy = 0x60000307adc0\n```\n\n![总结图](006.png)\n\n> ###### 总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\n> ######  copy返回的对象是不可变的，mutableCopy是可变的。\n\n**NSString内存分配结论：**\n[iOS的关于堆区和栈区](https://www.aliyun.com/jiaocheng/359361.html)\n```\n@\"\" 和 initWithString：方法生成的字符串分配在常量区，系统自动管理内存；\n\ninitWithFormat：和 stringWithFormat: 方法生成的字符串分配在堆区，autorelease；\n```\n\n# 三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\n\n[copy和mutableCopy都是浅拷贝！！！](https://blog.csdn.net/qq_18425655/article/details/51325921)\n[iOS深浅拷贝（纠错）](https://www.jianshu.com/p/ad1fb29b6070)\n\n\n![浅拷贝与深拷贝](007.png)\n\n\n> ###### 观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\n\n**验证一：NSArray进行copy与mutableCopy，并改变NSArray内元素值，查看拷贝对象内部值的变化。**\n```\n    NSArray * arr = [NSArray arrayWithObjects:\n                     [NSMutableString stringWithString:@\"one\"],\n                     [NSMutableString stringWithString:@\"two\"],\n                     [NSMutableString stringWithString:@\"three\"],\n                     [NSMutableString stringWithString:@\"four\"],nil];\n    NSArray * arrcopy = [arr copy];\n    NSMutableArray * arrmutablecopy = [arr mutableCopy];\n    NSLog(@\"arr = %p = %p\",arr,arr[0]);\n    NSLog(@\"arrcopy = %p = %p\",arrcopy,arrcopy[0]);\n    NSLog(@\"arrmutablecopy = %p = %p\",arrmutablecopy,arrmutablecopy[0]);\n\n    NSMutableString * mStr;\n    mStr = arr[0];\n    [mStr appendString:@\"--array\"];\n\n    NSLog(@\"改变内部元素后 arr：%@ = %p\",arr,arr[0]);\n    NSLog(@\"改变内部元素后 arrcopy：%@ = %p\",arrcopy,arrcopy[0]);\n    NSLog(@\"改变内部元素后 arrmutablecopy：%@ = %p\",arrmutablecopy,arrmutablecopy[0]);\n```\n\n输出\n```\narr = 0x604000446390 = 0x604000445d90\narrcopy = 0x604000446390 = 0x604000445d90\narrmutablecopy = 0x604000445520 = 0x604000445d90\n改变内部元素后 arr：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n改变内部元素后 arrcopy：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n改变内部元素后 arrmutablecopy：(\n    \"one--array\",\n    two,\n    three,\n    four\n) = 0x604000445d90\n```\n\n**验证二：NSMutableArray进行copy与mutableCopy，并改变NSMutableArray内元素值，查看拷贝对象内部值的变化。**\n\n```\n    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:\n                                  [NSMutableString stringWithString:@\"abc\"],\n                                  [NSMutableString stringWithString:@\"def\"],\n                                  [NSMutableString stringWithString:@\"ghi\"],\n                                  [NSMutableString stringWithString:@\"jkl\"], nil];\n    NSArray * mutableArrcopy = [mutableArr copy];\n    NSMutableArray * mutableArrmutablecopy = [mutableArr mutableCopy];\n    NSLog(@\"mutableArr = %p = %p\",mutableArr,mutableArr[0]);\n    NSLog(@\"mutableArrcopy = %p = %p\",mutableArrcopy,mutableArrcopy[0]);\n    NSLog(@\"mutableArrmutablecopy = %p = %p\",mutableArrmutablecopy,mutableArrmutablecopy[0]);\n    \n    NSMutableString * mStr1;\n    mStr1 = mutableArr[0];\n    [mStr1 appendString:@\"--mutablearray\"];\n    \n    [mutableArrmutablecopy addObject:@\"FFF\"];\n    \n    NSLog(@\"改变内部元素后 mutableArr：%@ = %p\",mutableArr,mutableArr[0]);\n    NSLog(@\"改变内部元素后 mutableArrcopy：%@ = %p\",mutableArrcopy,mutableArrcopy[0]);\n    NSLog(@\"改变内部元素后 mutableArrmutablecopy：%@ = %p\",mutableArrmutablecopy,mutableArrmutablecopy[0]);\n```\n\n输出\n```\nmutableArr = 0x604000452b10 = 0x604000452a80\nmutableArrcopy = 0x604000452b70 = 0x604000452a80\nmutableArrmutablecopy = 0x60400025fe90 = 0x604000452a80\n改变内部元素后 mutableArr：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl\n) = 0x604000452a80\n改变内部元素后 mutableArrcopy：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl\n) = 0x604000452a80\n改变内部元素后 mutableArrmutablecopy：(\n    \"abc--mutablearray\",\n    def,\n    ghi,\n    jkl,\n    FFF\n) = 0x604000452a80\n```\n\n![总结图](006.png)\n\n> ###### 总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\n> ###### mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\n\n\n> ###### 特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\n\n\n\n# 四、另一个角度来看\n\n## 4.1、浅拷贝\n\n[iOS 图文并茂的带你了解深拷贝与浅拷贝](https://www.cnblogs.com/beckwang0912/p/7212075.html)\n[Objective-C copy，看我就够了](https://www.jianshu.com/p/ebbac2fec4c6)\n\n```\nNSArray *arr = [NSArray arrayWithObjects:@\"1\", nil];\nNSArray *copyArr = [arr copy];\nNSLog(@\"%p\", arr);\nNSLog(@\"%p\", copyArr);\n```\n输出：浅拷贝\n```\n2018-10-24 10:00:17.256591+0800 TodayNews[2229:70407] 0x60000043d3c0\n2018-10-24 10:00:17.256705+0800 TodayNews[2229:70407] 0x60000043d3c0\n```\n\n## 4.2、单层深copy\n\n**这里的单层指的是完成了NSArray对象的深copy，而未对其容器内对象进行处理。**\n```\nNSArray *arr = [NSArray arrayWithObjects:@\"1\", nil];\nNSArray *copyArr = [arr mutableCopy];\n    \nNSLog(@\"%p\", arr);\nNSLog(@\"%p\", copyArr);\n    \n// 打印arr、copyArr内部元素进行对比\nNSLog(@\"%p\", arr[0]);\nNSLog(@\"%p\", copyArr[0]);\n```\n输出：\n```\n2018-10-24 10:06:10.985032+0800 TodayNews[2330:73697] 0x60000043a200\n2018-10-24 10:06:10.985224+0800 TodayNews[2330:73697] 0x600000642a60\n2018-10-24 10:06:10.985347+0800 TodayNews[2330:73697] 0x102bf00d8\n2018-10-24 10:06:10.985438+0800 TodayNews[2330:73697] 0x102bf00d8\n```\n\n## 4.3、双层深拷贝\n```\n    // 随意创建一个NSMutableString对象\n    NSMutableString *mutableString = [NSMutableString stringWithString:@\"1\"];\n    // 随意创建一个包涵NSMutableString的NSMutableArray对象\n    NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@\"1\"];\n    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];\n    // 将mutableString和mutableArr放入一个新的NSArray中\n    NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];\n    // 通过官方文档提供的方式创建copy\n    NSArray *testArrCopy = [[NSArray alloc] initWithArray:testArr copyItems:YES];\n    \n    // testArr和testArrCopy指针对比\n    NSLog(@\"%p\", testArr);\n    NSLog(@\"%p\", testArrCopy);\n    \n    // testArr和testArrCopy中元素指针对比\n    // mutableString对比\n    NSLog(@\"%p\", testArr[0]);\n    NSLog(@\"%p\", testArrCopy[0]);\n    // mutableArr对比\n    NSLog(@\"%p\", testArr[1]);\n    NSLog(@\"%p\", testArrCopy[1]);\n    \n    // mutableArr中的元素对比，即mutalbeString1对比\n    NSLog(@\"%p\", testArr[1][0]);\n    NSLog(@\"%p\", testArrCopy[1][0]);\n```\n输出\n\n```\n2018-10-24 10:10:20.994041+0800 TodayNews[2442:76854] 0x600000426500\n2018-10-24 10:10:20.994165+0800 TodayNews[2442:76854] 0x6000004264c0\n2018-10-24 10:10:20.994280+0800 TodayNews[2442:76854] 0x600000652870\n2018-10-24 10:10:20.994421+0800 TodayNews[2442:76854] 0xa000000000000311\n2018-10-24 10:10:20.994512+0800 TodayNews[2442:76854] 0x600000652960\n2018-10-24 10:10:20.994599+0800 TodayNews[2442:76854] 0x600000005ef0\n2018-10-24 10:10:20.994701+0800 TodayNews[2442:76854] 0x6000006528a0\n2018-10-24 10:10:20.994993+0800 TodayNews[2442:76854] 0x6000006528a0\n```\n\n## 4.4、完全深拷贝\n\n方式一：**如果想完美的解决NSArray嵌套NSArray这种情形，可以使用归档、解档的方式。**\n```\n// 随意创建一个NSMutableString对象\nNSMutableString *mutableString = [NSMutableString stringWithString:@\"1\"];\n// 随意创建一个包涵NSMutableString的NSMutableArray对象\nNSMutableString *mutalbeString1 = [NSMutableString stringWithString:@\"1\"];\nNSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];\n// 将mutableString和mutableArr放入一个新的NSArray中\nNSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];\n// 通过归档、解档方式创建copy\nNSArray *testArrCopy = [NSKeyedUnarchiver unarchiveObjectWithData:\n                            [NSKeyedArchiver archivedDataWithRootObject:testArr]];;\n    \n// testArr和testArrCopy指针对比\nNSLog(@\"%p\", testArr);\nNSLog(@\"%p\", testArrCopy);\n    \n// testArr和testArrCopy中元素指针对比\n// mutableString对比\nNSLog(@\"%p\", testArr[0]);\nNSLog(@\"%p\", testArrCopy[0]);\n// mutableArr对比\nNSLog(@\"%p\", testArr[1]);\nNSLog(@\"%p\", testArrCopy[1]);\n    \n// mutableArr中的元素对比，即mutalbeString1对比\nNSLog(@\"%p\", testArr[1][0]);\nNSLog(@\"%p\", testArrCopy[1][0]);\n```\n输出\n\n```\n2018-10-24 10:15:11.448311+0800 TodayNews[2549:80583] 0x600000430640\n2018-10-24 10:15:11.448435+0800 TodayNews[2549:80583] 0x6000004309e0\n2018-10-24 10:15:11.448528+0800 TodayNews[2549:80583] 0x60000045e2a0\n2018-10-24 10:15:11.448684+0800 TodayNews[2549:80583] 0x60000045e3c0\n2018-10-24 10:15:11.448773+0800 TodayNews[2549:80583] 0x60000045d0d0\n2018-10-24 10:15:11.448925+0800 TodayNews[2549:80583] 0x60000045e450\n2018-10-24 10:15:11.449012+0800 TodayNews[2549:80583] 0x60000045e1b0\n2018-10-24 10:15:11.449161+0800 TodayNews[2549:80583] 0x60000045e7e0\n```\n\n**方式二：```- (instancetype)initWithArray:(NSArray<ObjectType> *)array copyItems:(BOOL)flag```;**\n\n```\nNSMutableArray *marry1 = [[NSMutableArray alloc] init];\n    \nNSMutableString *mstr1 = [[NSMutableString alloc]initWithString:@\"value1\"];\nNSMutableString *mstr2 = [[NSMutableString alloc]initWithString:@\"value2\"];\n    \n[marry1 addObject:mstr1];\n[marry1 addObject:mstr2];\n    \nNSArray *marray2 = [[NSArray alloc] initWithArray:marry1 copyItems:YES];\n    \nNSLog(@\"marry1:%p - %@ \\r\\n\",marry1,marry1);\nNSLog(@\"marry2:%p - %@ \\r\\n\",marray2,marray2);\nNSLog(@\"数组元素地址:value1:%p - value2:%p \\r\\n\",marry1[0],marry1[1]);\nNSLog(@\"数组元素地址:value1:%p - value2:%p \\r\\n\",marray2[0],marray2[1]);\n```\n\n## 4.5、自定义类对象之间的深浅拷贝问题\n\n在Objective-C中并不是所有的类都支持拷贝；只有遵循NSCopying协议的类，才支持copy拷贝，只有遵循NSMutableCopying协议的类，才支持mutableCopy拷贝。如果没有遵循拷贝协议，拷贝时会出错。\n\n如果我们想再我们自定义的类中支持copy和mutableCopy那么我们就需要使我们定义的类遵循NSCopying和NSMutableCopying协议，代码如下：\n\n```\n@interface Study_CustomObject_copy_mutableCopy : NSObject <NSCopying, NSMutableCopying>  // 协议\n@property (copy,nonatomic) NSString *name;\n@property (copy,nonatomic) NSString *age;\n@end\n\n@implementation Study_CustomObject_copy_mutableCopy\n- (id)copyWithZone:(NSZone *)zone\n{\n    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];\n    customobject.age = self.age;\n    customobject.name = self.name;\n    return customobject;\n}\n- (id)mutableCopyWithZone:(NSZone *)zone {\n    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];\n    customobject.age = self.age;\n    customobject.name = self.name;\n    return customobject;\n}\n@end\n```\n\n\n**调用 、 输出**\n\n```\n// 调用\n{\n    Study_CustomObject_copy_mutableCopy *object = [[Study_CustomObject_copy_mutableCopy alloc]init];\n    object.age = @\"99\";\n    object.name = @\"lionsom\";\n    \n    Study_CustomObject_copy_mutableCopy *objectCopy = [object copy];\n    Study_CustomObject_copy_mutableCopy *objectMutableCopy = [object mutableCopy];\n    \n    NSLog(@\"object === %p , name === %p , age === %p\",object, object.name, object.age);\n    NSLog(@\"objectCopy === %p , name === %p , age === %p\",objectCopy, objectCopy.name, objectCopy.age);\n    NSLog(@\"objectMutableCopy === %p , name === %p , age === %p\",objectMutableCopy, objectMutableCopy.name, objectMutableCopy.age);\n}\n\n// 输出\nobject === 0x60400023d7a0 , name === 0x100744ed8 , age === 0x100744eb8\nobjectCopy === 0x60400023bd80 , name === 0x100744ed8 , age === 0x100744eb8\nobjectMutableCopy === 0x60400023d180 , name === 0x100744ed8 , age === 0x100744eb8\n```\n\n\n# 五、@property中的copy关键字\n[iOS内存管理（6）--NSArray与NSMutableArray用copy修饰还是strong](https://blog.csdn.net/winzlee/article/details/51752354)\n[OC的深拷贝与浅拷贝--NSArray与NSMutableArray应该使用copy还是strong？](https://blog.csdn.net/G_eorge/article/details/78219957?locationNum=9&fps=1)\n\n* ##### NSString\n  *  strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**推荐**)copy 关键词：两个string指向不同的内存地址，互不影响；\n\n* ##### NSMutableString\n   * (**推荐**)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**崩溃**)copy 关键词：copy之后，就把变量string变成了不可变的NSString类型，对不可变的NSString使用了NSMutableString的方法appendString。\n\n* ##### NSArray\n  * strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**推荐**)copy 关键词：此时内存地址都是不同的，修改一个，互不影响；\n\n* ##### NSMutableArray\n  * (**推荐**)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；\n  * (**崩溃**)copy 关键词：copy之后，就把变量array变成了不可变的NSArray类型，对不可变的NSArray使用了NSMutableArray的方法addObject。\n\n\n> 当修饰可变类型的属性时，如NSMutableArray、NSMutableDictionary、NSMutableString，用strong。\n>\n> 当修饰不可变类型的属性时，如NSArray、NSDictionary、NSString，用copy。\n\n\n# 六、copy和block\n\n[block使用copy原理](https://blog.csdn.net/leonliu070602/article/details/52981884)\n\n简单来说，block就像一个函数指针，指向我们要使用的函数。\n\n就和函数调用一样的，不管你在哪里写了这个block，只要你把它放在了内存中（通过调用存在这个block的方法或者是函数），不管放在栈中还是在堆中，还是在静态区。只要他没有被销毁，你都可以通过你声明的block调用他。\n\n说到在类中声明一个block为什么要用copy修饰的话，那就要先说block的三种类型。\n\n\n\n1._NSConcreteGlobalBlock,全局的静态block，不会访问外部的变量。就是说如果你的block没有调用其他的外部变量，那你的block类型就是这种。例如：你仅仅在你的block里面写一个NSLog(\"hello world\");\n\n2._NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。这个block就是你声明的时候不用c opy修饰，并且你的block访问了外部变量。\n\n3._NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。好了，这个就是今天的主角 ，用copy修饰的block。\n\n\n\n我们知道，函数的声明周期是随着函数调用的结束就终止了。我们的block是写在函数中的。\n\n如果是全局静态block的话，他直到程序结束的时候，才会被被释放。但是我们实际操作中基本上不会使用到不访问外部变量的block。【但是在测试三种区别的时候，因为没有很好的理解这种block，（用没有copy修饰和没有访问外部变量的block）试了好多次，以为是放在静态区里面的block没有随函数结束被释放。这是个小坑】\n\n如果是保存在栈中的block，他会随着函数调用结束被销毁。从而导致我们在执行一个包含block的函数之后，就无法再访问这个block。因为（函数结束，函数栈就销毁了，存在函数里面的block也就没有了），我们再使用block时，就会产生空指针异常。\n\n如果是堆中的block，也就是copy修饰的block。他的生命 周期就是随着对象的销毁而结束的。只要对象不销毁，我们就可以调用的到在堆中的block。\n\n\n\n这就是为什么我们要用copy来修饰block。因为不用copy修饰的访问外部变量的block，只在他所在的函数被调用的那一瞬间可以使用。之后就消失了。\n\n\n\n\n\n\n","slug":"iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy","published":1,"updated":"2024-08-08T02:41:42.385Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp9440028dgxrerka49cp","content":"<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li><p>杂七杂八</p>\n<ul>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_18425655/article/details/51325921\" >copy和mutableCopy都是浅拷贝！！！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/a99f3da35560\" >iOS中的copy，mutableCopy,深拷贝和浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/small_smart_jin/article/details/50804607\" >关于NSString的copy和mutableCopy <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/700f58eb0b86\" >iOS中关键字copy与mutableCopy的详解，看我你就都懂了 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/jslsblog/article/details/38563009\" >copy和mutableCopy到底是浅拷贝还是深拷贝？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ludashi/p/3894151.html\" >青玉伏案：Objective-C中的深拷贝和浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li><p>Stackoverflow</p>\n<ul>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/9912794/deep-copy-and-shallow-copy\" >Deep Copy and Shallow Copy <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy\" >What is the difference between a deep copy and a shallow copy? <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li><p>Documents</p>\n<ul>\n<li><a class=\"link\"   href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html#//apple_ref/doc/uid/TP40010162-SW3\" >apple documentation Copy  <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://en.wikipedia.org/wiki/Object_copying\" >维基百科 - Object copying <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>一、copy、mutableCopy</li>\n<li>二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。</li>\n<li>三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。</li>\n<li>四、另一个角度来看<ul>\n<li>4.1、浅拷贝</li>\n<li>4.2、单层深copy</li>\n<li>4.3、双层深拷贝</li>\n<li>4.4、完全深拷贝</li>\n<li>4.5、自定义类对象之间的深浅拷贝问题</li>\n</ul>\n</li>\n<li>五、@property中的copy关键字</li>\n<li>六、copy和block</li>\n</ul>\n<h1 id=\"一、copy、mutableCopy\"><a href=\"#一、copy、mutableCopy\" class=\"headerlink\" title=\"一、copy、mutableCopy\"></a>一、copy、mutableCopy</h1><blockquote>\n<ul>\n<li><h5 id=\"copy：不可变拷贝-遵循NSCopying协议，需要对应实现copyWithZone方法；\"><a href=\"#copy：不可变拷贝-遵循NSCopying协议，需要对应实现copyWithZone方法；\" class=\"headerlink\" title=\"copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\"></a>copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；</h5></li>\n<li><h5 id=\"mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone-方法；\"><a href=\"#mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone-方法；\" class=\"headerlink\" title=\"mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\"></a>mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；</h5></li>\n</ul>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/005.webp\"\n                     \n                ></p>\n<h1 id=\"二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\"><a href=\"#二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\" class=\"headerlink\" title=\"二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\"></a>二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。</h1><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // const是常量字符串,存在常量区 </span><br><span class=\"line\"> // constStr指针存在栈区, 指针指向常量区 </span><br><span class=\"line\">NSString * constStr = @&quot;const&quot;;</span><br><span class=\"line\">NSString * constStrCopy = [constStr copy];</span><br><span class=\"line\">NSMutableString * constStrMutableCopy = [constStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;constStr = %p = %@&quot;,constStr,constStr);</span><br><span class=\"line\">NSLog(@&quot;constStrCopy = %p = %@&quot;,constStrCopy,constStrCopy);</span><br><span class=\"line\">NSLog(@&quot;constStrMutableCopy = %p = %@&quot;,constStrMutableCopy,constStrMutableCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">// originStr在栈中,指向堆区的地址 </span><br><span class=\"line\">NSString * originStr = [NSString stringWithFormat:@&quot;origin&quot;];</span><br><span class=\"line\">NSString * originStrCopy = [originStr copy];</span><br><span class=\"line\">NSMutableString * originStrMutableCopy = [originStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;originStr = %p = %@&quot;,originStr,originStr);</span><br><span class=\"line\">NSLog(@&quot;originStrCopy = %p = %@&quot;,originStrCopy,originStrCopy);</span><br><span class=\"line\">NSLog(@&quot;originStrMutableCopy = %p = %@&quot;,originStrMutableCopy,originStrMutableCopy);</span><br><span class=\"line\">    </span><br><span class=\"line\">NSMutableString *mutableOriginStr = [NSMutableString stringWithFormat:@&quot;mutableOrigin&quot;];</span><br><span class=\"line\">NSMutableString *mutableOriginStrCopy = [mutableOriginStr copy];</span><br><span class=\"line\">NSMutableString *mutableOriginStrMutableCopy = [mutableOriginStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStr = %p = %@&quot;,mutableOriginStr,mutableOriginStr);</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStrCopy = %p = %@&quot;,mutableOriginStrCopy,mutableOriginStrCopy);</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStrMutableCopy = %p = %@&quot;,mutableOriginStrMutableCopy,mutableOriginStrMutableCopy);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 返回值测试对象是否为mutable</span><br><span class=\"line\">[constStrMutableCopy appendString:@&quot;const&quot;];</span><br><span class=\"line\">[originStrMutableCopy appendString:@&quot;origin&quot;];</span><br><span class=\"line\">#pragma warnning - ERROR</span><br><span class=\"line\">[mutableOriginStrCopy appendString:@&quot;mm&quot;];   // ERROR</span><br></pre></td></tr></table></figure></div>\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constStr = 0x109a32558</span><br><span class=\"line\">constStrCopy = 0x109a32558</span><br><span class=\"line\">constStrMutableCopy = 0x60000307ad00</span><br><span class=\"line\"></span><br><span class=\"line\">originStr = 0xc117d077374719f4</span><br><span class=\"line\">originStrCopy = 0xc117d077374719f4</span><br><span class=\"line\">originStrMutableCopy = 0x60000307ac40</span><br><span class=\"line\"></span><br><span class=\"line\">mutableOriginStr = 0x60000307ac70</span><br><span class=\"line\">mutableOriginStrCopy = 0x600003e7d960</span><br><span class=\"line\">mutableOriginStrMutableCopy = 0x60000307adc0</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/006.png\"\n                      alt=\"总结图\"\n                ></p>\n<blockquote>\n<h6 id=\"总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\"><a href=\"#总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\" class=\"headerlink\" title=\"总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\"></a>总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。</h6><h6 id=\"copy返回的对象是不可变的，mutableCopy是可变的。\"><a href=\"#copy返回的对象是不可变的，mutableCopy是可变的。\" class=\"headerlink\" title=\"copy返回的对象是不可变的，mutableCopy是可变的。\"></a>copy返回的对象是不可变的，mutableCopy是可变的。</h6></blockquote>\n<p><strong>NSString内存分配结论：</strong><br><a class=\"link\"   href=\"https://www.aliyun.com/jiaocheng/359361.html\" >iOS的关于堆区和栈区 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&quot;&quot; 和 initWithString：方法生成的字符串分配在常量区，系统自动管理内存；</span><br><span class=\"line\"></span><br><span class=\"line\">initWithFormat：和 stringWithFormat: 方法生成的字符串分配在堆区，autorelease；</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\"><a href=\"#三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\" class=\"headerlink\" title=\"三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\"></a>三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/qq_18425655/article/details/51325921\" >copy和mutableCopy都是浅拷贝！！！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/ad1fb29b6070\" >iOS深浅拷贝（纠错） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/007.png\"\n                      alt=\"浅拷贝与深拷贝\"\n                ></p>\n<blockquote>\n<h6 id=\"观点一：-所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\"><a href=\"#观点一：-所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\" class=\"headerlink\" title=\"观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\"></a>观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！</h6></blockquote>\n<p><strong>验证一：NSArray进行copy与mutableCopy，并改变NSArray内元素值，查看拷贝对象内部值的变化。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray * arr = [NSArray arrayWithObjects:</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;one&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;two&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;three&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;four&quot;],nil];</span><br><span class=\"line\">NSArray * arrcopy = [arr copy];</span><br><span class=\"line\">NSMutableArray * arrmutablecopy = [arr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;arr = %p = %p&quot;,arr,arr[0]);</span><br><span class=\"line\">NSLog(@&quot;arrcopy = %p = %p&quot;,arrcopy,arrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;arrmutablecopy = %p = %p&quot;,arrmutablecopy,arrmutablecopy[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * mStr;</span><br><span class=\"line\">mStr = arr[0];</span><br><span class=\"line\">[mStr appendString:@&quot;--array&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arr：%@ = %p&quot;,arr,arr[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arrcopy：%@ = %p&quot;,arrcopy,arrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arrmutablecopy：%@ = %p&quot;,arrmutablecopy,arrmutablecopy[0]);</span><br></pre></td></tr></table></figure></div>\n\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = 0x604000446390 = 0x604000445d90</span><br><span class=\"line\">arrcopy = 0x604000446390 = 0x604000445d90</span><br><span class=\"line\">arrmutablecopy = 0x604000445520 = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arr：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arrcopy：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arrmutablecopy：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>验证二：NSMutableArray进行copy与mutableCopy，并改变NSMutableArray内元素值，查看拷贝对象内部值的变化。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;abc&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;def&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;ghi&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;jkl&quot;], nil];</span><br><span class=\"line\">NSArray * mutableArrcopy = [mutableArr copy];</span><br><span class=\"line\">NSMutableArray * mutableArrmutablecopy = [mutableArr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;mutableArr = %p = %p&quot;,mutableArr,mutableArr[0]);</span><br><span class=\"line\">NSLog(@&quot;mutableArrcopy = %p = %p&quot;,mutableArrcopy,mutableArrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;mutableArrmutablecopy = %p = %p&quot;,mutableArrmutablecopy,mutableArrmutablecopy[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * mStr1;</span><br><span class=\"line\">mStr1 = mutableArr[0];</span><br><span class=\"line\">[mStr1 appendString:@&quot;--mutablearray&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">[mutableArrmutablecopy addObject:@&quot;FFF&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArr：%@ = %p&quot;,mutableArr,mutableArr[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArrcopy：%@ = %p&quot;,mutableArrcopy,mutableArrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArrmutablecopy：%@ = %p&quot;,mutableArrmutablecopy,mutableArrmutablecopy[0]);</span><br></pre></td></tr></table></figure></div>\n\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutableArr = 0x604000452b10 = 0x604000452a80</span><br><span class=\"line\">mutableArrcopy = 0x604000452b70 = 0x604000452a80</span><br><span class=\"line\">mutableArrmutablecopy = 0x60400025fe90 = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArr：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl</span><br><span class=\"line\">) = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArrcopy：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl</span><br><span class=\"line\">) = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArrmutablecopy：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl,</span><br><span class=\"line\">    FFF</span><br><span class=\"line\">) = 0x604000452a80</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/006.png\"\n                      alt=\"总结图\"\n                ></p>\n<blockquote>\n<h6 id=\"总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\"><a href=\"#总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\" class=\"headerlink\" title=\"总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\"></a>总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。</h6><h6 id=\"mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\"><a href=\"#mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\" class=\"headerlink\" title=\"mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\"></a>mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。</h6></blockquote>\n<blockquote>\n<h6 id=\"特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\"><a href=\"#特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\" class=\"headerlink\" title=\"特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\"></a>特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。</h6></blockquote>\n<h1 id=\"四、另一个角度来看\"><a href=\"#四、另一个角度来看\" class=\"headerlink\" title=\"四、另一个角度来看\"></a>四、另一个角度来看</h1><h2 id=\"4-1、浅拷贝\"><a href=\"#4-1、浅拷贝\" class=\"headerlink\" title=\"4.1、浅拷贝\"></a>4.1、浅拷贝</h2><p><a class=\"link\"   href=\"https://www.cnblogs.com/beckwang0912/p/7212075.html\" >iOS 图文并茂的带你了解深拷贝与浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/ebbac2fec4c6\" >Objective-C copy，看我就够了 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = [NSArray arrayWithObjects:@&quot;1&quot;, nil];</span><br><span class=\"line\">NSArray *copyArr = [arr copy];</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr);</span><br></pre></td></tr></table></figure></div>\n<p>输出：浅拷贝</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:00:17.256591+0800 TodayNews[2229:70407] 0x60000043d3c0</span><br><span class=\"line\">2018-10-24 10:00:17.256705+0800 TodayNews[2229:70407] 0x60000043d3c0</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"4-2、单层深copy\"><a href=\"#4-2、单层深copy\" class=\"headerlink\" title=\"4.2、单层深copy\"></a>4.2、单层深copy</h2><p><strong>这里的单层指的是完成了NSArray对象的深copy，而未对其容器内对象进行处理。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = [NSArray arrayWithObjects:@&quot;1&quot;, nil];</span><br><span class=\"line\">NSArray *copyArr = [arr mutableCopy];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr);</span><br><span class=\"line\">    </span><br><span class=\"line\">// 打印arr、copyArr内部元素进行对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr[0]);</span><br></pre></td></tr></table></figure></div>\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:06:10.985032+0800 TodayNews[2330:73697] 0x60000043a200</span><br><span class=\"line\">2018-10-24 10:06:10.985224+0800 TodayNews[2330:73697] 0x600000642a60</span><br><span class=\"line\">2018-10-24 10:06:10.985347+0800 TodayNews[2330:73697] 0x102bf00d8</span><br><span class=\"line\">2018-10-24 10:06:10.985438+0800 TodayNews[2330:73697] 0x102bf00d8</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"4-3、双层深拷贝\"><a href=\"#4-3、双层深拷贝\" class=\"headerlink\" title=\"4.3、双层深拷贝\"></a>4.3、双层深拷贝</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随意创建一个NSMutableString对象</span><br><span class=\"line\">NSMutableString *mutableString = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">// 随意创建一个包涵NSMutableString的NSMutableArray对象</span><br><span class=\"line\">NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];</span><br><span class=\"line\">// 将mutableString和mutableArr放入一个新的NSArray中</span><br><span class=\"line\">NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];</span><br><span class=\"line\">// 通过官方文档提供的方式创建copy</span><br><span class=\"line\">NSArray *testArrCopy = [[NSArray alloc] initWithArray:testArr copyItems:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">// testArr和testArrCopy指针对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">// testArr和testArrCopy中元素指针对比</span><br><span class=\"line\">// mutableString对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class=\"line\">// mutableArr对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">// mutableArr中的元素对比，即mutalbeString1对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br></pre></td></tr></table></figure></div>\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:10:20.994041+0800 TodayNews[2442:76854] 0x600000426500</span><br><span class=\"line\">2018-10-24 10:10:20.994165+0800 TodayNews[2442:76854] 0x6000004264c0</span><br><span class=\"line\">2018-10-24 10:10:20.994280+0800 TodayNews[2442:76854] 0x600000652870</span><br><span class=\"line\">2018-10-24 10:10:20.994421+0800 TodayNews[2442:76854] 0xa000000000000311</span><br><span class=\"line\">2018-10-24 10:10:20.994512+0800 TodayNews[2442:76854] 0x600000652960</span><br><span class=\"line\">2018-10-24 10:10:20.994599+0800 TodayNews[2442:76854] 0x600000005ef0</span><br><span class=\"line\">2018-10-24 10:10:20.994701+0800 TodayNews[2442:76854] 0x6000006528a0</span><br><span class=\"line\">2018-10-24 10:10:20.994993+0800 TodayNews[2442:76854] 0x6000006528a0</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"4-4、完全深拷贝\"><a href=\"#4-4、完全深拷贝\" class=\"headerlink\" title=\"4.4、完全深拷贝\"></a>4.4、完全深拷贝</h2><p>方式一：<strong>如果想完美的解决NSArray嵌套NSArray这种情形，可以使用归档、解档的方式。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随意创建一个NSMutableString对象</span><br><span class=\"line\">NSMutableString *mutableString = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">// 随意创建一个包涵NSMutableString的NSMutableArray对象</span><br><span class=\"line\">NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];</span><br><span class=\"line\">// 将mutableString和mutableArr放入一个新的NSArray中</span><br><span class=\"line\">NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];</span><br><span class=\"line\">// 通过归档、解档方式创建copy</span><br><span class=\"line\">NSArray *testArrCopy = [NSKeyedUnarchiver unarchiveObjectWithData:</span><br><span class=\"line\">                            [NSKeyedArchiver archivedDataWithRootObject:testArr]];;</span><br><span class=\"line\">    </span><br><span class=\"line\">// testArr和testArrCopy指针对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class=\"line\">    </span><br><span class=\"line\">// testArr和testArrCopy中元素指针对比</span><br><span class=\"line\">// mutableString对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class=\"line\">// mutableArr对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class=\"line\">    </span><br><span class=\"line\">// mutableArr中的元素对比，即mutalbeString1对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br></pre></td></tr></table></figure></div>\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:15:11.448311+0800 TodayNews[2549:80583] 0x600000430640</span><br><span class=\"line\">2018-10-24 10:15:11.448435+0800 TodayNews[2549:80583] 0x6000004309e0</span><br><span class=\"line\">2018-10-24 10:15:11.448528+0800 TodayNews[2549:80583] 0x60000045e2a0</span><br><span class=\"line\">2018-10-24 10:15:11.448684+0800 TodayNews[2549:80583] 0x60000045e3c0</span><br><span class=\"line\">2018-10-24 10:15:11.448773+0800 TodayNews[2549:80583] 0x60000045d0d0</span><br><span class=\"line\">2018-10-24 10:15:11.448925+0800 TodayNews[2549:80583] 0x60000045e450</span><br><span class=\"line\">2018-10-24 10:15:11.449012+0800 TodayNews[2549:80583] 0x60000045e1b0</span><br><span class=\"line\">2018-10-24 10:15:11.449161+0800 TodayNews[2549:80583] 0x60000045e7e0</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>方式二：<code>- (instancetype)initWithArray:(NSArray&lt;ObjectType&gt; *)array copyItems:(BOOL)flag</code>;</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *marry1 = [[NSMutableArray alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSMutableString *mstr1 = [[NSMutableString alloc]initWithString:@&quot;value1&quot;];</span><br><span class=\"line\">NSMutableString *mstr2 = [[NSMutableString alloc]initWithString:@&quot;value2&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[marry1 addObject:mstr1];</span><br><span class=\"line\">[marry1 addObject:mstr2];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSArray *marray2 = [[NSArray alloc] initWithArray:marry1 copyItems:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;marry1:%p - %@ \\r\\n&quot;,marry1,marry1);</span><br><span class=\"line\">NSLog(@&quot;marry2:%p - %@ \\r\\n&quot;,marray2,marray2);</span><br><span class=\"line\">NSLog(@&quot;数组元素地址:value1:%p - value2:%p \\r\\n&quot;,marry1[0],marry1[1]);</span><br><span class=\"line\">NSLog(@&quot;数组元素地址:value1:%p - value2:%p \\r\\n&quot;,marray2[0],marray2[1]);</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"4-5、自定义类对象之间的深浅拷贝问题\"><a href=\"#4-5、自定义类对象之间的深浅拷贝问题\" class=\"headerlink\" title=\"4.5、自定义类对象之间的深浅拷贝问题\"></a>4.5、自定义类对象之间的深浅拷贝问题</h2><p>在Objective-C中并不是所有的类都支持拷贝；只有遵循NSCopying协议的类，才支持copy拷贝，只有遵循NSMutableCopying协议的类，才支持mutableCopy拷贝。如果没有遵循拷贝协议，拷贝时会出错。</p>\n<p>如果我们想再我们自定义的类中支持copy和mutableCopy那么我们就需要使我们定义的类遵循NSCopying和NSMutableCopying协议，代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Study_CustomObject_copy_mutableCopy : NSObject &lt;NSCopying, NSMutableCopying&gt;  // 协议</span><br><span class=\"line\">@property (copy,nonatomic) NSString *name;</span><br><span class=\"line\">@property (copy,nonatomic) NSString *age;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Study_CustomObject_copy_mutableCopy</span><br><span class=\"line\">- (id)copyWithZone:(NSZone *)zone</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];</span><br><span class=\"line\">    customobject.age = self.age;</span><br><span class=\"line\">    customobject.name = self.name;</span><br><span class=\"line\">    return customobject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (id)mutableCopyWithZone:(NSZone *)zone &#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];</span><br><span class=\"line\">    customobject.age = self.age;</span><br><span class=\"line\">    customobject.name = self.name;</span><br><span class=\"line\">    return customobject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n\n\n<p><strong>调用 、 输出</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *object = [[Study_CustomObject_copy_mutableCopy alloc]init];</span><br><span class=\"line\">    object.age = @&quot;99&quot;;</span><br><span class=\"line\">    object.name = @&quot;lionsom&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *objectCopy = [object copy];</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *objectMutableCopy = [object mutableCopy];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;object === %p , name === %p , age === %p&quot;,object, object.name, object.age);</span><br><span class=\"line\">    NSLog(@&quot;objectCopy === %p , name === %p , age === %p&quot;,objectCopy, objectCopy.name, objectCopy.age);</span><br><span class=\"line\">    NSLog(@&quot;objectMutableCopy === %p , name === %p , age === %p&quot;,objectMutableCopy, objectMutableCopy.name, objectMutableCopy.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">object === 0x60400023d7a0 , name === 0x100744ed8 , age === 0x100744eb8</span><br><span class=\"line\">objectCopy === 0x60400023bd80 , name === 0x100744ed8 , age === 0x100744eb8</span><br><span class=\"line\">objectMutableCopy === 0x60400023d180 , name === 0x100744ed8 , age === 0x100744eb8</span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"五、-property中的copy关键字\"><a href=\"#五、-property中的copy关键字\" class=\"headerlink\" title=\"五、@property中的copy关键字\"></a>五、@property中的copy关键字</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/winzlee/article/details/51752354\" >iOS内存管理（6）–NSArray与NSMutableArray用copy修饰还是strong <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/G_eorge/article/details/78219957?locationNum=9&fps=1\" >OC的深拷贝与浅拷贝–NSArray与NSMutableArray应该使用copy还是strong？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ul>\n<li><h5 id=\"NSString\"><a href=\"#NSString\" class=\"headerlink\" title=\"NSString\"></a>NSString</h5><ul>\n<li>strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>推荐</strong>)copy 关键词：两个string指向不同的内存地址，互不影响；</li>\n</ul>\n</li>\n<li><h5 id=\"NSMutableString\"><a href=\"#NSMutableString\" class=\"headerlink\" title=\"NSMutableString\"></a>NSMutableString</h5><ul>\n<li>(<strong>推荐</strong>)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>崩溃</strong>)copy 关键词：copy之后，就把变量string变成了不可变的NSString类型，对不可变的NSString使用了NSMutableString的方法appendString。</li>\n</ul>\n</li>\n<li><h5 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h5><ul>\n<li>strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>推荐</strong>)copy 关键词：此时内存地址都是不同的，修改一个，互不影响；</li>\n</ul>\n</li>\n<li><h5 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h5><ul>\n<li>(<strong>推荐</strong>)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>崩溃</strong>)copy 关键词：copy之后，就把变量array变成了不可变的NSArray类型，对不可变的NSArray使用了NSMutableArray的方法addObject。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>当修饰可变类型的属性时，如NSMutableArray、NSMutableDictionary、NSMutableString，用strong。</p>\n<p>当修饰不可变类型的属性时，如NSArray、NSDictionary、NSString，用copy。</p>\n</blockquote>\n<h1 id=\"六、copy和block\"><a href=\"#六、copy和block\" class=\"headerlink\" title=\"六、copy和block\"></a>六、copy和block</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/leonliu070602/article/details/52981884\" >block使用copy原理 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>简单来说，block就像一个函数指针，指向我们要使用的函数。</p>\n<p>就和函数调用一样的，不管你在哪里写了这个block，只要你把它放在了内存中（通过调用存在这个block的方法或者是函数），不管放在栈中还是在堆中，还是在静态区。只要他没有被销毁，你都可以通过你声明的block调用他。</p>\n<p>说到在类中声明一个block为什么要用copy修饰的话，那就要先说block的三种类型。</p>\n<p>1._NSConcreteGlobalBlock,全局的静态block，不会访问外部的变量。就是说如果你的block没有调用其他的外部变量，那你的block类型就是这种。例如：你仅仅在你的block里面写一个NSLog(“hello world”);</p>\n<p>2._NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。这个block就是你声明的时候不用c opy修饰，并且你的block访问了外部变量。</p>\n<p>3._NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。好了，这个就是今天的主角 ，用copy修饰的block。</p>\n<p>我们知道，函数的声明周期是随着函数调用的结束就终止了。我们的block是写在函数中的。</p>\n<p>如果是全局静态block的话，他直到程序结束的时候，才会被被释放。但是我们实际操作中基本上不会使用到不访问外部变量的block。【但是在测试三种区别的时候，因为没有很好的理解这种block，（用没有copy修饰和没有访问外部变量的block）试了好多次，以为是放在静态区里面的block没有随函数结束被释放。这是个小坑】</p>\n<p>如果是保存在栈中的block，他会随着函数调用结束被销毁。从而导致我们在执行一个包含block的函数之后，就无法再访问这个block。因为（函数结束，函数栈就销毁了，存在函数里面的block也就没有了），我们再使用block时，就会产生空指针异常。</p>\n<p>如果是堆中的block，也就是copy修饰的block。他的生命 周期就是随着对象的销毁而结束的。只要对象不销毁，我们就可以调用的到在堆中的block。</p>\n<p>这就是为什么我们要用copy来修饰block。因为不用copy修饰的访问外部变量的block，只在他所在的函数被调用的那一瞬间可以使用。之后就消失了。</p>\n","excerpt":"","more":"<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li><p>杂七杂八</p>\n<ul>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_18425655/article/details/51325921\" >copy和mutableCopy都是浅拷贝！！！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/a99f3da35560\" >iOS中的copy，mutableCopy,深拷贝和浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/small_smart_jin/article/details/50804607\" >关于NSString的copy和mutableCopy <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/700f58eb0b86\" >iOS中关键字copy与mutableCopy的详解，看我你就都懂了 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/jslsblog/article/details/38563009\" >copy和mutableCopy到底是浅拷贝还是深拷贝？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ludashi/p/3894151.html\" >青玉伏案：Objective-C中的深拷贝和浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li><p>Stackoverflow</p>\n<ul>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/9912794/deep-copy-and-shallow-copy\" >Deep Copy and Shallow Copy <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy\" >What is the difference between a deep copy and a shallow copy? <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li><p>Documents</p>\n<ul>\n<li><a class=\"link\"   href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html#//apple_ref/doc/uid/TP40010162-SW3\" >apple documentation Copy  <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://en.wikipedia.org/wiki/Object_copying\" >维基百科 - Object copying <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>一、copy、mutableCopy</li>\n<li>二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。</li>\n<li>三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。</li>\n<li>四、另一个角度来看<ul>\n<li>4.1、浅拷贝</li>\n<li>4.2、单层深copy</li>\n<li>4.3、双层深拷贝</li>\n<li>4.4、完全深拷贝</li>\n<li>4.5、自定义类对象之间的深浅拷贝问题</li>\n</ul>\n</li>\n<li>五、@property中的copy关键字</li>\n<li>六、copy和block</li>\n</ul>\n<h1 id=\"一、copy、mutableCopy\"><a href=\"#一、copy、mutableCopy\" class=\"headerlink\" title=\"一、copy、mutableCopy\"></a>一、copy、mutableCopy</h1><blockquote>\n<ul>\n<li><h5 id=\"copy：不可变拷贝-遵循NSCopying协议，需要对应实现copyWithZone方法；\"><a href=\"#copy：不可变拷贝-遵循NSCopying协议，需要对应实现copyWithZone方法；\" class=\"headerlink\" title=\"copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；\"></a>copy：不可变拷贝,遵循NSCopying协议，需要对应实现copyWithZone方法；</h5></li>\n<li><h5 id=\"mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone-方法；\"><a href=\"#mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone-方法；\" class=\"headerlink\" title=\"mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；\"></a>mutableCopy：可变拷贝，遵循NSMutableCopying协议，需要对应实现mutableCopyWithZone:方法；</h5></li>\n</ul>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/005.webp\"\n                     \n                ></p>\n<h1 id=\"二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\"><a href=\"#二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\" class=\"headerlink\" title=\"二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。\"></a>二、系统的非容器类对象：这里指的是NSString、NSNumber等对象。</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // const是常量字符串,存在常量区 </span><br><span class=\"line\"> // constStr指针存在栈区, 指针指向常量区 </span><br><span class=\"line\">NSString * constStr = @&quot;const&quot;;</span><br><span class=\"line\">NSString * constStrCopy = [constStr copy];</span><br><span class=\"line\">NSMutableString * constStrMutableCopy = [constStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;constStr = %p = %@&quot;,constStr,constStr);</span><br><span class=\"line\">NSLog(@&quot;constStrCopy = %p = %@&quot;,constStrCopy,constStrCopy);</span><br><span class=\"line\">NSLog(@&quot;constStrMutableCopy = %p = %@&quot;,constStrMutableCopy,constStrMutableCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">// originStr在栈中,指向堆区的地址 </span><br><span class=\"line\">NSString * originStr = [NSString stringWithFormat:@&quot;origin&quot;];</span><br><span class=\"line\">NSString * originStrCopy = [originStr copy];</span><br><span class=\"line\">NSMutableString * originStrMutableCopy = [originStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;originStr = %p = %@&quot;,originStr,originStr);</span><br><span class=\"line\">NSLog(@&quot;originStrCopy = %p = %@&quot;,originStrCopy,originStrCopy);</span><br><span class=\"line\">NSLog(@&quot;originStrMutableCopy = %p = %@&quot;,originStrMutableCopy,originStrMutableCopy);</span><br><span class=\"line\">    </span><br><span class=\"line\">NSMutableString *mutableOriginStr = [NSMutableString stringWithFormat:@&quot;mutableOrigin&quot;];</span><br><span class=\"line\">NSMutableString *mutableOriginStrCopy = [mutableOriginStr copy];</span><br><span class=\"line\">NSMutableString *mutableOriginStrMutableCopy = [mutableOriginStr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStr = %p = %@&quot;,mutableOriginStr,mutableOriginStr);</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStrCopy = %p = %@&quot;,mutableOriginStrCopy,mutableOriginStrCopy);</span><br><span class=\"line\">NSLog(@&quot;mutableOriginStrMutableCopy = %p = %@&quot;,mutableOriginStrMutableCopy,mutableOriginStrMutableCopy);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 返回值测试对象是否为mutable</span><br><span class=\"line\">[constStrMutableCopy appendString:@&quot;const&quot;];</span><br><span class=\"line\">[originStrMutableCopy appendString:@&quot;origin&quot;];</span><br><span class=\"line\">#pragma warnning - ERROR</span><br><span class=\"line\">[mutableOriginStrCopy appendString:@&quot;mm&quot;];   // ERROR</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constStr = 0x109a32558</span><br><span class=\"line\">constStrCopy = 0x109a32558</span><br><span class=\"line\">constStrMutableCopy = 0x60000307ad00</span><br><span class=\"line\"></span><br><span class=\"line\">originStr = 0xc117d077374719f4</span><br><span class=\"line\">originStrCopy = 0xc117d077374719f4</span><br><span class=\"line\">originStrMutableCopy = 0x60000307ac40</span><br><span class=\"line\"></span><br><span class=\"line\">mutableOriginStr = 0x60000307ac70</span><br><span class=\"line\">mutableOriginStrCopy = 0x600003e7d960</span><br><span class=\"line\">mutableOriginStrMutableCopy = 0x60000307adc0</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/006.png\"\n                      alt=\"总结图\"\n                ></p>\n<blockquote>\n<h6 id=\"总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\"><a href=\"#总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\" class=\"headerlink\" title=\"总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。\"></a>总结：对于系统的非容器类对象，我们可以认为，如果对不可变对象复制，copy是指针复制（浅拷贝）和mutableCopy就是对象复制（深拷贝）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。</h6><h6 id=\"copy返回的对象是不可变的，mutableCopy是可变的。\"><a href=\"#copy返回的对象是不可变的，mutableCopy是可变的。\" class=\"headerlink\" title=\"copy返回的对象是不可变的，mutableCopy是可变的。\"></a>copy返回的对象是不可变的，mutableCopy是可变的。</h6></blockquote>\n<p><strong>NSString内存分配结论：</strong><br><a class=\"link\"   href=\"https://www.aliyun.com/jiaocheng/359361.html\" >iOS的关于堆区和栈区 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&quot;&quot; 和 initWithString：方法生成的字符串分配在常量区，系统自动管理内存；</span><br><span class=\"line\"></span><br><span class=\"line\">initWithFormat：和 stringWithFormat: 方法生成的字符串分配在堆区，autorelease；</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\"><a href=\"#三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\" class=\"headerlink\" title=\"三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。\"></a>三、系统的容器类对象：指NSArray，NSSet，NSDictionary等。</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/qq_18425655/article/details/51325921\" >copy和mutableCopy都是浅拷贝！！！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/ad1fb29b6070\" >iOS深浅拷贝（纠错） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/007.png\"\n                      alt=\"浅拷贝与深拷贝\"\n                ></p>\n<blockquote>\n<h6 id=\"观点一：-所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\"><a href=\"#观点一：-所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\" class=\"headerlink\" title=\"观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！\"></a>观点一： 所有系统容器类的copy或mutableCopy方法，都是浅拷贝！！！</h6></blockquote>\n<p><strong>验证一：NSArray进行copy与mutableCopy，并改变NSArray内元素值，查看拷贝对象内部值的变化。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray * arr = [NSArray arrayWithObjects:</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;one&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;two&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;three&quot;],</span><br><span class=\"line\">                 [NSMutableString stringWithString:@&quot;four&quot;],nil];</span><br><span class=\"line\">NSArray * arrcopy = [arr copy];</span><br><span class=\"line\">NSMutableArray * arrmutablecopy = [arr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;arr = %p = %p&quot;,arr,arr[0]);</span><br><span class=\"line\">NSLog(@&quot;arrcopy = %p = %p&quot;,arrcopy,arrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;arrmutablecopy = %p = %p&quot;,arrmutablecopy,arrmutablecopy[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * mStr;</span><br><span class=\"line\">mStr = arr[0];</span><br><span class=\"line\">[mStr appendString:@&quot;--array&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arr：%@ = %p&quot;,arr,arr[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arrcopy：%@ = %p&quot;,arrcopy,arrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 arrmutablecopy：%@ = %p&quot;,arrmutablecopy,arrmutablecopy[0]);</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = 0x604000446390 = 0x604000445d90</span><br><span class=\"line\">arrcopy = 0x604000446390 = 0x604000445d90</span><br><span class=\"line\">arrmutablecopy = 0x604000445520 = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arr：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arrcopy：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br><span class=\"line\">改变内部元素后 arrmutablecopy：(</span><br><span class=\"line\">    &quot;one--array&quot;,</span><br><span class=\"line\">    two,</span><br><span class=\"line\">    three,</span><br><span class=\"line\">    four</span><br><span class=\"line\">) = 0x604000445d90</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证二：NSMutableArray进行copy与mutableCopy，并改变NSMutableArray内元素值，查看拷贝对象内部值的变化。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;abc&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;def&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;ghi&quot;],</span><br><span class=\"line\">                              [NSMutableString stringWithString:@&quot;jkl&quot;], nil];</span><br><span class=\"line\">NSArray * mutableArrcopy = [mutableArr copy];</span><br><span class=\"line\">NSMutableArray * mutableArrmutablecopy = [mutableArr mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;mutableArr = %p = %p&quot;,mutableArr,mutableArr[0]);</span><br><span class=\"line\">NSLog(@&quot;mutableArrcopy = %p = %p&quot;,mutableArrcopy,mutableArrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;mutableArrmutablecopy = %p = %p&quot;,mutableArrmutablecopy,mutableArrmutablecopy[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * mStr1;</span><br><span class=\"line\">mStr1 = mutableArr[0];</span><br><span class=\"line\">[mStr1 appendString:@&quot;--mutablearray&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">[mutableArrmutablecopy addObject:@&quot;FFF&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArr：%@ = %p&quot;,mutableArr,mutableArr[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArrcopy：%@ = %p&quot;,mutableArrcopy,mutableArrcopy[0]);</span><br><span class=\"line\">NSLog(@&quot;改变内部元素后 mutableArrmutablecopy：%@ = %p&quot;,mutableArrmutablecopy,mutableArrmutablecopy[0]);</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutableArr = 0x604000452b10 = 0x604000452a80</span><br><span class=\"line\">mutableArrcopy = 0x604000452b70 = 0x604000452a80</span><br><span class=\"line\">mutableArrmutablecopy = 0x60400025fe90 = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArr：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl</span><br><span class=\"line\">) = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArrcopy：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl</span><br><span class=\"line\">) = 0x604000452a80</span><br><span class=\"line\">改变内部元素后 mutableArrmutablecopy：(</span><br><span class=\"line\">    &quot;abc--mutablearray&quot;,</span><br><span class=\"line\">    def,</span><br><span class=\"line\">    ghi,</span><br><span class=\"line\">    jkl,</span><br><span class=\"line\">    FFF</span><br><span class=\"line\">) = 0x604000452a80</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/001-OC%E5%B1%9E%E6%80%A7%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97/012-copy%E5%85%B3%E9%94%AE%E5%AD%97/copy%E4%B8%8EmutableCopy/006.png\"\n                      alt=\"总结图\"\n                ></p>\n<blockquote>\n<h6 id=\"总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\"><a href=\"#总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\" class=\"headerlink\" title=\"总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。\"></a>总结：copy操作返回的必然是一个不可变对象，无论源对象是可变对象还是不可变对象。如果源对象是一个不可变对象，那么它们（源对象和新生成的对象）指向同一个对象，如果源对象是可变对象，它们指向不同对象。</h6><h6 id=\"mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\"><a href=\"#mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\" class=\"headerlink\" title=\"mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。\"></a>mutableCopy返回的必然是一个可变对象，无论源对象是可变对象还是不可变对象，它们（源对象和新生成的对象）仍指向不同地址，是两个对象。</h6></blockquote>\n<blockquote>\n<h6 id=\"特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\"><a href=\"#特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\" class=\"headerlink\" title=\"特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。\"></a>特别注意的是：对于集合类的可变对象来说，深拷贝并非严格意义上的深复制，只能算是单层深复制，即虽然新开辟了内存地址，但是存放在内存上的值（也就是数组里的元素仍然之原数组元素值，并没有另外复制一份），这就叫做单层深复制。</h6></blockquote>\n<h1 id=\"四、另一个角度来看\"><a href=\"#四、另一个角度来看\" class=\"headerlink\" title=\"四、另一个角度来看\"></a>四、另一个角度来看</h1><h2 id=\"4-1、浅拷贝\"><a href=\"#4-1、浅拷贝\" class=\"headerlink\" title=\"4.1、浅拷贝\"></a>4.1、浅拷贝</h2><p><a class=\"link\"   href=\"https://www.cnblogs.com/beckwang0912/p/7212075.html\" >iOS 图文并茂的带你了解深拷贝与浅拷贝 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/ebbac2fec4c6\" >Objective-C copy，看我就够了 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = [NSArray arrayWithObjects:@&quot;1&quot;, nil];</span><br><span class=\"line\">NSArray *copyArr = [arr copy];</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr);</span><br></pre></td></tr></table></figure>\n<p>输出：浅拷贝</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:00:17.256591+0800 TodayNews[2229:70407] 0x60000043d3c0</span><br><span class=\"line\">2018-10-24 10:00:17.256705+0800 TodayNews[2229:70407] 0x60000043d3c0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2、单层深copy\"><a href=\"#4-2、单层深copy\" class=\"headerlink\" title=\"4.2、单层深copy\"></a>4.2、单层深copy</h2><p><strong>这里的单层指的是完成了NSArray对象的深copy，而未对其容器内对象进行处理。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = [NSArray arrayWithObjects:@&quot;1&quot;, nil];</span><br><span class=\"line\">NSArray *copyArr = [arr mutableCopy];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr);</span><br><span class=\"line\">    </span><br><span class=\"line\">// 打印arr、copyArr内部元素进行对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, arr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, copyArr[0]);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:06:10.985032+0800 TodayNews[2330:73697] 0x60000043a200</span><br><span class=\"line\">2018-10-24 10:06:10.985224+0800 TodayNews[2330:73697] 0x600000642a60</span><br><span class=\"line\">2018-10-24 10:06:10.985347+0800 TodayNews[2330:73697] 0x102bf00d8</span><br><span class=\"line\">2018-10-24 10:06:10.985438+0800 TodayNews[2330:73697] 0x102bf00d8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3、双层深拷贝\"><a href=\"#4-3、双层深拷贝\" class=\"headerlink\" title=\"4.3、双层深拷贝\"></a>4.3、双层深拷贝</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随意创建一个NSMutableString对象</span><br><span class=\"line\">NSMutableString *mutableString = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">// 随意创建一个包涵NSMutableString的NSMutableArray对象</span><br><span class=\"line\">NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];</span><br><span class=\"line\">// 将mutableString和mutableArr放入一个新的NSArray中</span><br><span class=\"line\">NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];</span><br><span class=\"line\">// 通过官方文档提供的方式创建copy</span><br><span class=\"line\">NSArray *testArrCopy = [[NSArray alloc] initWithArray:testArr copyItems:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">// testArr和testArrCopy指针对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">// testArr和testArrCopy中元素指针对比</span><br><span class=\"line\">// mutableString对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class=\"line\">// mutableArr对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">// mutableArr中的元素对比，即mutalbeString1对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:10:20.994041+0800 TodayNews[2442:76854] 0x600000426500</span><br><span class=\"line\">2018-10-24 10:10:20.994165+0800 TodayNews[2442:76854] 0x6000004264c0</span><br><span class=\"line\">2018-10-24 10:10:20.994280+0800 TodayNews[2442:76854] 0x600000652870</span><br><span class=\"line\">2018-10-24 10:10:20.994421+0800 TodayNews[2442:76854] 0xa000000000000311</span><br><span class=\"line\">2018-10-24 10:10:20.994512+0800 TodayNews[2442:76854] 0x600000652960</span><br><span class=\"line\">2018-10-24 10:10:20.994599+0800 TodayNews[2442:76854] 0x600000005ef0</span><br><span class=\"line\">2018-10-24 10:10:20.994701+0800 TodayNews[2442:76854] 0x6000006528a0</span><br><span class=\"line\">2018-10-24 10:10:20.994993+0800 TodayNews[2442:76854] 0x6000006528a0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-4、完全深拷贝\"><a href=\"#4-4、完全深拷贝\" class=\"headerlink\" title=\"4.4、完全深拷贝\"></a>4.4、完全深拷贝</h2><p>方式一：<strong>如果想完美的解决NSArray嵌套NSArray这种情形，可以使用归档、解档的方式。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随意创建一个NSMutableString对象</span><br><span class=\"line\">NSMutableString *mutableString = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">// 随意创建一个包涵NSMutableString的NSMutableArray对象</span><br><span class=\"line\">NSMutableString *mutalbeString1 = [NSMutableString stringWithString:@&quot;1&quot;];</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutalbeString1, nil];</span><br><span class=\"line\">// 将mutableString和mutableArr放入一个新的NSArray中</span><br><span class=\"line\">NSArray *testArr = [NSArray arrayWithObjects:mutableString, mutableArr, nil];</span><br><span class=\"line\">// 通过归档、解档方式创建copy</span><br><span class=\"line\">NSArray *testArrCopy = [NSKeyedUnarchiver unarchiveObjectWithData:</span><br><span class=\"line\">                            [NSKeyedArchiver archivedDataWithRootObject:testArr]];;</span><br><span class=\"line\">    </span><br><span class=\"line\">// testArr和testArrCopy指针对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class=\"line\">    </span><br><span class=\"line\">// testArr和testArrCopy中元素指针对比</span><br><span class=\"line\">// mutableString对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class=\"line\">// mutableArr对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class=\"line\">    </span><br><span class=\"line\">// mutableArr中的元素对比，即mutalbeString1对比</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class=\"line\">NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-10-24 10:15:11.448311+0800 TodayNews[2549:80583] 0x600000430640</span><br><span class=\"line\">2018-10-24 10:15:11.448435+0800 TodayNews[2549:80583] 0x6000004309e0</span><br><span class=\"line\">2018-10-24 10:15:11.448528+0800 TodayNews[2549:80583] 0x60000045e2a0</span><br><span class=\"line\">2018-10-24 10:15:11.448684+0800 TodayNews[2549:80583] 0x60000045e3c0</span><br><span class=\"line\">2018-10-24 10:15:11.448773+0800 TodayNews[2549:80583] 0x60000045d0d0</span><br><span class=\"line\">2018-10-24 10:15:11.448925+0800 TodayNews[2549:80583] 0x60000045e450</span><br><span class=\"line\">2018-10-24 10:15:11.449012+0800 TodayNews[2549:80583] 0x60000045e1b0</span><br><span class=\"line\">2018-10-24 10:15:11.449161+0800 TodayNews[2549:80583] 0x60000045e7e0</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式二：<code>- (instancetype)initWithArray:(NSArray&lt;ObjectType&gt; *)array copyItems:(BOOL)flag</code>;</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *marry1 = [[NSMutableArray alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSMutableString *mstr1 = [[NSMutableString alloc]initWithString:@&quot;value1&quot;];</span><br><span class=\"line\">NSMutableString *mstr2 = [[NSMutableString alloc]initWithString:@&quot;value2&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[marry1 addObject:mstr1];</span><br><span class=\"line\">[marry1 addObject:mstr2];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSArray *marray2 = [[NSArray alloc] initWithArray:marry1 copyItems:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;marry1:%p - %@ \\r\\n&quot;,marry1,marry1);</span><br><span class=\"line\">NSLog(@&quot;marry2:%p - %@ \\r\\n&quot;,marray2,marray2);</span><br><span class=\"line\">NSLog(@&quot;数组元素地址:value1:%p - value2:%p \\r\\n&quot;,marry1[0],marry1[1]);</span><br><span class=\"line\">NSLog(@&quot;数组元素地址:value1:%p - value2:%p \\r\\n&quot;,marray2[0],marray2[1]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-5、自定义类对象之间的深浅拷贝问题\"><a href=\"#4-5、自定义类对象之间的深浅拷贝问题\" class=\"headerlink\" title=\"4.5、自定义类对象之间的深浅拷贝问题\"></a>4.5、自定义类对象之间的深浅拷贝问题</h2><p>在Objective-C中并不是所有的类都支持拷贝；只有遵循NSCopying协议的类，才支持copy拷贝，只有遵循NSMutableCopying协议的类，才支持mutableCopy拷贝。如果没有遵循拷贝协议，拷贝时会出错。</p>\n<p>如果我们想再我们自定义的类中支持copy和mutableCopy那么我们就需要使我们定义的类遵循NSCopying和NSMutableCopying协议，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Study_CustomObject_copy_mutableCopy : NSObject &lt;NSCopying, NSMutableCopying&gt;  // 协议</span><br><span class=\"line\">@property (copy,nonatomic) NSString *name;</span><br><span class=\"line\">@property (copy,nonatomic) NSString *age;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Study_CustomObject_copy_mutableCopy</span><br><span class=\"line\">- (id)copyWithZone:(NSZone *)zone</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];</span><br><span class=\"line\">    customobject.age = self.age;</span><br><span class=\"line\">    customobject.name = self.name;</span><br><span class=\"line\">    return customobject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (id)mutableCopyWithZone:(NSZone *)zone &#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *customobject = [[Study_CustomObject_copy_mutableCopy allocWithZone:zone] init];</span><br><span class=\"line\">    customobject.age = self.age;</span><br><span class=\"line\">    customobject.name = self.name;</span><br><span class=\"line\">    return customobject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>调用 、 输出</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *object = [[Study_CustomObject_copy_mutableCopy alloc]init];</span><br><span class=\"line\">    object.age = @&quot;99&quot;;</span><br><span class=\"line\">    object.name = @&quot;lionsom&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *objectCopy = [object copy];</span><br><span class=\"line\">    Study_CustomObject_copy_mutableCopy *objectMutableCopy = [object mutableCopy];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;object === %p , name === %p , age === %p&quot;,object, object.name, object.age);</span><br><span class=\"line\">    NSLog(@&quot;objectCopy === %p , name === %p , age === %p&quot;,objectCopy, objectCopy.name, objectCopy.age);</span><br><span class=\"line\">    NSLog(@&quot;objectMutableCopy === %p , name === %p , age === %p&quot;,objectMutableCopy, objectMutableCopy.name, objectMutableCopy.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">object === 0x60400023d7a0 , name === 0x100744ed8 , age === 0x100744eb8</span><br><span class=\"line\">objectCopy === 0x60400023bd80 , name === 0x100744ed8 , age === 0x100744eb8</span><br><span class=\"line\">objectMutableCopy === 0x60400023d180 , name === 0x100744ed8 , age === 0x100744eb8</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"五、-property中的copy关键字\"><a href=\"#五、-property中的copy关键字\" class=\"headerlink\" title=\"五、@property中的copy关键字\"></a>五、@property中的copy关键字</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/winzlee/article/details/51752354\" >iOS内存管理（6）–NSArray与NSMutableArray用copy修饰还是strong <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/G_eorge/article/details/78219957?locationNum=9&fps=1\" >OC的深拷贝与浅拷贝–NSArray与NSMutableArray应该使用copy还是strong？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ul>\n<li><h5 id=\"NSString\"><a href=\"#NSString\" class=\"headerlink\" title=\"NSString\"></a>NSString</h5><ul>\n<li>strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>推荐</strong>)copy 关键词：两个string指向不同的内存地址，互不影响；</li>\n</ul>\n</li>\n<li><h5 id=\"NSMutableString\"><a href=\"#NSMutableString\" class=\"headerlink\" title=\"NSMutableString\"></a>NSMutableString</h5><ul>\n<li>(<strong>推荐</strong>)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>崩溃</strong>)copy 关键词：copy之后，就把变量string变成了不可变的NSString类型，对不可变的NSString使用了NSMutableString的方法appendString。</li>\n</ul>\n</li>\n<li><h5 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h5><ul>\n<li>strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>推荐</strong>)copy 关键词：此时内存地址都是不同的，修改一个，互不影响；</li>\n</ul>\n</li>\n<li><h5 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h5><ul>\n<li>(<strong>推荐</strong>)strong 关键词：两个string指向相同的内存地址，修改一个，另一个也会改变；</li>\n<li>(<strong>崩溃</strong>)copy 关键词：copy之后，就把变量array变成了不可变的NSArray类型，对不可变的NSArray使用了NSMutableArray的方法addObject。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>当修饰可变类型的属性时，如NSMutableArray、NSMutableDictionary、NSMutableString，用strong。</p>\n<p>当修饰不可变类型的属性时，如NSArray、NSDictionary、NSString，用copy。</p>\n</blockquote>\n<h1 id=\"六、copy和block\"><a href=\"#六、copy和block\" class=\"headerlink\" title=\"六、copy和block\"></a>六、copy和block</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/leonliu070602/article/details/52981884\" >block使用copy原理 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>简单来说，block就像一个函数指针，指向我们要使用的函数。</p>\n<p>就和函数调用一样的，不管你在哪里写了这个block，只要你把它放在了内存中（通过调用存在这个block的方法或者是函数），不管放在栈中还是在堆中，还是在静态区。只要他没有被销毁，你都可以通过你声明的block调用他。</p>\n<p>说到在类中声明一个block为什么要用copy修饰的话，那就要先说block的三种类型。</p>\n<p>1._NSConcreteGlobalBlock,全局的静态block，不会访问外部的变量。就是说如果你的block没有调用其他的外部变量，那你的block类型就是这种。例如：你仅仅在你的block里面写一个NSLog(“hello world”);</p>\n<p>2._NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。这个block就是你声明的时候不用c opy修饰，并且你的block访问了外部变量。</p>\n<p>3._NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。好了，这个就是今天的主角 ，用copy修饰的block。</p>\n<p>我们知道，函数的声明周期是随着函数调用的结束就终止了。我们的block是写在函数中的。</p>\n<p>如果是全局静态block的话，他直到程序结束的时候，才会被被释放。但是我们实际操作中基本上不会使用到不访问外部变量的block。【但是在测试三种区别的时候，因为没有很好的理解这种block，（用没有copy修饰和没有访问外部变量的block）试了好多次，以为是放在静态区里面的block没有随函数结束被释放。这是个小坑】</p>\n<p>如果是保存在栈中的block，他会随着函数调用结束被销毁。从而导致我们在执行一个包含block的函数之后，就无法再访问这个block。因为（函数结束，函数栈就销毁了，存在函数里面的block也就没有了），我们再使用block时，就会产生空指针异常。</p>\n<p>如果是堆中的block，也就是copy修饰的block。他的生命 周期就是随着对象的销毁而结束的。只要对象不销毁，我们就可以调用的到在堆中的block。</p>\n<p>这就是为什么我们要用copy来修饰block。因为不用copy修饰的访问外部变量的block，只在他所在的函数被调用的那一瞬间可以使用。之后就消失了。</p>\n"},{"title":"iOS 中的属性变量、成员变量、实例变量","date":"2024-07-22T08:01:21.753Z","_content":"\n<!-- # iOS 中的属性变量、成员变量、实例变量 -->\n\n在 iOS 开发中，属性变量、成员变量和实例变量是指向对象数据的不同方式，了解它们之间的区别和使用场景非常重要。\n\n<!-- more -->\n\n### 属性变量（Property）\n\n属性变量是通过 `@property` 关键字定义的，它提供了一种面向对象的方式来访问和修改对象的内部数据。属性变量通常与 getter 和 setter 方法相关联，可以通过点语法进行访问。属性变量可以是原子性的，也可以是非原子性的，可以指定各种属性修饰符（如 `nonatomic`、`strong`、`weak` 等）。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n@end\n```\n\n在使用时，可以通过点语法来访问和修改属性变量：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj.name = @\"John\"; // 调用 setter 方法\nNSLog(@\"%@\", obj.name); // 调用 getter 方法\n```\n\n### 成员变量（Member Variable）\n\n成员变量通常是指在类的接口或实现中直接声明的变量。成员变量的访问控制依赖于变量的声明位置。如果在接口中声明，它们通常是公有的；如果在实现中声明，它们通常是私有的。成员变量直接存储在对象实例中。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    NSString *_name;\n}\n\n@end\n\n@implementation MyClass\n\n@end\n```\n\n在使用时，成员变量通常通过直接访问来操作：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj->_name = @\"John\"; // 直接访问成员变量\nNSLog(@\"%@\", obj->_name);\n```\n\n### 实例变量（Instance Variable）\n\n实例变量是对象实例中的变量，它们可以在类的实现部分定义，通常与 `@property` 一起使用。实例变量的作用域在类的内部，不能直接通过点语法访问。实例变量可以通过 `@synthesize` 和 `@dynamic` 关键字来管理。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass {\n    NSString *_privateName; // 实例变量\n}\n\n@synthesize name = _name;\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        _privateName = @\"Private Name\";\n    }\n    return self;\n}\n\n@end\n```\n\n在使用时，实例变量通常在类的内部方法中直接访问：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj.name = @\"John\"; // 通过属性访问\nNSLog(@\"%@\", obj.name); // 通过属性访问\n\n// 实例变量 _privateName 只能在类的实现部分访问\n```\n\n### 区别与联系\n\n1. **属性变量（Property）**：通过 `@property` 关键字声明，可以指定各种修饰符，提供 getter 和 setter 方法，通过点语法访问。通常用于定义公共接口。\n  \n2. **成员变量（Member Variable）**：直接在类的接口或实现中声明，直接访问和修改。通常用于私有或受保护的数据。\n  \n3. **实例变量（Instance Variable）**：在类的实现部分定义，作用域在类的内部，通常与属性变量关联，通过 `@synthesize` 和 `@dynamic` 管理。\n\n### 使用建议\n\n- **属性变量**：优先使用 `@property` 来定义属性，因为它提供了更高层次的封装和便利的点语法访问。\n- **成员变量**：避免直接在接口中声明成员变量，尽量在实现部分使用实例变量来保护数据。\n- **实例变量**：在类的内部方法中使用实例变量，以实现细粒度的数据控制和封装。\n\n通过理解和正确使用这些变量类型，可以更好地管理对象的数据和行为，提高代码的可读性和维护性。","source":"_posts/iOS/OC/001-OC属性、关键字/013-iOS中的属性变量、成员变量、实例变量/README.md","raw":"---\ntitle: iOS 中的属性变量、成员变量、实例变量\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 属性变量\n- 成员变量\n- 实例变量\n---\n\n<!-- # iOS 中的属性变量、成员变量、实例变量 -->\n\n在 iOS 开发中，属性变量、成员变量和实例变量是指向对象数据的不同方式，了解它们之间的区别和使用场景非常重要。\n\n<!-- more -->\n\n### 属性变量（Property）\n\n属性变量是通过 `@property` 关键字定义的，它提供了一种面向对象的方式来访问和修改对象的内部数据。属性变量通常与 getter 和 setter 方法相关联，可以通过点语法进行访问。属性变量可以是原子性的，也可以是非原子性的，可以指定各种属性修饰符（如 `nonatomic`、`strong`、`weak` 等）。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass\n\n@end\n```\n\n在使用时，可以通过点语法来访问和修改属性变量：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj.name = @\"John\"; // 调用 setter 方法\nNSLog(@\"%@\", obj.name); // 调用 getter 方法\n```\n\n### 成员变量（Member Variable）\n\n成员变量通常是指在类的接口或实现中直接声明的变量。成员变量的访问控制依赖于变量的声明位置。如果在接口中声明，它们通常是公有的；如果在实现中声明，它们通常是私有的。成员变量直接存储在对象实例中。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    NSString *_name;\n}\n\n@end\n\n@implementation MyClass\n\n@end\n```\n\n在使用时，成员变量通常通过直接访问来操作：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj->_name = @\"John\"; // 直接访问成员变量\nNSLog(@\"%@\", obj->_name);\n```\n\n### 实例变量（Instance Variable）\n\n实例变量是对象实例中的变量，它们可以在类的实现部分定义，通常与 `@property` 一起使用。实例变量的作用域在类的内部，不能直接通过点语法访问。实例变量可以通过 `@synthesize` 和 `@dynamic` 关键字来管理。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n@implementation MyClass {\n    NSString *_privateName; // 实例变量\n}\n\n@synthesize name = _name;\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        _privateName = @\"Private Name\";\n    }\n    return self;\n}\n\n@end\n```\n\n在使用时，实例变量通常在类的内部方法中直接访问：\n\n```objc\nMyClass *obj = [[MyClass alloc] init];\nobj.name = @\"John\"; // 通过属性访问\nNSLog(@\"%@\", obj.name); // 通过属性访问\n\n// 实例变量 _privateName 只能在类的实现部分访问\n```\n\n### 区别与联系\n\n1. **属性变量（Property）**：通过 `@property` 关键字声明，可以指定各种修饰符，提供 getter 和 setter 方法，通过点语法访问。通常用于定义公共接口。\n  \n2. **成员变量（Member Variable）**：直接在类的接口或实现中声明，直接访问和修改。通常用于私有或受保护的数据。\n  \n3. **实例变量（Instance Variable）**：在类的实现部分定义，作用域在类的内部，通常与属性变量关联，通过 `@synthesize` 和 `@dynamic` 管理。\n\n### 使用建议\n\n- **属性变量**：优先使用 `@property` 来定义属性，因为它提供了更高层次的封装和便利的点语法访问。\n- **成员变量**：避免直接在接口中声明成员变量，尽量在实现部分使用实例变量来保护数据。\n- **实例变量**：在类的内部方法中使用实例变量，以实现细粒度的数据控制和封装。\n\n通过理解和正确使用这些变量类型，可以更好地管理对象的数据和行为，提高代码的可读性和维护性。","slug":"iOS/OC/001-OC属性、关键字/013-iOS中的属性变量、成员变量、实例变量/README","published":1,"updated":"2024-08-06T08:40:51.846Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp944002adgxr7vy7fbpc","content":"<!-- # iOS 中的属性变量、成员变量、实例变量 -->\n\n<p>在 iOS 开发中，属性变量、成员变量和实例变量是指向对象数据的不同方式，了解它们之间的区别和使用场景非常重要。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"属性变量（Property）\"><a href=\"#属性变量（Property）\" class=\"headerlink\" title=\"属性变量（Property）\"></a>属性变量（Property）</h3><p>属性变量是通过 <code>@property</code> 关键字定义的，它提供了一种面向对象的方式来访问和修改对象的内部数据。属性变量通常与 getter 和 setter 方法相关联，可以通过点语法进行访问。属性变量可以是原子性的，也可以是非原子性的，可以指定各种属性修饰符（如 <code>nonatomic</code>、<code>strong</code>、<code>weak</code> 等）。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在使用时，可以通过点语法来访问和修改属性变量：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj.name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 调用 setter 方法</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj.name); <span class=\"comment\">// 调用 getter 方法</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"成员变量（Member-Variable）\"><a href=\"#成员变量（Member-Variable）\" class=\"headerlink\" title=\"成员变量（Member Variable）\"></a>成员变量（Member Variable）</h3><p>成员变量通常是指在类的接口或实现中直接声明的变量。成员变量的访问控制依赖于变量的声明位置。如果在接口中声明，它们通常是公有的；如果在实现中声明，它们通常是私有的。成员变量直接存储在对象实例中。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在使用时，成员变量通常通过直接访问来操作：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj-&gt;_name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 直接访问成员变量</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj-&gt;_name);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"实例变量（Instance-Variable）\"><a href=\"#实例变量（Instance-Variable）\" class=\"headerlink\" title=\"实例变量（Instance Variable）\"></a>实例变量（Instance Variable）</h3><p>实例变量是对象实例中的变量，它们可以在类的实现部分定义，通常与 <code>@property</code> 一起使用。实例变量的作用域在类的内部，不能直接通过点语法访问。实例变量可以通过 <code>@synthesize</code> 和 <code>@dynamic</code> 关键字来管理。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_privateName; <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        _privateName = <span class=\"string\">@&quot;Private Name&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在使用时，实例变量通常在类的内部方法中直接访问：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj.name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 通过属性访问</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj.name); <span class=\"comment\">// 通过属性访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例变量 _privateName 只能在类的实现部分访问</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"区别与联系\"><a href=\"#区别与联系\" class=\"headerlink\" title=\"区别与联系\"></a>区别与联系</h3><ol>\n<li><p><strong>属性变量（Property）</strong>：通过 <code>@property</code> 关键字声明，可以指定各种修饰符，提供 getter 和 setter 方法，通过点语法访问。通常用于定义公共接口。</p>\n</li>\n<li><p><strong>成员变量（Member Variable）</strong>：直接在类的接口或实现中声明，直接访问和修改。通常用于私有或受保护的数据。</p>\n</li>\n<li><p><strong>实例变量（Instance Variable）</strong>：在类的实现部分定义，作用域在类的内部，通常与属性变量关联，通过 <code>@synthesize</code> 和 <code>@dynamic</code> 管理。</p>\n</li>\n</ol>\n<h3 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h3><ul>\n<li><strong>属性变量</strong>：优先使用 <code>@property</code> 来定义属性，因为它提供了更高层次的封装和便利的点语法访问。</li>\n<li><strong>成员变量</strong>：避免直接在接口中声明成员变量，尽量在实现部分使用实例变量来保护数据。</li>\n<li><strong>实例变量</strong>：在类的内部方法中使用实例变量，以实现细粒度的数据控制和封装。</li>\n</ul>\n<p>通过理解和正确使用这些变量类型，可以更好地管理对象的数据和行为，提高代码的可读性和维护性。</p>\n","excerpt":"<!-- # iOS 中的属性变量、成员变量、实例变量 -->\n\n<p>在 iOS 开发中，属性变量、成员变量和实例变量是指向对象数据的不同方式，了解它们之间的区别和使用场景非常重要。</p>","more":"<h3 id=\"属性变量（Property）\"><a href=\"#属性变量（Property）\" class=\"headerlink\" title=\"属性变量（Property）\"></a>属性变量（Property）</h3><p>属性变量是通过 <code>@property</code> 关键字定义的，它提供了一种面向对象的方式来访问和修改对象的内部数据。属性变量通常与 getter 和 setter 方法相关联，可以通过点语法进行访问。属性变量可以是原子性的，也可以是非原子性的，可以指定各种属性修饰符（如 <code>nonatomic</code>、<code>strong</code>、<code>weak</code> 等）。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用时，可以通过点语法来访问和修改属性变量：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj.name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 调用 setter 方法</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj.name); <span class=\"comment\">// 调用 getter 方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成员变量（Member-Variable）\"><a href=\"#成员变量（Member-Variable）\" class=\"headerlink\" title=\"成员变量（Member Variable）\"></a>成员变量（Member Variable）</h3><p>成员变量通常是指在类的接口或实现中直接声明的变量。成员变量的访问控制依赖于变量的声明位置。如果在接口中声明，它们通常是公有的；如果在实现中声明，它们通常是私有的。成员变量直接存储在对象实例中。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用时，成员变量通常通过直接访问来操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj-&gt;_name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 直接访问成员变量</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj-&gt;_name);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例变量（Instance-Variable）\"><a href=\"#实例变量（Instance-Variable）\" class=\"headerlink\" title=\"实例变量（Instance Variable）\"></a>实例变量（Instance Variable）</h3><p>实例变量是对象实例中的变量，它们可以在类的实现部分定义，通常与 <code>@property</code> 一起使用。实例变量的作用域在类的内部，不能直接通过点语法访问。实例变量可以通过 <code>@synthesize</code> 和 <code>@dynamic</code> 关键字来管理。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_privateName; <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        _privateName = <span class=\"string\">@&quot;Private Name&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用时，实例变量通常在类的内部方法中直接访问：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj.name = <span class=\"string\">@&quot;John&quot;</span>; <span class=\"comment\">// 通过属性访问</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj.name); <span class=\"comment\">// 通过属性访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例变量 _privateName 只能在类的实现部分访问</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"区别与联系\"><a href=\"#区别与联系\" class=\"headerlink\" title=\"区别与联系\"></a>区别与联系</h3><ol>\n<li><p><strong>属性变量（Property）</strong>：通过 <code>@property</code> 关键字声明，可以指定各种修饰符，提供 getter 和 setter 方法，通过点语法访问。通常用于定义公共接口。</p>\n</li>\n<li><p><strong>成员变量（Member Variable）</strong>：直接在类的接口或实现中声明，直接访问和修改。通常用于私有或受保护的数据。</p>\n</li>\n<li><p><strong>实例变量（Instance Variable）</strong>：在类的实现部分定义，作用域在类的内部，通常与属性变量关联，通过 <code>@synthesize</code> 和 <code>@dynamic</code> 管理。</p>\n</li>\n</ol>\n<h3 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h3><ul>\n<li><strong>属性变量</strong>：优先使用 <code>@property</code> 来定义属性，因为它提供了更高层次的封装和便利的点语法访问。</li>\n<li><strong>成员变量</strong>：避免直接在接口中声明成员变量，尽量在实现部分使用实例变量来保护数据。</li>\n<li><strong>实例变量</strong>：在类的内部方法中使用实例变量，以实现细粒度的数据控制和封装。</li>\n</ul>\n<p>通过理解和正确使用这些变量类型，可以更好地管理对象的数据和行为，提高代码的可读性和维护性。</p>"},{"title":"iOS中@public、@protected、@private、@package怎么用？","date":"2024-07-22T08:01:21.766Z","_content":"\n<!-- # ios 中@public，@protected，@private，@package 怎么用 -->\n\n在 Objective-C 中，`@public`、`@protected`、`@private` 和 `@package` 是用来定义类成员变量（instance variables）的访问权限的关键字。它们用于控制类成员变量的可见性和访问权限。这些关键字在类的接口部分或实现部分的 `{}` 中使用。下面是它们的用法和区别。\n\n<!-- more -->\n\n### `@public`\n\n`@public` 关键字使成员变量在类的外部可见和可访问。任何对象都可以直接访问 `@public` 成员变量。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @public\n    NSString *publicString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\nMyClass *obj = [[MyClass alloc] init];\nobj->publicString = @\"Public String\"; // 直接访问 public 成员变量\nNSLog(@\"%@\", obj->publicString);\n```\n\n### `@protected`\n\n`@protected` 是默认的访问权限。`@protected` 成员变量只能在类的内部或子类中访问，但不能在类的外部访问。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @protected\n    NSString *protectedString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\n@interface SubClass : MyClass\n- (void)accessProtectedString;\n@end\n\n@implementation SubClass\n- (void)accessProtectedString {\n    self->protectedString = @\"Protected String\"; // 子类可以访问 protected 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->protectedString = @\"Protected String\"; // 编译错误，类的外部不能访问 protected 成员变量\n```\n\n### `@private`\n\n`@private` 成员变量只能在定义它们的类的内部访问，子类和外部类都不能访问。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @private\n    NSString *privateString;\n}\n\n@end\n\n@implementation MyClass\n- (void)accessPrivateString {\n    self->privateString = @\"Private String\"; // 类的内部可以访问 private 成员变量\n}\n@end\n\n@interface SubClass : MyClass\n- (void)accessPrivateString;\n@end\n\n@implementation SubClass\n- (void)accessPrivateString {\n    // self->privateString = @\"Private String\"; // 编译错误，子类不能访问 private 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->privateString = @\"Private String\"; // 编译错误，类的外部不能访问 private 成员变量\n```\n\n### `@package`\n\n`@package` 成员变量的访问权限类似于 `@protected`，但是在同一个包（framework）中的所有类都可以访问这些成员变量。这在开发大型应用或框架时非常有用。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @package\n    NSString *packageString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\n// 假设此类在同一个包中\n@interface AnotherClass : NSObject\n- (void)accessPackageString:(MyClass *)obj;\n@end\n\n@implementation AnotherClass\n- (void)accessPackageString:(MyClass *)obj {\n    obj->packageString = @\"Package String\"; // 同一个包中的类可以访问 package 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->packageString = @\"Package String\"; // 编译错误，不在同一个包中的类不能访问 package 成员变量\n```\n\n### 总结\n\n- **`@public`**：任何地方都可以访问。\n- **`@protected`**：只有类的内部和子类可以访问。\n- **`@private`**：只有类的内部可以访问。\n- **`@package`**：同一个包（framework）中的类可以访问。\n\n这些关键字帮助开发者更好地控制类成员变量的访问权限，确保数据的封装和安全性。","source":"_posts/iOS/OC/001-OC属性、关键字/014-OC中，@public、@protected、@private和@package的使用/README.md","raw":"---\ntitle: iOS中@public、@protected、@private、@package怎么用？\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 访问权限\n---\n\n<!-- # ios 中@public，@protected，@private，@package 怎么用 -->\n\n在 Objective-C 中，`@public`、`@protected`、`@private` 和 `@package` 是用来定义类成员变量（instance variables）的访问权限的关键字。它们用于控制类成员变量的可见性和访问权限。这些关键字在类的接口部分或实现部分的 `{}` 中使用。下面是它们的用法和区别。\n\n<!-- more -->\n\n### `@public`\n\n`@public` 关键字使成员变量在类的外部可见和可访问。任何对象都可以直接访问 `@public` 成员变量。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @public\n    NSString *publicString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\nMyClass *obj = [[MyClass alloc] init];\nobj->publicString = @\"Public String\"; // 直接访问 public 成员变量\nNSLog(@\"%@\", obj->publicString);\n```\n\n### `@protected`\n\n`@protected` 是默认的访问权限。`@protected` 成员变量只能在类的内部或子类中访问，但不能在类的外部访问。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @protected\n    NSString *protectedString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\n@interface SubClass : MyClass\n- (void)accessProtectedString;\n@end\n\n@implementation SubClass\n- (void)accessProtectedString {\n    self->protectedString = @\"Protected String\"; // 子类可以访问 protected 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->protectedString = @\"Protected String\"; // 编译错误，类的外部不能访问 protected 成员变量\n```\n\n### `@private`\n\n`@private` 成员变量只能在定义它们的类的内部访问，子类和外部类都不能访问。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @private\n    NSString *privateString;\n}\n\n@end\n\n@implementation MyClass\n- (void)accessPrivateString {\n    self->privateString = @\"Private String\"; // 类的内部可以访问 private 成员变量\n}\n@end\n\n@interface SubClass : MyClass\n- (void)accessPrivateString;\n@end\n\n@implementation SubClass\n- (void)accessPrivateString {\n    // self->privateString = @\"Private String\"; // 编译错误，子类不能访问 private 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->privateString = @\"Private String\"; // 编译错误，类的外部不能访问 private 成员变量\n```\n\n### `@package`\n\n`@package` 成员变量的访问权限类似于 `@protected`，但是在同一个包（framework）中的所有类都可以访问这些成员变量。这在开发大型应用或框架时非常有用。\n\n#### 示例\n\n```objc\n@interface MyClass : NSObject {\n    @package\n    NSString *packageString;\n}\n\n@end\n\n@implementation MyClass\n@end\n\n// 假设此类在同一个包中\n@interface AnotherClass : NSObject\n- (void)accessPackageString:(MyClass *)obj;\n@end\n\n@implementation AnotherClass\n- (void)accessPackageString:(MyClass *)obj {\n    obj->packageString = @\"Package String\"; // 同一个包中的类可以访问 package 成员变量\n}\n@end\n\nMyClass *obj = [[MyClass alloc] init];\n// obj->packageString = @\"Package String\"; // 编译错误，不在同一个包中的类不能访问 package 成员变量\n```\n\n### 总结\n\n- **`@public`**：任何地方都可以访问。\n- **`@protected`**：只有类的内部和子类可以访问。\n- **`@private`**：只有类的内部可以访问。\n- **`@package`**：同一个包（framework）中的类可以访问。\n\n这些关键字帮助开发者更好地控制类成员变量的访问权限，确保数据的封装和安全性。","slug":"iOS/OC/001-OC属性、关键字/014-OC中，@public、@protected、@private和@package的使用/README","published":1,"updated":"2024-08-07T08:14:52.082Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp945002ddgxr55zcdq89","content":"<!-- # ios 中@public，@protected，@private，@package 怎么用 -->\n\n<p>在 Objective-C 中，<code>@public</code>、<code>@protected</code>、<code>@private</code> 和 <code>@package</code> 是用来定义类成员变量（instance variables）的访问权限的关键字。它们用于控制类成员变量的可见性和访问权限。这些关键字在类的接口部分或实现部分的 <code>&#123;&#125;</code> 中使用。下面是它们的用法和区别。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"@public\"></a><code>@public</code></h3><p><code>@public</code> 关键字使成员变量在类的外部可见和可访问。任何对象都可以直接访问 <code>@public</code> 成员变量。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *publicString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj-&gt;publicString = <span class=\"string\">@&quot;Public String&quot;</span>; <span class=\"comment\">// 直接访问 public 成员变量</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj-&gt;publicString);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"@protected\"></a><code>@protected</code></h3><p><code>@protected</code> 是默认的访问权限。<code>@protected</code> 成员变量只能在类的内部或子类中访问，但不能在类的外部访问。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *protectedString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubClass</span> : <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessProtectedString;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessProtectedString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>-&gt;protectedString = <span class=\"string\">@&quot;Protected String&quot;</span>; <span class=\"comment\">// 子类可以访问 protected 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;protectedString = @&quot;Protected String&quot;; // 编译错误，类的外部不能访问 protected 成员变量</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"@private\"></a><code>@private</code></h3><p><code>@private</code> 成员变量只能在定义它们的类的内部访问，子类和外部类都不能访问。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@private</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *privateString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>-&gt;privateString = <span class=\"string\">@&quot;Private String&quot;</span>; <span class=\"comment\">// 类的内部可以访问 private 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubClass</span> : <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString &#123;</span><br><span class=\"line\">    <span class=\"comment\">// self-&gt;privateString = @&quot;Private String&quot;; // 编译错误，子类不能访问 private 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;privateString = @&quot;Private String&quot;; // 编译错误，类的外部不能访问 private 成员变量</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"@package\"></a><code>@package</code></h3><p><code>@package</code> 成员变量的访问权限类似于 <code>@protected</code>，但是在同一个包（framework）中的所有类都可以访问这些成员变量。这在开发大型应用或框架时非常有用。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@package</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *packageString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设此类在同一个包中</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AnotherClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPackageString:(MyClass *)obj;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AnotherClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPackageString:(MyClass *)obj &#123;</span><br><span class=\"line\">    obj-&gt;packageString = <span class=\"string\">@&quot;Package String&quot;</span>; <span class=\"comment\">// 同一个包中的类可以访问 package 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;packageString = @&quot;Package String&quot;; // 编译错误，不在同一个包中的类不能访问 package 成员变量</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>@public</code>**：任何地方都可以访问。</li>\n<li>**<code>@protected</code>**：只有类的内部和子类可以访问。</li>\n<li>**<code>@private</code>**：只有类的内部可以访问。</li>\n<li>**<code>@package</code>**：同一个包（framework）中的类可以访问。</li>\n</ul>\n<p>这些关键字帮助开发者更好地控制类成员变量的访问权限，确保数据的封装和安全性。</p>\n","excerpt":"<!-- # ios 中@public，@protected，@private，@package 怎么用 -->\n\n<p>在 Objective-C 中，<code>@public</code>、<code>@protected</code>、<code>@private</code> 和 <code>@package</code> 是用来定义类成员变量（instance variables）的访问权限的关键字。它们用于控制类成员变量的可见性和访问权限。这些关键字在类的接口部分或实现部分的 <code>&#123;&#125;</code> 中使用。下面是它们的用法和区别。</p>","more":"<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"@public\"></a><code>@public</code></h3><p><code>@public</code> 关键字使成员变量在类的外部可见和可访问。任何对象都可以直接访问 <code>@public</code> 成员变量。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *publicString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">obj-&gt;publicString = <span class=\"string\">@&quot;Public String&quot;</span>; <span class=\"comment\">// 直接访问 public 成员变量</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, obj-&gt;publicString);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"@protected\"></a><code>@protected</code></h3><p><code>@protected</code> 是默认的访问权限。<code>@protected</code> 成员变量只能在类的内部或子类中访问，但不能在类的外部访问。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *protectedString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubClass</span> : <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessProtectedString;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessProtectedString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>-&gt;protectedString = <span class=\"string\">@&quot;Protected String&quot;</span>; <span class=\"comment\">// 子类可以访问 protected 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;protectedString = @&quot;Protected String&quot;; // 编译错误，类的外部不能访问 protected 成员变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"@private\"></a><code>@private</code></h3><p><code>@private</code> 成员变量只能在定义它们的类的内部访问，子类和外部类都不能访问。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@private</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *privateString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>-&gt;privateString = <span class=\"string\">@&quot;Private String&quot;</span>; <span class=\"comment\">// 类的内部可以访问 private 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubClass</span> : <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPrivateString &#123;</span><br><span class=\"line\">    <span class=\"comment\">// self-&gt;privateString = @&quot;Private String&quot;; // 编译错误，子类不能访问 private 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;privateString = @&quot;Private String&quot;; // 编译错误，类的外部不能访问 private 成员变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"@package\"></a><code>@package</code></h3><p><code>@package</code> 成员变量的访问权限类似于 <code>@protected</code>，但是在同一个包（framework）中的所有类都可以访问这些成员变量。这在开发大型应用或框架时非常有用。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@package</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *packageString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设此类在同一个包中</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AnotherClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPackageString:(MyClass *)obj;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AnotherClass</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)accessPackageString:(MyClass *)obj &#123;</span><br><span class=\"line\">    obj-&gt;packageString = <span class=\"string\">@&quot;Package String&quot;</span>; <span class=\"comment\">// 同一个包中的类可以访问 package 成员变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\"><span class=\"comment\">// obj-&gt;packageString = @&quot;Package String&quot;; // 编译错误，不在同一个包中的类不能访问 package 成员变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>@public</code>**：任何地方都可以访问。</li>\n<li>**<code>@protected</code>**：只有类的内部和子类可以访问。</li>\n<li>**<code>@private</code>**：只有类的内部可以访问。</li>\n<li>**<code>@package</code>**：同一个包（framework）中的类可以访问。</li>\n</ul>\n<p>这些关键字帮助开发者更好地控制类成员变量的访问权限，确保数据的封装和安全性。</p>"},{"title":"iOS中为什么block要用copy修饰？","date":"2024-08-08T09:10:27.991Z","_content":"\n# 参考\n\n- [block为什么要用copy来修饰\n](https://coderlawrence.github.io/2020/03/03/block%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8copy/)\n\n\n# GPT\n\n在 iOS 开发中，`block`（也称为闭包或匿名函数）通常用 `copy` 修饰符进行声明，这是为了确保 `block` 被正确管理和存储。以下是详细的原因：\n\n### 1. **堆内存管理**\n\n在 Objective-C 中，`block` 最初创建时可能是在栈（stack）上分配的，这意味着它的生命周期与它的作用域相同。当栈上的 `block` 超出其作用域时，它将被销毁。如果我们希望在栈外使用该 `block`（例如，存储在属性中或者异步调用），我们需要将其复制到堆（heap）上。\n\n`copy` 修饰符会将栈上的 `block` 复制到堆上，这样可以确保它在需要时仍然存在，不会因为超出作用域而被销毁。\n\n### 2. **ARC 管理**\n\n在自动引用计数（ARC）环境下，`copy` 修饰符还帮助 ARC 正确管理 `block` 的生命周期。ARC 通过 `copy` 操作确保 `block` 在堆上有适当的引用计数，避免内存泄漏或访问已释放的内存。\n\n### 3. **Block 的存储位置**\n\n根据 `block` 的存储位置，它们分为三种类型：\n\n- **栈上的 block**：默认情况下，`block` 在定义时分配在栈上。这些 `block` 的生命周期仅限于其作用域。\n- **堆上的 block**：使用 `copy` 操作将栈上的 `block` 复制到堆上，使其生命周期延长。\n- **全局 block**：如果 `block` 不捕获任何变量，它会被自动分配在全局数据区，无需 `copy` 操作。\n\n### 示例\n\n以下是一个示例，说明为什么需要使用 `copy` 修饰符：\n\n```objc\n#import <Foundation/Foundation.h>\n\ntypedef void (^MyBlock)(void);\n\n@interface MyClass : NSObject\n@property (nonatomic, copy) MyBlock myBlock;\n@end\n\n@implementation MyClass\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *myObject = [[MyClass alloc] init];\n        int someVar = 42;\n        \n        // 定义一个 block，捕获 someVar 变量\n        myObject.myBlock = ^{\n            NSLog(@\"Captured variable: %d\", someVar);\n        };\n        \n        // 在稍后时间调用 block\n        myObject.myBlock();\n    }\n    return 0;\n}\n```\n\n在上述代码中，如果我们将 `myBlock` 属性定义为 `strong` 或 `assign` 而不是 `copy`，则该 `block` 可能仍然在栈上，当超出作用域时，它将被销毁，从而导致潜在的崩溃或未定义行为。通过将其定义为 `copy`，我们确保 `block` 被正确地复制到堆上，延长其生命周期并保证其安全性。\n\n### 总结\n\n使用 `copy` 修饰符确保 `block` 在堆上存储，以管理其生命周期，避免内存管理问题，并确保在合适的时机正确使用 `block`。这是 iOS 开发中确保 `block` 正确工作和避免潜在问题的重要实践。","source":"_posts/iOS/OC/001-OC属性、关键字/015-为什么block要用copy修饰？/index.md","raw":"---\ntitle: iOS中为什么block要用copy修饰？\ndate: {{ date }}\ncategories:\n- iOS\ntags:\n- iOS\n- 面试题\n- block\n---\n\n# 参考\n\n- [block为什么要用copy来修饰\n](https://coderlawrence.github.io/2020/03/03/block%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8copy/)\n\n\n# GPT\n\n在 iOS 开发中，`block`（也称为闭包或匿名函数）通常用 `copy` 修饰符进行声明，这是为了确保 `block` 被正确管理和存储。以下是详细的原因：\n\n### 1. **堆内存管理**\n\n在 Objective-C 中，`block` 最初创建时可能是在栈（stack）上分配的，这意味着它的生命周期与它的作用域相同。当栈上的 `block` 超出其作用域时，它将被销毁。如果我们希望在栈外使用该 `block`（例如，存储在属性中或者异步调用），我们需要将其复制到堆（heap）上。\n\n`copy` 修饰符会将栈上的 `block` 复制到堆上，这样可以确保它在需要时仍然存在，不会因为超出作用域而被销毁。\n\n### 2. **ARC 管理**\n\n在自动引用计数（ARC）环境下，`copy` 修饰符还帮助 ARC 正确管理 `block` 的生命周期。ARC 通过 `copy` 操作确保 `block` 在堆上有适当的引用计数，避免内存泄漏或访问已释放的内存。\n\n### 3. **Block 的存储位置**\n\n根据 `block` 的存储位置，它们分为三种类型：\n\n- **栈上的 block**：默认情况下，`block` 在定义时分配在栈上。这些 `block` 的生命周期仅限于其作用域。\n- **堆上的 block**：使用 `copy` 操作将栈上的 `block` 复制到堆上，使其生命周期延长。\n- **全局 block**：如果 `block` 不捕获任何变量，它会被自动分配在全局数据区，无需 `copy` 操作。\n\n### 示例\n\n以下是一个示例，说明为什么需要使用 `copy` 修饰符：\n\n```objc\n#import <Foundation/Foundation.h>\n\ntypedef void (^MyBlock)(void);\n\n@interface MyClass : NSObject\n@property (nonatomic, copy) MyBlock myBlock;\n@end\n\n@implementation MyClass\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *myObject = [[MyClass alloc] init];\n        int someVar = 42;\n        \n        // 定义一个 block，捕获 someVar 变量\n        myObject.myBlock = ^{\n            NSLog(@\"Captured variable: %d\", someVar);\n        };\n        \n        // 在稍后时间调用 block\n        myObject.myBlock();\n    }\n    return 0;\n}\n```\n\n在上述代码中，如果我们将 `myBlock` 属性定义为 `strong` 或 `assign` 而不是 `copy`，则该 `block` 可能仍然在栈上，当超出作用域时，它将被销毁，从而导致潜在的崩溃或未定义行为。通过将其定义为 `copy`，我们确保 `block` 被正确地复制到堆上，延长其生命周期并保证其安全性。\n\n### 总结\n\n使用 `copy` 修饰符确保 `block` 在堆上存储，以管理其生命周期，避免内存管理问题，并确保在合适的时机正确使用 `block`。这是 iOS 开发中确保 `block` 正确工作和避免潜在问题的重要实践。","slug":"iOS/OC/001-OC属性、关键字/015-为什么block要用copy修饰？/index","published":1,"updated":"2024-08-08T09:22:58.597Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp946002gdgxr868wcvuk","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a class=\"link\"   href=\"https://coderlawrence.github.io/2020/03/03/block%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8copy/\" >block为什么要用copy来修饰\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在 iOS 开发中，<code>block</code>（也称为闭包或匿名函数）通常用 <code>copy</code> 修饰符进行声明，这是为了确保 <code>block</code> 被正确管理和存储。以下是详细的原因：</p>\n<h3 id=\"1-堆内存管理\"><a href=\"#1-堆内存管理\" class=\"headerlink\" title=\"1. 堆内存管理\"></a>1. <strong>堆内存管理</strong></h3><p>在 Objective-C 中，<code>block</code> 最初创建时可能是在栈（stack）上分配的，这意味着它的生命周期与它的作用域相同。当栈上的 <code>block</code> 超出其作用域时，它将被销毁。如果我们希望在栈外使用该 <code>block</code>（例如，存储在属性中或者异步调用），我们需要将其复制到堆（heap）上。</p>\n<p><code>copy</code> 修饰符会将栈上的 <code>block</code> 复制到堆上，这样可以确保它在需要时仍然存在，不会因为超出作用域而被销毁。</p>\n<h3 id=\"2-ARC-管理\"><a href=\"#2-ARC-管理\" class=\"headerlink\" title=\"2. ARC 管理\"></a>2. <strong>ARC 管理</strong></h3><p>在自动引用计数（ARC）环境下，<code>copy</code> 修饰符还帮助 ARC 正确管理 <code>block</code> 的生命周期。ARC 通过 <code>copy</code> 操作确保 <code>block</code> 在堆上有适当的引用计数，避免内存泄漏或访问已释放的内存。</p>\n<h3 id=\"3-Block-的存储位置\"><a href=\"#3-Block-的存储位置\" class=\"headerlink\" title=\"3. Block 的存储位置\"></a>3. <strong>Block 的存储位置</strong></h3><p>根据 <code>block</code> 的存储位置，它们分为三种类型：</p>\n<ul>\n<li><strong>栈上的 block</strong>：默认情况下，<code>block</code> 在定义时分配在栈上。这些 <code>block</code> 的生命周期仅限于其作用域。</li>\n<li><strong>堆上的 block</strong>：使用 <code>copy</code> 操作将栈上的 <code>block</code> 复制到堆上，使其生命周期延长。</li>\n<li><strong>全局 block</strong>：如果 <code>block</code> 不捕获任何变量，它会被自动分配在全局数据区，无需 <code>copy</code> 操作。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个示例，说明为什么需要使用 <code>copy</code> 修饰符：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (^MyBlock)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) MyBlock myBlock;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        MyClass *myObject = [[MyClass alloc] init];</span><br><span class=\"line\">        <span class=\"type\">int</span> someVar = <span class=\"number\">42</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 定义一个 block，捕获 someVar 变量</span></span><br><span class=\"line\">        myObject.myBlock = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Captured variable: %d&quot;</span>, someVar);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在稍后时间调用 block</span></span><br><span class=\"line\">        myObject.myBlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在上述代码中，如果我们将 <code>myBlock</code> 属性定义为 <code>strong</code> 或 <code>assign</code> 而不是 <code>copy</code>，则该 <code>block</code> 可能仍然在栈上，当超出作用域时，它将被销毁，从而导致潜在的崩溃或未定义行为。通过将其定义为 <code>copy</code>，我们确保 <code>block</code> 被正确地复制到堆上，延长其生命周期并保证其安全性。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用 <code>copy</code> 修饰符确保 <code>block</code> 在堆上存储，以管理其生命周期，避免内存管理问题，并确保在合适的时机正确使用 <code>block</code>。这是 iOS 开发中确保 <code>block</code> 正确工作和避免潜在问题的重要实践。</p>\n","excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a class=\"link\"   href=\"https://coderlawrence.github.io/2020/03/03/block%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8copy/\" >block为什么要用copy来修饰\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在 iOS 开发中，<code>block</code>（也称为闭包或匿名函数）通常用 <code>copy</code> 修饰符进行声明，这是为了确保 <code>block</code> 被正确管理和存储。以下是详细的原因：</p>\n<h3 id=\"1-堆内存管理\"><a href=\"#1-堆内存管理\" class=\"headerlink\" title=\"1. 堆内存管理\"></a>1. <strong>堆内存管理</strong></h3><p>在 Objective-C 中，<code>block</code> 最初创建时可能是在栈（stack）上分配的，这意味着它的生命周期与它的作用域相同。当栈上的 <code>block</code> 超出其作用域时，它将被销毁。如果我们希望在栈外使用该 <code>block</code>（例如，存储在属性中或者异步调用），我们需要将其复制到堆（heap）上。</p>\n<p><code>copy</code> 修饰符会将栈上的 <code>block</code> 复制到堆上，这样可以确保它在需要时仍然存在，不会因为超出作用域而被销毁。</p>\n<h3 id=\"2-ARC-管理\"><a href=\"#2-ARC-管理\" class=\"headerlink\" title=\"2. ARC 管理\"></a>2. <strong>ARC 管理</strong></h3><p>在自动引用计数（ARC）环境下，<code>copy</code> 修饰符还帮助 ARC 正确管理 <code>block</code> 的生命周期。ARC 通过 <code>copy</code> 操作确保 <code>block</code> 在堆上有适当的引用计数，避免内存泄漏或访问已释放的内存。</p>\n<h3 id=\"3-Block-的存储位置\"><a href=\"#3-Block-的存储位置\" class=\"headerlink\" title=\"3. Block 的存储位置\"></a>3. <strong>Block 的存储位置</strong></h3><p>根据 <code>block</code> 的存储位置，它们分为三种类型：</p>\n<ul>\n<li><strong>栈上的 block</strong>：默认情况下，<code>block</code> 在定义时分配在栈上。这些 <code>block</code> 的生命周期仅限于其作用域。</li>\n<li><strong>堆上的 block</strong>：使用 <code>copy</code> 操作将栈上的 <code>block</code> 复制到堆上，使其生命周期延长。</li>\n<li><strong>全局 block</strong>：如果 <code>block</code> 不捕获任何变量，它会被自动分配在全局数据区，无需 <code>copy</code> 操作。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个示例，说明为什么需要使用 <code>copy</code> 修饰符：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (^MyBlock)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) MyBlock myBlock;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        MyClass *myObject = [[MyClass alloc] init];</span><br><span class=\"line\">        <span class=\"type\">int</span> someVar = <span class=\"number\">42</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 定义一个 block，捕获 someVar 变量</span></span><br><span class=\"line\">        myObject.myBlock = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Captured variable: %d&quot;</span>, someVar);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在稍后时间调用 block</span></span><br><span class=\"line\">        myObject.myBlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，如果我们将 <code>myBlock</code> 属性定义为 <code>strong</code> 或 <code>assign</code> 而不是 <code>copy</code>，则该 <code>block</code> 可能仍然在栈上，当超出作用域时，它将被销毁，从而导致潜在的崩溃或未定义行为。通过将其定义为 <code>copy</code>，我们确保 <code>block</code> 被正确地复制到堆上，延长其生命周期并保证其安全性。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用 <code>copy</code> 修饰符确保 <code>block</code> 在堆上存储，以管理其生命周期，避免内存管理问题，并确保在合适的时机正确使用 <code>block</code>。这是 iOS 开发中确保 <code>block</code> 正确工作和避免潜在问题的重要实践。</p>\n"},{"title":"简述OC内存管理","date":"2024-07-22T08:01:21.507Z","_content":"\n<!-- # 简述OC内存管理 -->\n\nOC（Objective-C）内存管理主要有两种方式：手动引用计数（Manual Reference Counting，MRC）和自动引用计数（Automatic Reference Counting，ARC）。以下是对这两种内存管理方式的简要介绍：\n\n <!-- more -->\n \n![](duck.jpeg)\n\n## 1. 手动引用计数 (MRC)\n\n在MRC中，开发者需要手动管理对象的内存，通过对对象的引用计数（Reference Counting）来控制其生命周期。主要使用的内存管理方法有：\n\n- **alloc**：分配内存并初始化对象，引用计数设为1。\n- **retain**：增加对象的引用计数。\n- **release**：减少对象的引用计数，当引用计数为0时，释放对象的内存。\n- **autorelease**：将对象添加到自动释放池中，当自动释放池被清空时，调用release方法。\n\n在MRC中，开发者需要小心处理内存的分配和释放，以避免内存泄漏和野指针等问题。\n\n## 2. 自动引用计数 (ARC)\n\nARC是苹果在iOS 5及Mac OS X Lion中引入的一种内存管理机制。它通过编译器自动插入retain、release和autorelease等方法调用，从而简化内存管理。ARC极大地减少了手动管理内存的负担，降低了内存泄漏和野指针的风险。开发者在使用ARC时，只需关注对象的生命周期，而无需手动调用内存管理方法。\n\n在ARC中，有一些关键规则和概念：\n- **strong**：默认属性修饰符，表示对对象的强引用。\n- **weak**：表示对对象的弱引用，不增加对象的引用计数，当对象被释放时，weak引用会自动设置为nil。\n- **unsafe_unretained**：类似weak，但在对象被释放时不会自动设置为nil，容易导致野指针问题。\n- **__autoreleasing**：用于临时对象的自动释放。\n\n## 总结\n\nOC内存管理主要通过引用计数机制来控制对象的生命周期。在MRC中，开发者需要手动管理引用计数，而在ARC中，编译器自动插入内存管理代码，极大简化了内存管理的复杂性。ARC是现代Objective-C开发中推荐的内存管理方式。","source":"_posts/iOS/OC/002-内存管理/001-简述OC内存管理/README.md","raw":"---\ntitle: 简述OC内存管理\ndate: {{ date }}\ntags: [iOS, OC, 内存管理]\n---\n\n<!-- # 简述OC内存管理 -->\n\nOC（Objective-C）内存管理主要有两种方式：手动引用计数（Manual Reference Counting，MRC）和自动引用计数（Automatic Reference Counting，ARC）。以下是对这两种内存管理方式的简要介绍：\n\n <!-- more -->\n \n![](duck.jpeg)\n\n## 1. 手动引用计数 (MRC)\n\n在MRC中，开发者需要手动管理对象的内存，通过对对象的引用计数（Reference Counting）来控制其生命周期。主要使用的内存管理方法有：\n\n- **alloc**：分配内存并初始化对象，引用计数设为1。\n- **retain**：增加对象的引用计数。\n- **release**：减少对象的引用计数，当引用计数为0时，释放对象的内存。\n- **autorelease**：将对象添加到自动释放池中，当自动释放池被清空时，调用release方法。\n\n在MRC中，开发者需要小心处理内存的分配和释放，以避免内存泄漏和野指针等问题。\n\n## 2. 自动引用计数 (ARC)\n\nARC是苹果在iOS 5及Mac OS X Lion中引入的一种内存管理机制。它通过编译器自动插入retain、release和autorelease等方法调用，从而简化内存管理。ARC极大地减少了手动管理内存的负担，降低了内存泄漏和野指针的风险。开发者在使用ARC时，只需关注对象的生命周期，而无需手动调用内存管理方法。\n\n在ARC中，有一些关键规则和概念：\n- **strong**：默认属性修饰符，表示对对象的强引用。\n- **weak**：表示对对象的弱引用，不增加对象的引用计数，当对象被释放时，weak引用会自动设置为nil。\n- **unsafe_unretained**：类似weak，但在对象被释放时不会自动设置为nil，容易导致野指针问题。\n- **__autoreleasing**：用于临时对象的自动释放。\n\n## 总结\n\nOC内存管理主要通过引用计数机制来控制对象的生命周期。在MRC中，开发者需要手动管理引用计数，而在ARC中，编译器自动插入内存管理代码，极大简化了内存管理的复杂性。ARC是现代Objective-C开发中推荐的内存管理方式。","slug":"iOS/OC/002-内存管理/001-简述OC内存管理/README","published":1,"updated":"2024-08-06T08:39:18.955Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp947002kdgxrff7cbe86","content":"<!-- # 简述OC内存管理 -->\n\n<p>OC（Objective-C）内存管理主要有两种方式：手动引用计数（Manual Reference Counting，MRC）和自动引用计数（Automatic Reference Counting，ARC）。以下是对这两种内存管理方式的简要介绍：</p>\n <span id=\"more\"></span>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/001-%E7%AE%80%E8%BF%B0OC%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/README/duck.jpeg\"\n                     \n                ></p>\n<h2 id=\"1-手动引用计数-MRC\"><a href=\"#1-手动引用计数-MRC\" class=\"headerlink\" title=\"1. 手动引用计数 (MRC)\"></a>1. 手动引用计数 (MRC)</h2><p>在MRC中，开发者需要手动管理对象的内存，通过对对象的引用计数（Reference Counting）来控制其生命周期。主要使用的内存管理方法有：</p>\n<ul>\n<li><strong>alloc</strong>：分配内存并初始化对象，引用计数设为1。</li>\n<li><strong>retain</strong>：增加对象的引用计数。</li>\n<li><strong>release</strong>：减少对象的引用计数，当引用计数为0时，释放对象的内存。</li>\n<li><strong>autorelease</strong>：将对象添加到自动释放池中，当自动释放池被清空时，调用release方法。</li>\n</ul>\n<p>在MRC中，开发者需要小心处理内存的分配和释放，以避免内存泄漏和野指针等问题。</p>\n<h2 id=\"2-自动引用计数-ARC\"><a href=\"#2-自动引用计数-ARC\" class=\"headerlink\" title=\"2. 自动引用计数 (ARC)\"></a>2. 自动引用计数 (ARC)</h2><p>ARC是苹果在iOS 5及Mac OS X Lion中引入的一种内存管理机制。它通过编译器自动插入retain、release和autorelease等方法调用，从而简化内存管理。ARC极大地减少了手动管理内存的负担，降低了内存泄漏和野指针的风险。开发者在使用ARC时，只需关注对象的生命周期，而无需手动调用内存管理方法。</p>\n<p>在ARC中，有一些关键规则和概念：</p>\n<ul>\n<li><strong>strong</strong>：默认属性修饰符，表示对对象的强引用。</li>\n<li><strong>weak</strong>：表示对对象的弱引用，不增加对象的引用计数，当对象被释放时，weak引用会自动设置为nil。</li>\n<li><strong>unsafe_unretained</strong>：类似weak，但在对象被释放时不会自动设置为nil，容易导致野指针问题。</li>\n<li><strong>__autoreleasing</strong>：用于临时对象的自动释放。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OC内存管理主要通过引用计数机制来控制对象的生命周期。在MRC中，开发者需要手动管理引用计数，而在ARC中，编译器自动插入内存管理代码，极大简化了内存管理的复杂性。ARC是现代Objective-C开发中推荐的内存管理方式。</p>\n","excerpt":"<!-- # 简述OC内存管理 -->\n\n<p>OC（Objective-C）内存管理主要有两种方式：手动引用计数（Manual Reference Counting，MRC）和自动引用计数（Automatic Reference Counting，ARC）。以下是对这两种内存管理方式的简要介绍：</p>","more":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/001-%E7%AE%80%E8%BF%B0OC%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/README/duck.jpeg\"\n                     \n                ></p>\n<h2 id=\"1-手动引用计数-MRC\"><a href=\"#1-手动引用计数-MRC\" class=\"headerlink\" title=\"1. 手动引用计数 (MRC)\"></a>1. 手动引用计数 (MRC)</h2><p>在MRC中，开发者需要手动管理对象的内存，通过对对象的引用计数（Reference Counting）来控制其生命周期。主要使用的内存管理方法有：</p>\n<ul>\n<li><strong>alloc</strong>：分配内存并初始化对象，引用计数设为1。</li>\n<li><strong>retain</strong>：增加对象的引用计数。</li>\n<li><strong>release</strong>：减少对象的引用计数，当引用计数为0时，释放对象的内存。</li>\n<li><strong>autorelease</strong>：将对象添加到自动释放池中，当自动释放池被清空时，调用release方法。</li>\n</ul>\n<p>在MRC中，开发者需要小心处理内存的分配和释放，以避免内存泄漏和野指针等问题。</p>\n<h2 id=\"2-自动引用计数-ARC\"><a href=\"#2-自动引用计数-ARC\" class=\"headerlink\" title=\"2. 自动引用计数 (ARC)\"></a>2. 自动引用计数 (ARC)</h2><p>ARC是苹果在iOS 5及Mac OS X Lion中引入的一种内存管理机制。它通过编译器自动插入retain、release和autorelease等方法调用，从而简化内存管理。ARC极大地减少了手动管理内存的负担，降低了内存泄漏和野指针的风险。开发者在使用ARC时，只需关注对象的生命周期，而无需手动调用内存管理方法。</p>\n<p>在ARC中，有一些关键规则和概念：</p>\n<ul>\n<li><strong>strong</strong>：默认属性修饰符，表示对对象的强引用。</li>\n<li><strong>weak</strong>：表示对对象的弱引用，不增加对象的引用计数，当对象被释放时，weak引用会自动设置为nil。</li>\n<li><strong>unsafe_unretained</strong>：类似weak，但在对象被释放时不会自动设置为nil，容易导致野指针问题。</li>\n<li><strong>__autoreleasing</strong>：用于临时对象的自动释放。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OC内存管理主要通过引用计数机制来控制对象的生命周期。在MRC中，开发者需要手动管理引用计数，而在ARC中，编译器自动插入内存管理代码，极大简化了内存管理的复杂性。ARC是现代Objective-C开发中推荐的内存管理方式。</p>"},{"title":"autorelease和Autorelease Pool","date":"2024-07-22T08:01:21.564Z","_content":"\n<!-- # autorelease和Autorelease Pool -->\n\n在 iOS 和 macOS 开发中，`autorelease` 是一种内存管理机制，属于 Cocoa 的内存管理系统的一部分。`autorelease` 通过自动释放池（autorelease pool）管理对象的生命周期，帮助开发者在不需要手动调用 `release` 的情况下处理对象的释放。以下是对 `autorelease` 的详细介绍：\n\n<!-- more -->\n\n### 什么是 `autorelease`\n\n`autorelease` 是一种延迟释放对象的方法。当你对一个对象调用 `autorelease` 方法时，对象不会立即被释放，而是被添加到当前的自动释放池中。当自动释放池被销毁时，池中的所有对象都会接收到一个 `release` 消息。\n\n### 自动释放池（Autorelease Pool）\n\n自动释放池是一个临时的存储区，用于存储被标记为 `autorelease` 的对象。自动释放池的生命周期通常与运行循环（run loop）的生命周期相对应。在每次运行循环迭代结束时，自动释放池会被清空，所有存储在其中的对象都会被释放。\n\n### 使用场景\n\n1. **临时对象**：在方法中创建临时对象并返回，而不需要担心手动释放对象。\n2. **批量操作**：在循环中创建大量对象时使用，避免在循环中频繁手动释放对象。\n\n### 示例代码\n\n以下示例展示了 `autorelease` 的使用：\n\n```objective-c\n- (NSString *)temporaryString {\n    NSString *string = [[[NSString alloc] initWithFormat:@\"Hello, World!\"] autorelease];\n    return string;\n}\n```\n\n在这个例子中，`initWithFormat:` 方法创建了一个新的 `NSString` 对象。调用 `autorelease` 方法将这个对象添加到当前的自动释放池中。这样，当方法返回时，不需要手动释放 `string` 对象，它将在自动释放池被清空时自动释放。\n\n### 自动释放池的创建和销毁\n\n在 iOS 应用程序中，自动释放池通常由框架自动管理，开发者不需要显式地创建和销毁自动释放池。然而，在某些情况下，如创建大量临时对象或在非主线程中工作时，可能需要手动管理自动释放池。\n\n```objective-c\n// 手动创建和销毁自动释放池\n@autoreleasepool {\n    for (int i = 0; i < 1000; i++) {\n        NSString *string = [[[NSString alloc] initWithFormat:@\"Number %d\", i] autorelease];\n        NSLog(@\"%@\", string);\n    }\n}\n```\n\n在这个例子中，`@autoreleasepool` 块创建了一个新的自动释放池。所有在该块中被 `autorelease` 的对象将在块结束时自动释放。\n\n### 自动释放池的注意事项\n\n- **性能考虑**：频繁创建和销毁大量对象时，使用自动释放池可以帮助管理内存，但要注意不要在紧密循环中频繁使用 `autorelease`，可能会导致性能问题。\n- **非主线程**：在非主线程中工作时，确保有一个自动释放池。如果没有显式创建，可能会导致内存泄漏。\n\n### 自动释放池在 ARC 中的表现\n\n在 ARC 环境中，`autorelease` 和自动释放池仍然存在，但 ARC 自动管理对象的内存，大多数情况下不需要显式调用 `autorelease`。然而，理解自动释放池的工作原理仍然很重要，特别是在处理性能优化和非主线程时。\n\n### 总结\n\n- **`autorelease`**：延迟释放对象，将对象添加到自动释放池中。\n- **自动释放池**：存储 `autorelease` 对象，生命周期与运行循环对应。\n- **使用场景**：临时对象、批量操作、非主线程。\n- **手动管理**：在需要时显式创建和销毁自动释放池，确保内存管理正确。\n\n通过理解和正确使用 `autorelease` 和自动释放池，开发者可以更有效地管理内存，避免内存泄漏和提升应用性能。\n\n\n\n# 自动释放池的前世今生 ---- 深入解析 autoreleasepool\n\nhttps://draveness.me/autoreleasepool/","source":"_posts/iOS/OC/002-内存管理/006-autorelease和Autorelease Pool/README.md","raw":"---\ntitle: autorelease和Autorelease Pool\ndate: {{ date }}\ntags: [iOS, 面试题, autorelease]\n---\n\n<!-- # autorelease和Autorelease Pool -->\n\n在 iOS 和 macOS 开发中，`autorelease` 是一种内存管理机制，属于 Cocoa 的内存管理系统的一部分。`autorelease` 通过自动释放池（autorelease pool）管理对象的生命周期，帮助开发者在不需要手动调用 `release` 的情况下处理对象的释放。以下是对 `autorelease` 的详细介绍：\n\n<!-- more -->\n\n### 什么是 `autorelease`\n\n`autorelease` 是一种延迟释放对象的方法。当你对一个对象调用 `autorelease` 方法时，对象不会立即被释放，而是被添加到当前的自动释放池中。当自动释放池被销毁时，池中的所有对象都会接收到一个 `release` 消息。\n\n### 自动释放池（Autorelease Pool）\n\n自动释放池是一个临时的存储区，用于存储被标记为 `autorelease` 的对象。自动释放池的生命周期通常与运行循环（run loop）的生命周期相对应。在每次运行循环迭代结束时，自动释放池会被清空，所有存储在其中的对象都会被释放。\n\n### 使用场景\n\n1. **临时对象**：在方法中创建临时对象并返回，而不需要担心手动释放对象。\n2. **批量操作**：在循环中创建大量对象时使用，避免在循环中频繁手动释放对象。\n\n### 示例代码\n\n以下示例展示了 `autorelease` 的使用：\n\n```objective-c\n- (NSString *)temporaryString {\n    NSString *string = [[[NSString alloc] initWithFormat:@\"Hello, World!\"] autorelease];\n    return string;\n}\n```\n\n在这个例子中，`initWithFormat:` 方法创建了一个新的 `NSString` 对象。调用 `autorelease` 方法将这个对象添加到当前的自动释放池中。这样，当方法返回时，不需要手动释放 `string` 对象，它将在自动释放池被清空时自动释放。\n\n### 自动释放池的创建和销毁\n\n在 iOS 应用程序中，自动释放池通常由框架自动管理，开发者不需要显式地创建和销毁自动释放池。然而，在某些情况下，如创建大量临时对象或在非主线程中工作时，可能需要手动管理自动释放池。\n\n```objective-c\n// 手动创建和销毁自动释放池\n@autoreleasepool {\n    for (int i = 0; i < 1000; i++) {\n        NSString *string = [[[NSString alloc] initWithFormat:@\"Number %d\", i] autorelease];\n        NSLog(@\"%@\", string);\n    }\n}\n```\n\n在这个例子中，`@autoreleasepool` 块创建了一个新的自动释放池。所有在该块中被 `autorelease` 的对象将在块结束时自动释放。\n\n### 自动释放池的注意事项\n\n- **性能考虑**：频繁创建和销毁大量对象时，使用自动释放池可以帮助管理内存，但要注意不要在紧密循环中频繁使用 `autorelease`，可能会导致性能问题。\n- **非主线程**：在非主线程中工作时，确保有一个自动释放池。如果没有显式创建，可能会导致内存泄漏。\n\n### 自动释放池在 ARC 中的表现\n\n在 ARC 环境中，`autorelease` 和自动释放池仍然存在，但 ARC 自动管理对象的内存，大多数情况下不需要显式调用 `autorelease`。然而，理解自动释放池的工作原理仍然很重要，特别是在处理性能优化和非主线程时。\n\n### 总结\n\n- **`autorelease`**：延迟释放对象，将对象添加到自动释放池中。\n- **自动释放池**：存储 `autorelease` 对象，生命周期与运行循环对应。\n- **使用场景**：临时对象、批量操作、非主线程。\n- **手动管理**：在需要时显式创建和销毁自动释放池，确保内存管理正确。\n\n通过理解和正确使用 `autorelease` 和自动释放池，开发者可以更有效地管理内存，避免内存泄漏和提升应用性能。\n\n\n\n# 自动释放池的前世今生 ---- 深入解析 autoreleasepool\n\nhttps://draveness.me/autoreleasepool/","slug":"iOS/OC/002-内存管理/006-autorelease和Autorelease Pool/README","published":1,"updated":"2024-08-06T08:39:38.180Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp948002ndgxr085zflxj","content":"<!-- # autorelease和Autorelease Pool -->\n\n<p>在 iOS 和 macOS 开发中，<code>autorelease</code> 是一种内存管理机制，属于 Cocoa 的内存管理系统的一部分。<code>autorelease</code> 通过自动释放池（autorelease pool）管理对象的生命周期，帮助开发者在不需要手动调用 <code>release</code> 的情况下处理对象的释放。以下是对 <code>autorelease</code> 的详细介绍：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"什么是-autorelease\"><a href=\"#什么是-autorelease\" class=\"headerlink\" title=\"什么是 autorelease\"></a>什么是 <code>autorelease</code></h3><p><code>autorelease</code> 是一种延迟释放对象的方法。当你对一个对象调用 <code>autorelease</code> 方法时，对象不会立即被释放，而是被添加到当前的自动释放池中。当自动释放池被销毁时，池中的所有对象都会接收到一个 <code>release</code> 消息。</p>\n<h3 id=\"自动释放池（Autorelease-Pool）\"><a href=\"#自动释放池（Autorelease-Pool）\" class=\"headerlink\" title=\"自动释放池（Autorelease Pool）\"></a>自动释放池（Autorelease Pool）</h3><p>自动释放池是一个临时的存储区，用于存储被标记为 <code>autorelease</code> 的对象。自动释放池的生命周期通常与运行循环（run loop）的生命周期相对应。在每次运行循环迭代结束时，自动释放池会被清空，所有存储在其中的对象都会被释放。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li><strong>临时对象</strong>：在方法中创建临时对象并返回，而不需要担心手动释放对象。</li>\n<li><strong>批量操作</strong>：在循环中创建大量对象时使用，避免在循环中频繁手动释放对象。</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下示例展示了 <code>autorelease</code> 的使用：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)temporaryString &#123;</span><br><span class=\"line\">    NSString *string = [[[NSString alloc] initWithFormat:@&quot;Hello, World!&quot;] autorelease];</span><br><span class=\"line\">    return string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个例子中，<code>initWithFormat:</code> 方法创建了一个新的 <code>NSString</code> 对象。调用 <code>autorelease</code> 方法将这个对象添加到当前的自动释放池中。这样，当方法返回时，不需要手动释放 <code>string</code> 对象，它将在自动释放池被清空时自动释放。</p>\n<h3 id=\"自动释放池的创建和销毁\"><a href=\"#自动释放池的创建和销毁\" class=\"headerlink\" title=\"自动释放池的创建和销毁\"></a>自动释放池的创建和销毁</h3><p>在 iOS 应用程序中，自动释放池通常由框架自动管理，开发者不需要显式地创建和销毁自动释放池。然而，在某些情况下，如创建大量临时对象或在非主线程中工作时，可能需要手动管理自动释放池。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 手动创建和销毁自动释放池</span><br><span class=\"line\">@autoreleasepool &#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">        NSString *string = [[[NSString alloc] initWithFormat:@&quot;Number %d&quot;, i] autorelease];</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个例子中，<code>@autoreleasepool</code> 块创建了一个新的自动释放池。所有在该块中被 <code>autorelease</code> 的对象将在块结束时自动释放。</p>\n<h3 id=\"自动释放池的注意事项\"><a href=\"#自动释放池的注意事项\" class=\"headerlink\" title=\"自动释放池的注意事项\"></a>自动释放池的注意事项</h3><ul>\n<li><strong>性能考虑</strong>：频繁创建和销毁大量对象时，使用自动释放池可以帮助管理内存，但要注意不要在紧密循环中频繁使用 <code>autorelease</code>，可能会导致性能问题。</li>\n<li><strong>非主线程</strong>：在非主线程中工作时，确保有一个自动释放池。如果没有显式创建，可能会导致内存泄漏。</li>\n</ul>\n<h3 id=\"自动释放池在-ARC-中的表现\"><a href=\"#自动释放池在-ARC-中的表现\" class=\"headerlink\" title=\"自动释放池在 ARC 中的表现\"></a>自动释放池在 ARC 中的表现</h3><p>在 ARC 环境中，<code>autorelease</code> 和自动释放池仍然存在，但 ARC 自动管理对象的内存，大多数情况下不需要显式调用 <code>autorelease</code>。然而，理解自动释放池的工作原理仍然很重要，特别是在处理性能优化和非主线程时。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>autorelease</code>**：延迟释放对象，将对象添加到自动释放池中。</li>\n<li><strong>自动释放池</strong>：存储 <code>autorelease</code> 对象，生命周期与运行循环对应。</li>\n<li><strong>使用场景</strong>：临时对象、批量操作、非主线程。</li>\n<li><strong>手动管理</strong>：在需要时显式创建和销毁自动释放池，确保内存管理正确。</li>\n</ul>\n<p>通过理解和正确使用 <code>autorelease</code> 和自动释放池，开发者可以更有效地管理内存，避免内存泄漏和提升应用性能。</p>\n<h1 id=\"自动释放池的前世今生-—-深入解析-autoreleasepool\"><a href=\"#自动释放池的前世今生-—-深入解析-autoreleasepool\" class=\"headerlink\" title=\"自动释放池的前世今生 —- 深入解析 autoreleasepool\"></a>自动释放池的前世今生 —- 深入解析 autoreleasepool</h1><p><a class=\"link\"   href=\"https://draveness.me/autoreleasepool/\" >https://draveness.me/autoreleasepool/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"<!-- # autorelease和Autorelease Pool -->\n\n<p>在 iOS 和 macOS 开发中，<code>autorelease</code> 是一种内存管理机制，属于 Cocoa 的内存管理系统的一部分。<code>autorelease</code> 通过自动释放池（autorelease pool）管理对象的生命周期，帮助开发者在不需要手动调用 <code>release</code> 的情况下处理对象的释放。以下是对 <code>autorelease</code> 的详细介绍：</p>","more":"<h3 id=\"什么是-autorelease\"><a href=\"#什么是-autorelease\" class=\"headerlink\" title=\"什么是 autorelease\"></a>什么是 <code>autorelease</code></h3><p><code>autorelease</code> 是一种延迟释放对象的方法。当你对一个对象调用 <code>autorelease</code> 方法时，对象不会立即被释放，而是被添加到当前的自动释放池中。当自动释放池被销毁时，池中的所有对象都会接收到一个 <code>release</code> 消息。</p>\n<h3 id=\"自动释放池（Autorelease-Pool）\"><a href=\"#自动释放池（Autorelease-Pool）\" class=\"headerlink\" title=\"自动释放池（Autorelease Pool）\"></a>自动释放池（Autorelease Pool）</h3><p>自动释放池是一个临时的存储区，用于存储被标记为 <code>autorelease</code> 的对象。自动释放池的生命周期通常与运行循环（run loop）的生命周期相对应。在每次运行循环迭代结束时，自动释放池会被清空，所有存储在其中的对象都会被释放。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li><strong>临时对象</strong>：在方法中创建临时对象并返回，而不需要担心手动释放对象。</li>\n<li><strong>批量操作</strong>：在循环中创建大量对象时使用，避免在循环中频繁手动释放对象。</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下示例展示了 <code>autorelease</code> 的使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)temporaryString &#123;</span><br><span class=\"line\">    NSString *string = [[[NSString alloc] initWithFormat:@&quot;Hello, World!&quot;] autorelease];</span><br><span class=\"line\">    return string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>initWithFormat:</code> 方法创建了一个新的 <code>NSString</code> 对象。调用 <code>autorelease</code> 方法将这个对象添加到当前的自动释放池中。这样，当方法返回时，不需要手动释放 <code>string</code> 对象，它将在自动释放池被清空时自动释放。</p>\n<h3 id=\"自动释放池的创建和销毁\"><a href=\"#自动释放池的创建和销毁\" class=\"headerlink\" title=\"自动释放池的创建和销毁\"></a>自动释放池的创建和销毁</h3><p>在 iOS 应用程序中，自动释放池通常由框架自动管理，开发者不需要显式地创建和销毁自动释放池。然而，在某些情况下，如创建大量临时对象或在非主线程中工作时，可能需要手动管理自动释放池。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 手动创建和销毁自动释放池</span><br><span class=\"line\">@autoreleasepool &#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">        NSString *string = [[[NSString alloc] initWithFormat:@&quot;Number %d&quot;, i] autorelease];</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>@autoreleasepool</code> 块创建了一个新的自动释放池。所有在该块中被 <code>autorelease</code> 的对象将在块结束时自动释放。</p>\n<h3 id=\"自动释放池的注意事项\"><a href=\"#自动释放池的注意事项\" class=\"headerlink\" title=\"自动释放池的注意事项\"></a>自动释放池的注意事项</h3><ul>\n<li><strong>性能考虑</strong>：频繁创建和销毁大量对象时，使用自动释放池可以帮助管理内存，但要注意不要在紧密循环中频繁使用 <code>autorelease</code>，可能会导致性能问题。</li>\n<li><strong>非主线程</strong>：在非主线程中工作时，确保有一个自动释放池。如果没有显式创建，可能会导致内存泄漏。</li>\n</ul>\n<h3 id=\"自动释放池在-ARC-中的表现\"><a href=\"#自动释放池在-ARC-中的表现\" class=\"headerlink\" title=\"自动释放池在 ARC 中的表现\"></a>自动释放池在 ARC 中的表现</h3><p>在 ARC 环境中，<code>autorelease</code> 和自动释放池仍然存在，但 ARC 自动管理对象的内存，大多数情况下不需要显式调用 <code>autorelease</code>。然而，理解自动释放池的工作原理仍然很重要，特别是在处理性能优化和非主线程时。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>autorelease</code>**：延迟释放对象，将对象添加到自动释放池中。</li>\n<li><strong>自动释放池</strong>：存储 <code>autorelease</code> 对象，生命周期与运行循环对应。</li>\n<li><strong>使用场景</strong>：临时对象、批量操作、非主线程。</li>\n<li><strong>手动管理</strong>：在需要时显式创建和销毁自动释放池，确保内存管理正确。</li>\n</ul>\n<p>通过理解和正确使用 <code>autorelease</code> 和自动释放池，开发者可以更有效地管理内存，避免内存泄漏和提升应用性能。</p>\n<h1 id=\"自动释放池的前世今生-—-深入解析-autoreleasepool\"><a href=\"#自动释放池的前世今生-—-深入解析-autoreleasepool\" class=\"headerlink\" title=\"自动释放池的前世今生 —- 深入解析 autoreleasepool\"></a>自动释放池的前世今生 —- 深入解析 autoreleasepool</h1><p><a class=\"link\"   href=\"https://draveness.me/autoreleasepool/\" >https://draveness.me/autoreleasepool/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>"},{"title":"iOS中 Core Foundation 不支持 ARC","date":"2024-07-22T08:01:21.612Z","_content":"\n<!-- # iOS中 Core Foundation 不支持 ARC -->\n\nCore Foundation（CF）是一个底层的C语言框架，用于iOS和macOS开发。它不支持自动引用计数（ARC），因此在使用Core Foundation的API时，开发者需要手动管理内存。\n \n<!-- more -->\n\n### Core Foundation 与 ARC\n\n在使用Core Foundation的对象时，以下几点需要特别注意：\n\n1. **手动管理内存**：与Objective-C对象不同，Core Foundation对象必须手动管理其生命周期。这意味着需要手动调用`CFRetain`和`CFRelease`来管理对象的引用计数。\n\n2. **内存管理规则**：Core Foundation遵循特定的内存管理规则，如Create Rule和Get Rule。\n   - **Create Rule**：任何带有`Create`或`Copy`的函数（例如`CFStringCreateWithCString`）会返回一个新创建的对象，调用者负责管理其生命周期，并在不需要时调用`CFRelease`。\n   - **Get Rule**：任何不带有`Create`或`Copy`的函数（例如`CFArrayGetValueAtIndex`）返回的对象由调用者不负责管理。\n\n3. **桥接 Core Foundation 和 Objective-C 对象**：Core Foundation对象和Objective-C对象之间的转换需要桥接，通常通过`__bridge`、`__bridge_retained`、`__bridge_transfer`来实现。\n\n### 桥接示例\n\n以下是一些常见的桥接示例，用于在Core Foundation和Objective-C对象之间转换，并管理内存：\n\n#### 将 Core Foundation 对象转换为 Objective-C 对象\n\n如果需要将Core Foundation对象转换为Objective-C对象，并且希望ARC管理Objective-C对象的生命周期，可以使用`__bridge_transfer`。\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(NULL, \"Hello, World!\", kCFStringEncodingUTF8);\nNSString *objcString = (__bridge_transfer NSString *)cfString;\n// objcString 将被 ARC 管理，不需要手动调用 CFRelease(cfString)\n```\n\n#### 将 Objective-C 对象转换为 Core Foundation 对象\n\n如果需要将Objective-C对象转换为Core Foundation对象，并且希望手动管理Core Foundation对象的生命周期，可以使用`__bridge_retained`。\n\n```objective-c\nNSString *objcString = @\"Hello, World!\";\nCFStringRef cfString = (__bridge_retained CFStringRef)objcString;\n// 需要手动调用 CFRelease(cfString) 来释放内存\nCFRelease(cfString);\n```\n\n### 完整示例\n\n以下是一个完整示例，演示了在ARC环境下如何使用Core Foundation对象，并正确地进行内存管理：\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <CoreFoundation/CoreFoundation.h>\n\nvoid createAndUseCoreFoundationObject() {\n    // 创建 Core Foundation 对象\n    CFStringRef cfString = CFStringCreateWithCString(NULL, \"Hello, World!\", kCFStringEncodingUTF8);\n    \n    // 将 Core Foundation 对象转换为 Objective-C 对象\n    NSString *objcString = (__bridge_transfer NSString *)cfString;\n    NSLog(@\"Objective-C String: %@\", objcString);\n    \n    // Core Foundation 对象被 ARC 管理，不需要手动释放\n}\n\nvoid convertAndManageObjectiveCObject() {\n    // 创建 Objective-C 对象\n    NSString *objcString = @\"Hello, World!\";\n    \n    // 将 Objective-C 对象转换为 Core Foundation 对象\n    CFStringRef cfString = (__bridge_retained CFStringRef)objcString;\n    \n    // 使用 Core Foundation 对象\n    CFShow(cfString);\n    \n    // 手动释放 Core Foundation 对象\n    CFRelease(cfString);\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        createAndUseCoreFoundationObject();\n        convertAndManageObjectiveCObject();\n    }\n    return 0;\n}\n```\n\n### 总结\n\nCore Foundation不支持ARC，因此在使用Core Foundation对象时，开发者需要手动管理内存。这包括遵循Create Rule和Get Rule，以及正确地使用桥接来转换Core Foundation和Objective-C对象。理解这些规则和技巧，有助于在ARC环境中正确、安全地使用Core Foundation。\n\n\n\n\n\n# 关于 Toll-Free Bridging\n\n- __bridge（修饰符）\n- __bridge_retained（修饰符） or CFBridgingRetain（函数）\n- __bridge_transfer（修饰符） or CFBridgingRelease（函数）\n\nhttps://www.samirchen.com/ios-arc/","source":"_posts/iOS/OC/002-内存管理/007-Core Foundation不支持ARC/README.md","raw":"---\ntitle: iOS中 Core Foundation 不支持 ARC\ndate: {{ date }}\ntags: [iOS, 面试题, ARC]\n---\n\n<!-- # iOS中 Core Foundation 不支持 ARC -->\n\nCore Foundation（CF）是一个底层的C语言框架，用于iOS和macOS开发。它不支持自动引用计数（ARC），因此在使用Core Foundation的API时，开发者需要手动管理内存。\n \n<!-- more -->\n\n### Core Foundation 与 ARC\n\n在使用Core Foundation的对象时，以下几点需要特别注意：\n\n1. **手动管理内存**：与Objective-C对象不同，Core Foundation对象必须手动管理其生命周期。这意味着需要手动调用`CFRetain`和`CFRelease`来管理对象的引用计数。\n\n2. **内存管理规则**：Core Foundation遵循特定的内存管理规则，如Create Rule和Get Rule。\n   - **Create Rule**：任何带有`Create`或`Copy`的函数（例如`CFStringCreateWithCString`）会返回一个新创建的对象，调用者负责管理其生命周期，并在不需要时调用`CFRelease`。\n   - **Get Rule**：任何不带有`Create`或`Copy`的函数（例如`CFArrayGetValueAtIndex`）返回的对象由调用者不负责管理。\n\n3. **桥接 Core Foundation 和 Objective-C 对象**：Core Foundation对象和Objective-C对象之间的转换需要桥接，通常通过`__bridge`、`__bridge_retained`、`__bridge_transfer`来实现。\n\n### 桥接示例\n\n以下是一些常见的桥接示例，用于在Core Foundation和Objective-C对象之间转换，并管理内存：\n\n#### 将 Core Foundation 对象转换为 Objective-C 对象\n\n如果需要将Core Foundation对象转换为Objective-C对象，并且希望ARC管理Objective-C对象的生命周期，可以使用`__bridge_transfer`。\n\n```objective-c\nCFStringRef cfString = CFStringCreateWithCString(NULL, \"Hello, World!\", kCFStringEncodingUTF8);\nNSString *objcString = (__bridge_transfer NSString *)cfString;\n// objcString 将被 ARC 管理，不需要手动调用 CFRelease(cfString)\n```\n\n#### 将 Objective-C 对象转换为 Core Foundation 对象\n\n如果需要将Objective-C对象转换为Core Foundation对象，并且希望手动管理Core Foundation对象的生命周期，可以使用`__bridge_retained`。\n\n```objective-c\nNSString *objcString = @\"Hello, World!\";\nCFStringRef cfString = (__bridge_retained CFStringRef)objcString;\n// 需要手动调用 CFRelease(cfString) 来释放内存\nCFRelease(cfString);\n```\n\n### 完整示例\n\n以下是一个完整示例，演示了在ARC环境下如何使用Core Foundation对象，并正确地进行内存管理：\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <CoreFoundation/CoreFoundation.h>\n\nvoid createAndUseCoreFoundationObject() {\n    // 创建 Core Foundation 对象\n    CFStringRef cfString = CFStringCreateWithCString(NULL, \"Hello, World!\", kCFStringEncodingUTF8);\n    \n    // 将 Core Foundation 对象转换为 Objective-C 对象\n    NSString *objcString = (__bridge_transfer NSString *)cfString;\n    NSLog(@\"Objective-C String: %@\", objcString);\n    \n    // Core Foundation 对象被 ARC 管理，不需要手动释放\n}\n\nvoid convertAndManageObjectiveCObject() {\n    // 创建 Objective-C 对象\n    NSString *objcString = @\"Hello, World!\";\n    \n    // 将 Objective-C 对象转换为 Core Foundation 对象\n    CFStringRef cfString = (__bridge_retained CFStringRef)objcString;\n    \n    // 使用 Core Foundation 对象\n    CFShow(cfString);\n    \n    // 手动释放 Core Foundation 对象\n    CFRelease(cfString);\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        createAndUseCoreFoundationObject();\n        convertAndManageObjectiveCObject();\n    }\n    return 0;\n}\n```\n\n### 总结\n\nCore Foundation不支持ARC，因此在使用Core Foundation对象时，开发者需要手动管理内存。这包括遵循Create Rule和Get Rule，以及正确地使用桥接来转换Core Foundation和Objective-C对象。理解这些规则和技巧，有助于在ARC环境中正确、安全地使用Core Foundation。\n\n\n\n\n\n# 关于 Toll-Free Bridging\n\n- __bridge（修饰符）\n- __bridge_retained（修饰符） or CFBridgingRetain（函数）\n- __bridge_transfer（修饰符） or CFBridgingRelease（函数）\n\nhttps://www.samirchen.com/ios-arc/","slug":"iOS/OC/002-内存管理/007-Core Foundation不支持ARC/README","published":1,"updated":"2024-08-06T08:39:42.319Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp948002qdgxrglnq36l1","content":"<!-- # iOS中 Core Foundation 不支持 ARC -->\n\n<p>Core Foundation（CF）是一个底层的C语言框架，用于iOS和macOS开发。它不支持自动引用计数（ARC），因此在使用Core Foundation的API时，开发者需要手动管理内存。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Core-Foundation-与-ARC\"><a href=\"#Core-Foundation-与-ARC\" class=\"headerlink\" title=\"Core Foundation 与 ARC\"></a>Core Foundation 与 ARC</h3><p>在使用Core Foundation的对象时，以下几点需要特别注意：</p>\n<ol>\n<li><p><strong>手动管理内存</strong>：与Objective-C对象不同，Core Foundation对象必须手动管理其生命周期。这意味着需要手动调用<code>CFRetain</code>和<code>CFRelease</code>来管理对象的引用计数。</p>\n</li>\n<li><p><strong>内存管理规则</strong>：Core Foundation遵循特定的内存管理规则，如Create Rule和Get Rule。</p>\n<ul>\n<li><strong>Create Rule</strong>：任何带有<code>Create</code>或<code>Copy</code>的函数（例如<code>CFStringCreateWithCString</code>）会返回一个新创建的对象，调用者负责管理其生命周期，并在不需要时调用<code>CFRelease</code>。</li>\n<li><strong>Get Rule</strong>：任何不带有<code>Create</code>或<code>Copy</code>的函数（例如<code>CFArrayGetValueAtIndex</code>）返回的对象由调用者不负责管理。</li>\n</ul>\n</li>\n<li><p><strong>桥接 Core Foundation 和 Objective-C 对象</strong>：Core Foundation对象和Objective-C对象之间的转换需要桥接，通常通过<code>__bridge</code>、<code>__bridge_retained</code>、<code>__bridge_transfer</code>来实现。</p>\n</li>\n</ol>\n<h3 id=\"桥接示例\"><a href=\"#桥接示例\" class=\"headerlink\" title=\"桥接示例\"></a>桥接示例</h3><p>以下是一些常见的桥接示例，用于在Core Foundation和Objective-C对象之间转换，并管理内存：</p>\n<h4 id=\"将-Core-Foundation-对象转换为-Objective-C-对象\"><a href=\"#将-Core-Foundation-对象转换为-Objective-C-对象\" class=\"headerlink\" title=\"将 Core Foundation 对象转换为 Objective-C 对象\"></a>将 Core Foundation 对象转换为 Objective-C 对象</h4><p>如果需要将Core Foundation对象转换为Objective-C对象，并且希望ARC管理Objective-C对象的生命周期，可以使用<code>__bridge_transfer</code>。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(NULL, &quot;Hello, World!&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *objcString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">// objcString 将被 ARC 管理，不需要手动调用 CFRelease(cfString)</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"将-Objective-C-对象转换为-Core-Foundation-对象\"><a href=\"#将-Objective-C-对象转换为-Core-Foundation-对象\" class=\"headerlink\" title=\"将 Objective-C 对象转换为 Core Foundation 对象\"></a>将 Objective-C 对象转换为 Core Foundation 对象</h4><p>如果需要将Objective-C对象转换为Core Foundation对象，并且希望手动管理Core Foundation对象的生命周期，可以使用<code>__bridge_retained</code>。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *objcString = @&quot;Hello, World!&quot;;</span><br><span class=\"line\">CFStringRef cfString = (__bridge_retained CFStringRef)objcString;</span><br><span class=\"line\">// 需要手动调用 CFRelease(cfString) 来释放内存</span><br><span class=\"line\">CFRelease(cfString);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h3><p>以下是一个完整示例，演示了在ARC环境下如何使用Core Foundation对象，并正确地进行内存管理：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;CoreFoundation/CoreFoundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void createAndUseCoreFoundationObject() &#123;</span><br><span class=\"line\">    // 创建 Core Foundation 对象</span><br><span class=\"line\">    CFStringRef cfString = CFStringCreateWithCString(NULL, &quot;Hello, World!&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 将 Core Foundation 对象转换为 Objective-C 对象</span><br><span class=\"line\">    NSString *objcString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">    NSLog(@&quot;Objective-C String: %@&quot;, objcString);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // Core Foundation 对象被 ARC 管理，不需要手动释放</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void convertAndManageObjectiveCObject() &#123;</span><br><span class=\"line\">    // 创建 Objective-C 对象</span><br><span class=\"line\">    NSString *objcString = @&quot;Hello, World!&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 将 Objective-C 对象转换为 Core Foundation 对象</span><br><span class=\"line\">    CFStringRef cfString = (__bridge_retained CFStringRef)objcString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 使用 Core Foundation 对象</span><br><span class=\"line\">    CFShow(cfString);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 手动释放 Core Foundation 对象</span><br><span class=\"line\">    CFRelease(cfString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        createAndUseCoreFoundationObject();</span><br><span class=\"line\">        convertAndManageObjectiveCObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Core Foundation不支持ARC，因此在使用Core Foundation对象时，开发者需要手动管理内存。这包括遵循Create Rule和Get Rule，以及正确地使用桥接来转换Core Foundation和Objective-C对象。理解这些规则和技巧，有助于在ARC环境中正确、安全地使用Core Foundation。</p>\n<h1 id=\"关于-Toll-Free-Bridging\"><a href=\"#关于-Toll-Free-Bridging\" class=\"headerlink\" title=\"关于 Toll-Free Bridging\"></a>关于 Toll-Free Bridging</h1><ul>\n<li>__bridge（修饰符）</li>\n<li>__bridge_retained（修饰符） or CFBridgingRetain（函数）</li>\n<li>__bridge_transfer（修饰符） or CFBridgingRelease（函数）</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.samirchen.com/ios-arc/\" >https://www.samirchen.com/ios-arc/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"<!-- # iOS中 Core Foundation 不支持 ARC -->\n\n<p>Core Foundation（CF）是一个底层的C语言框架，用于iOS和macOS开发。它不支持自动引用计数（ARC），因此在使用Core Foundation的API时，开发者需要手动管理内存。</p>","more":"<h3 id=\"Core-Foundation-与-ARC\"><a href=\"#Core-Foundation-与-ARC\" class=\"headerlink\" title=\"Core Foundation 与 ARC\"></a>Core Foundation 与 ARC</h3><p>在使用Core Foundation的对象时，以下几点需要特别注意：</p>\n<ol>\n<li><p><strong>手动管理内存</strong>：与Objective-C对象不同，Core Foundation对象必须手动管理其生命周期。这意味着需要手动调用<code>CFRetain</code>和<code>CFRelease</code>来管理对象的引用计数。</p>\n</li>\n<li><p><strong>内存管理规则</strong>：Core Foundation遵循特定的内存管理规则，如Create Rule和Get Rule。</p>\n<ul>\n<li><strong>Create Rule</strong>：任何带有<code>Create</code>或<code>Copy</code>的函数（例如<code>CFStringCreateWithCString</code>）会返回一个新创建的对象，调用者负责管理其生命周期，并在不需要时调用<code>CFRelease</code>。</li>\n<li><strong>Get Rule</strong>：任何不带有<code>Create</code>或<code>Copy</code>的函数（例如<code>CFArrayGetValueAtIndex</code>）返回的对象由调用者不负责管理。</li>\n</ul>\n</li>\n<li><p><strong>桥接 Core Foundation 和 Objective-C 对象</strong>：Core Foundation对象和Objective-C对象之间的转换需要桥接，通常通过<code>__bridge</code>、<code>__bridge_retained</code>、<code>__bridge_transfer</code>来实现。</p>\n</li>\n</ol>\n<h3 id=\"桥接示例\"><a href=\"#桥接示例\" class=\"headerlink\" title=\"桥接示例\"></a>桥接示例</h3><p>以下是一些常见的桥接示例，用于在Core Foundation和Objective-C对象之间转换，并管理内存：</p>\n<h4 id=\"将-Core-Foundation-对象转换为-Objective-C-对象\"><a href=\"#将-Core-Foundation-对象转换为-Objective-C-对象\" class=\"headerlink\" title=\"将 Core Foundation 对象转换为 Objective-C 对象\"></a>将 Core Foundation 对象转换为 Objective-C 对象</h4><p>如果需要将Core Foundation对象转换为Objective-C对象，并且希望ARC管理Objective-C对象的生命周期，可以使用<code>__bridge_transfer</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFStringRef cfString = CFStringCreateWithCString(NULL, &quot;Hello, World!&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">NSString *objcString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">// objcString 将被 ARC 管理，不需要手动调用 CFRelease(cfString)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将-Objective-C-对象转换为-Core-Foundation-对象\"><a href=\"#将-Objective-C-对象转换为-Core-Foundation-对象\" class=\"headerlink\" title=\"将 Objective-C 对象转换为 Core Foundation 对象\"></a>将 Objective-C 对象转换为 Core Foundation 对象</h4><p>如果需要将Objective-C对象转换为Core Foundation对象，并且希望手动管理Core Foundation对象的生命周期，可以使用<code>__bridge_retained</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *objcString = @&quot;Hello, World!&quot;;</span><br><span class=\"line\">CFStringRef cfString = (__bridge_retained CFStringRef)objcString;</span><br><span class=\"line\">// 需要手动调用 CFRelease(cfString) 来释放内存</span><br><span class=\"line\">CFRelease(cfString);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h3><p>以下是一个完整示例，演示了在ARC环境下如何使用Core Foundation对象，并正确地进行内存管理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;CoreFoundation/CoreFoundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void createAndUseCoreFoundationObject() &#123;</span><br><span class=\"line\">    // 创建 Core Foundation 对象</span><br><span class=\"line\">    CFStringRef cfString = CFStringCreateWithCString(NULL, &quot;Hello, World!&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 将 Core Foundation 对象转换为 Objective-C 对象</span><br><span class=\"line\">    NSString *objcString = (__bridge_transfer NSString *)cfString;</span><br><span class=\"line\">    NSLog(@&quot;Objective-C String: %@&quot;, objcString);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // Core Foundation 对象被 ARC 管理，不需要手动释放</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void convertAndManageObjectiveCObject() &#123;</span><br><span class=\"line\">    // 创建 Objective-C 对象</span><br><span class=\"line\">    NSString *objcString = @&quot;Hello, World!&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 将 Objective-C 对象转换为 Core Foundation 对象</span><br><span class=\"line\">    CFStringRef cfString = (__bridge_retained CFStringRef)objcString;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 使用 Core Foundation 对象</span><br><span class=\"line\">    CFShow(cfString);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 手动释放 Core Foundation 对象</span><br><span class=\"line\">    CFRelease(cfString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        createAndUseCoreFoundationObject();</span><br><span class=\"line\">        convertAndManageObjectiveCObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Core Foundation不支持ARC，因此在使用Core Foundation对象时，开发者需要手动管理内存。这包括遵循Create Rule和Get Rule，以及正确地使用桥接来转换Core Foundation和Objective-C对象。理解这些规则和技巧，有助于在ARC环境中正确、安全地使用Core Foundation。</p>\n<h1 id=\"关于-Toll-Free-Bridging\"><a href=\"#关于-Toll-Free-Bridging\" class=\"headerlink\" title=\"关于 Toll-Free Bridging\"></a>关于 Toll-Free Bridging</h1><ul>\n<li>__bridge（修饰符）</li>\n<li>__bridge_retained（修饰符） or CFBridgingRetain（函数）</li>\n<li>__bridge_transfer（修饰符） or CFBridgingRelease（函数）</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.samirchen.com/ios-arc/\" >https://www.samirchen.com/ios-arc/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>"},{"title":"什么是空指针、野指针？","date":"2024-07-22T08:01:21.676Z","_content":"\n\n[【Objective-C】09-空指针和野指针](https://www.cnblogs.com/mjios/archive/2013/04/22/3034788.html)\n\n\n\n<!-- # 什么是空指针、野指针？ -->\n\n- 空指针：\n\n    1> 没有存储任何内存地址的指针就称为空指针(NULL指针)\n\n    2> 空指针就是被赋值为0的指针，在没有被具体初始化之前，其值为0。\n\n    ```\n    Student *s1 = NULL;\n    Student *s2 = nil;\n    ```\n <!-- more -->\n\n- 野指针：\n\n    \"野指针\"不是NULL指针，是指向\"垃圾\"内存（不可用内存）的指针。野指针是非常危险的。向野指针发送消息会导致崩溃。野指针错误形式在Xcode中通常表现为：Thread 1：EXC_BAD_ACCESS，因为你访问了一块已经不属于你的内存。\n\n- 野指针，有指向，而空指针无指向，为NULL\n\n\n\n**空指针**表示指针不指向任何对象或内存，可以安全地检查和处理。\n\n**野指针**指向已经释放或未分配的内存，使用它们会导致未定义行为，需要小心处理。\n\n\n\n# 野指针如何产生？\n\n> 1. 指针变量未初始化\n>\n>     任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。\n>\n> 2. 指针释放后之后未置空\n>\n>     有时指针在free或delete后未赋值 NULL，便会使人以为是合法的。别看free和delete的名字（尤其是delete），它们只是把指针所指的内存给释放掉，但并没有把指针本身干掉。此时指针指向的就是“垃圾”内存。释放后的指针应立即将指针置为NULL，防止产生“野指针”。\n>\n> 3. 指针操作超越变量作用域\n>\n>     不要返回指向栈内存的指针或引用，因为栈内存在函数结束时会被释放。\n\n**释放对象后没有将指针置为 nil**： 当你手动释放一个对象后，如果没有将指向该对象的指针置为 nil，该指针就变成了野指针。\n\n```\nobjective\n复制代码\nMyClass *obj = [[MyClass alloc] init];\n[obj release]; // obj 指向的内存被释放了\n// obj 现在是野指针\n```\n\n\n\n\n\n示例一：\n\nassign可以用来修饰OC对象，会造成野指针。 unsafe_unretained声明一个弱引用，但不会自动置为nil，会出现野指针。\n\n\n\n示例二：\n\n自定义Student类，在main函数中添加下列代码\n\n```objective-c\nStudent *stu = [[Student alloc] init];\n\n[stu setAge:10];\n\n[stu release];\n\n[stu setAge:10];\n```\n\n运行程序，你会发现`[stu setAge:10];`报错了，是个野指针错误！\n\n**分析一下报错原因**\n\n1> 执行完第1行代码后，内存中有个指针变量stu，指向了Student对象 `Student *stu = [[Student alloc] init];`\n\n![img](005.png)\n\n假设Student对象的地址为0xff43，指针变量stu的地址为0xee45，stu中存储的是Student对象的地址0xff43。即指针变量stu指向了这个Student对象。\n\n2> 接下来是第3行代码: `[stu setAge:10];`\n\n这行代码的意思是：给stu所指向的Student对象发送一条setAge:消息，即调用这个Student对象的setAge:方法。目前来说，这个Student对象仍存在于内存中，所以这句代码没有任何问题。\n\n3> 接下来是第5行代码: `[stu release];`\n\n这行代码的意思是：给stu指向的Student对象发送一条release消息。在这里，Student对象接收到release消息后，会马上被销毁，所占用的内存会被回收。\n\n![img](006.png)\n\nStudent对象被销毁了，地址为0xff43的内存就变成了\"垃圾内存\"，然而，指针变量stu仍然指向这一块内存，这时候，stu就称为了**野指针！**\n\n4> 最后执行了第7行代码: `[stu setAge:10];`\n\n这句代码的意思仍然是： 给stu所指向的Student对象发送一条setAge:消息。但是在执行完第5行代码后，Student对象已经被销毁了，它所占用的内存已经是垃圾内存，如果你还去访问这一块内存，那就会报野指针错误。这块内存已经不可用了，也不属于你了，你还去访问它，肯定是不合法的。所以，这行代码报错了！\n\n5> 如果修改下代码： \n\n```objc\nStudent *stu = [[Student alloc] init];\n\n[stu setAge:10];\n\n[stu release];\n\nstu = nil;   // stu变成了空指针，stu就不再指向任何内存了\n\n[stu setAge:10];\n```\n\n ![img](007.png)\n\n因为stu是个空指针，没有指向任何对象，因此第9行的setAge:消息是发不出去的，不会造成任何影响。当然，肯定也不会报错。\n\n\n\n# 防止野指针的方法\n\n1. **将指针置为 nil**： 在释放对象后，将指针置为 nil 可以防止野指针。\n\n    ```\n    objective\n    复制代码\n    MyClass *obj = [[MyClass alloc] init];\n    [obj release];\n    obj = nil; // 防止野指针\n    ```\n\n2. **使用自动引用计数（ARC）**： ARC 自动管理对象的内存，避免手动管理引用计数，从而减少野指针的产生。\n\n    ```\n    objective\n    复制代码\n    @interface MyClass : NSObject\n    @property (nonatomic, strong) NSString *name;\n    @end\n    \n    @implementation MyClass\n    @end\n    ```\n\n3. **使用弱引用（weak）**： 使用弱引用（weak）来防止循环引用和野指针。弱引用在引用对象被释放后自动置为 nil。\n\n    ```\n    objective\n    复制代码\n    @interface MyClass : NSObject\n    @property (nonatomic, weak) id<Delegate> delegate;\n    @end\n    \n    @implementation MyClass\n    @end\n    ```\n\n\n\n# 野指针的定位\n\n[iOS野指针定位总结](https://www.jianshu.com/p/8aba0ee41cd7)\n\n[iOS 通向野指针的必经之路](https://www.jianshu.com/p/a9014c4f379d)\n\n### 检测和调试野指针\n\n1. **启用僵尸对象（Zombie Objects）**： Xcode 提供了启用僵尸对象的选项，可以帮助检测野指针。启用僵尸对象后，被释放的对象会变成僵尸对象，当对僵尸对象发送消息时，会抛出异常，帮助你找到问题所在。\n\n    启用僵尸对象：\n\n    - 选择你的项目。\n    - 在左侧栏中选择 “Edit Scheme”。\n    - 选择 “Run” 标签，然后选择 “Diagnostics”。\n    - 勾选 “Enable Zombie Objects”。\n\n2. **Address Sanitizer**： Address Sanitizer 是一个运行时工具，可以检测内存错误，包括使用野指针。可以在 Xcode 中启用 Address Sanitizer 进行检测。\n\n    启用 Address Sanitizer：\n\n    - 选择你的项目。\n    - 在左侧栏中选择 “Edit Scheme”。\n    - 选择 “Run” 标签，然后选择 “Diagnostics”。\n    - 勾选 “Address Sanitizer”。","source":"_posts/iOS/OC/002-内存管理/011-空指针、野指针/README.md","raw":"---\ntitle: 什么是空指针、野指针？\ndate: {{ date }}\ntags: \n- iOS\n- 面试题\n- 空指针\n- 野指针\n---\n\n\n[【Objective-C】09-空指针和野指针](https://www.cnblogs.com/mjios/archive/2013/04/22/3034788.html)\n\n\n\n<!-- # 什么是空指针、野指针？ -->\n\n- 空指针：\n\n    1> 没有存储任何内存地址的指针就称为空指针(NULL指针)\n\n    2> 空指针就是被赋值为0的指针，在没有被具体初始化之前，其值为0。\n\n    ```\n    Student *s1 = NULL;\n    Student *s2 = nil;\n    ```\n <!-- more -->\n\n- 野指针：\n\n    \"野指针\"不是NULL指针，是指向\"垃圾\"内存（不可用内存）的指针。野指针是非常危险的。向野指针发送消息会导致崩溃。野指针错误形式在Xcode中通常表现为：Thread 1：EXC_BAD_ACCESS，因为你访问了一块已经不属于你的内存。\n\n- 野指针，有指向，而空指针无指向，为NULL\n\n\n\n**空指针**表示指针不指向任何对象或内存，可以安全地检查和处理。\n\n**野指针**指向已经释放或未分配的内存，使用它们会导致未定义行为，需要小心处理。\n\n\n\n# 野指针如何产生？\n\n> 1. 指针变量未初始化\n>\n>     任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。\n>\n> 2. 指针释放后之后未置空\n>\n>     有时指针在free或delete后未赋值 NULL，便会使人以为是合法的。别看free和delete的名字（尤其是delete），它们只是把指针所指的内存给释放掉，但并没有把指针本身干掉。此时指针指向的就是“垃圾”内存。释放后的指针应立即将指针置为NULL，防止产生“野指针”。\n>\n> 3. 指针操作超越变量作用域\n>\n>     不要返回指向栈内存的指针或引用，因为栈内存在函数结束时会被释放。\n\n**释放对象后没有将指针置为 nil**： 当你手动释放一个对象后，如果没有将指向该对象的指针置为 nil，该指针就变成了野指针。\n\n```\nobjective\n复制代码\nMyClass *obj = [[MyClass alloc] init];\n[obj release]; // obj 指向的内存被释放了\n// obj 现在是野指针\n```\n\n\n\n\n\n示例一：\n\nassign可以用来修饰OC对象，会造成野指针。 unsafe_unretained声明一个弱引用，但不会自动置为nil，会出现野指针。\n\n\n\n示例二：\n\n自定义Student类，在main函数中添加下列代码\n\n```objective-c\nStudent *stu = [[Student alloc] init];\n\n[stu setAge:10];\n\n[stu release];\n\n[stu setAge:10];\n```\n\n运行程序，你会发现`[stu setAge:10];`报错了，是个野指针错误！\n\n**分析一下报错原因**\n\n1> 执行完第1行代码后，内存中有个指针变量stu，指向了Student对象 `Student *stu = [[Student alloc] init];`\n\n![img](005.png)\n\n假设Student对象的地址为0xff43，指针变量stu的地址为0xee45，stu中存储的是Student对象的地址0xff43。即指针变量stu指向了这个Student对象。\n\n2> 接下来是第3行代码: `[stu setAge:10];`\n\n这行代码的意思是：给stu所指向的Student对象发送一条setAge:消息，即调用这个Student对象的setAge:方法。目前来说，这个Student对象仍存在于内存中，所以这句代码没有任何问题。\n\n3> 接下来是第5行代码: `[stu release];`\n\n这行代码的意思是：给stu指向的Student对象发送一条release消息。在这里，Student对象接收到release消息后，会马上被销毁，所占用的内存会被回收。\n\n![img](006.png)\n\nStudent对象被销毁了，地址为0xff43的内存就变成了\"垃圾内存\"，然而，指针变量stu仍然指向这一块内存，这时候，stu就称为了**野指针！**\n\n4> 最后执行了第7行代码: `[stu setAge:10];`\n\n这句代码的意思仍然是： 给stu所指向的Student对象发送一条setAge:消息。但是在执行完第5行代码后，Student对象已经被销毁了，它所占用的内存已经是垃圾内存，如果你还去访问这一块内存，那就会报野指针错误。这块内存已经不可用了，也不属于你了，你还去访问它，肯定是不合法的。所以，这行代码报错了！\n\n5> 如果修改下代码： \n\n```objc\nStudent *stu = [[Student alloc] init];\n\n[stu setAge:10];\n\n[stu release];\n\nstu = nil;   // stu变成了空指针，stu就不再指向任何内存了\n\n[stu setAge:10];\n```\n\n ![img](007.png)\n\n因为stu是个空指针，没有指向任何对象，因此第9行的setAge:消息是发不出去的，不会造成任何影响。当然，肯定也不会报错。\n\n\n\n# 防止野指针的方法\n\n1. **将指针置为 nil**： 在释放对象后，将指针置为 nil 可以防止野指针。\n\n    ```\n    objective\n    复制代码\n    MyClass *obj = [[MyClass alloc] init];\n    [obj release];\n    obj = nil; // 防止野指针\n    ```\n\n2. **使用自动引用计数（ARC）**： ARC 自动管理对象的内存，避免手动管理引用计数，从而减少野指针的产生。\n\n    ```\n    objective\n    复制代码\n    @interface MyClass : NSObject\n    @property (nonatomic, strong) NSString *name;\n    @end\n    \n    @implementation MyClass\n    @end\n    ```\n\n3. **使用弱引用（weak）**： 使用弱引用（weak）来防止循环引用和野指针。弱引用在引用对象被释放后自动置为 nil。\n\n    ```\n    objective\n    复制代码\n    @interface MyClass : NSObject\n    @property (nonatomic, weak) id<Delegate> delegate;\n    @end\n    \n    @implementation MyClass\n    @end\n    ```\n\n\n\n# 野指针的定位\n\n[iOS野指针定位总结](https://www.jianshu.com/p/8aba0ee41cd7)\n\n[iOS 通向野指针的必经之路](https://www.jianshu.com/p/a9014c4f379d)\n\n### 检测和调试野指针\n\n1. **启用僵尸对象（Zombie Objects）**： Xcode 提供了启用僵尸对象的选项，可以帮助检测野指针。启用僵尸对象后，被释放的对象会变成僵尸对象，当对僵尸对象发送消息时，会抛出异常，帮助你找到问题所在。\n\n    启用僵尸对象：\n\n    - 选择你的项目。\n    - 在左侧栏中选择 “Edit Scheme”。\n    - 选择 “Run” 标签，然后选择 “Diagnostics”。\n    - 勾选 “Enable Zombie Objects”。\n\n2. **Address Sanitizer**： Address Sanitizer 是一个运行时工具，可以检测内存错误，包括使用野指针。可以在 Xcode 中启用 Address Sanitizer 进行检测。\n\n    启用 Address Sanitizer：\n\n    - 选择你的项目。\n    - 在左侧栏中选择 “Edit Scheme”。\n    - 选择 “Run” 标签，然后选择 “Diagnostics”。\n    - 勾选 “Address Sanitizer”。","slug":"iOS/OC/002-内存管理/011-空指针、野指针/README","published":1,"updated":"2024-08-06T08:40:37.701Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp949002sdgxrdta9137h","content":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/mjios/archive/2013/04/22/3034788.html\" >【Objective-C】09-空指针和野指针 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<!-- # 什么是空指针、野指针？ -->\n\n<ul>\n<li><p>空指针：</p>\n<p>  1&gt; 没有存储任何内存地址的指针就称为空指针(NULL指针)</p>\n<p>  2&gt; 空指针就是被赋值为0的指针，在没有被具体初始化之前，其值为0。</p>\n  <div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *s1 = NULL;</span><br><span class=\"line\">Student *s2 = nil;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n <span id=\"more\"></span>\n\n<ul>\n<li><p>野指针：</p>\n<p>  “野指针”不是NULL指针，是指向”垃圾”内存（不可用内存）的指针。野指针是非常危险的。向野指针发送消息会导致崩溃。野指针错误形式在Xcode中通常表现为：Thread 1：EXC_BAD_ACCESS，因为你访问了一块已经不属于你的内存。</p>\n</li>\n<li><p>野指针，有指向，而空指针无指向，为NULL</p>\n</li>\n</ul>\n<p><strong>空指针</strong>表示指针不指向任何对象或内存，可以安全地检查和处理。</p>\n<p><strong>野指针</strong>指向已经释放或未分配的内存，使用它们会导致未定义行为，需要小心处理。</p>\n<h1 id=\"野指针如何产生？\"><a href=\"#野指针如何产生？\" class=\"headerlink\" title=\"野指针如何产生？\"></a>野指针如何产生？</h1><blockquote>\n<ol>\n<li><p>指针变量未初始化</p>\n<p> 任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。</p>\n</li>\n<li><p>指针释放后之后未置空</p>\n<p> 有时指针在free或delete后未赋值 NULL，便会使人以为是合法的。别看free和delete的名字（尤其是delete），它们只是把指针所指的内存给释放掉，但并没有把指针本身干掉。此时指针指向的就是“垃圾”内存。释放后的指针应立即将指针置为NULL，防止产生“野指针”。</p>\n</li>\n<li><p>指针操作超越变量作用域</p>\n<p> 不要返回指向栈内存的指针或引用，因为栈内存在函数结束时会被释放。</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>释放对象后没有将指针置为 nil</strong>： 当你手动释放一个对象后，如果没有将指向该对象的指针置为 nil，该指针就变成了野指针。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">[obj release]; // obj 指向的内存被释放了</span><br><span class=\"line\">// obj 现在是野指针</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n<p>示例一：</p>\n<p>assign可以用来修饰OC对象，会造成野指针。 unsafe_unretained声明一个弱引用，但不会自动置为nil，会出现野指针。</p>\n<p>示例二：</p>\n<p>自定义Student类，在main函数中添加下列代码</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *stu = [[Student alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:10];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu release];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:10];</span><br></pre></td></tr></table></figure></div>\n\n<p>运行程序，你会发现<code>[stu setAge:10];</code>报错了，是个野指针错误！</p>\n<p><strong>分析一下报错原因</strong></p>\n<p>1&gt; 执行完第1行代码后，内存中有个指针变量stu，指向了Student对象 <code>Student *stu = [[Student alloc] init];</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/005.png\"\n                      alt=\"img\"\n                ></p>\n<p>假设Student对象的地址为0xff43，指针变量stu的地址为0xee45，stu中存储的是Student对象的地址0xff43。即指针变量stu指向了这个Student对象。</p>\n<p>2&gt; 接下来是第3行代码: <code>[stu setAge:10];</code></p>\n<p>这行代码的意思是：给stu所指向的Student对象发送一条setAge:消息，即调用这个Student对象的setAge:方法。目前来说，这个Student对象仍存在于内存中，所以这句代码没有任何问题。</p>\n<p>3&gt; 接下来是第5行代码: <code>[stu release];</code></p>\n<p>这行代码的意思是：给stu指向的Student对象发送一条release消息。在这里，Student对象接收到release消息后，会马上被销毁，所占用的内存会被回收。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/006.png\"\n                      alt=\"img\"\n                ></p>\n<p>Student对象被销毁了，地址为0xff43的内存就变成了”垃圾内存”，然而，指针变量stu仍然指向这一块内存，这时候，stu就称为了<strong>野指针！</strong></p>\n<p>4&gt; 最后执行了第7行代码: <code>[stu setAge:10];</code></p>\n<p>这句代码的意思仍然是： 给stu所指向的Student对象发送一条setAge:消息。但是在执行完第5行代码后，Student对象已经被销毁了，它所占用的内存已经是垃圾内存，如果你还去访问这一块内存，那就会报野指针错误。这块内存已经不可用了，也不属于你了，你还去访问它，肯定是不合法的。所以，这行代码报错了！</p>\n<p>5&gt; 如果修改下代码： </p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *stu = [[Student alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu release];</span><br><span class=\"line\"></span><br><span class=\"line\">stu = <span class=\"literal\">nil</span>;   <span class=\"comment\">// stu变成了空指针，stu就不再指向任何内存了</span></span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure></div>\n\n<p> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/007.png\"\n                      alt=\"img\"\n                ></p>\n<p>因为stu是个空指针，没有指向任何对象，因此第9行的setAge:消息是发不出去的，不会造成任何影响。当然，肯定也不会报错。</p>\n<h1 id=\"防止野指针的方法\"><a href=\"#防止野指针的方法\" class=\"headerlink\" title=\"防止野指针的方法\"></a>防止野指针的方法</h1><ol>\n<li><p><strong>将指针置为 nil</strong>： 在释放对象后，将指针置为 nil 可以防止野指针。</p>\n <div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">[obj release];</span><br><span class=\"line\">obj = nil; // 防止野指针</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>使用自动引用计数（ARC）</strong>： ARC 自动管理对象的内存，避免手动管理引用计数，从而减少野指针的产生。</p>\n <div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>使用弱引用（weak）</strong>： 使用弱引用（weak）来防止循环引用和野指针。弱引用在引用对象被释放后自动置为 nil。</p>\n <div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h1 id=\"野指针的定位\"><a href=\"#野指针的定位\" class=\"headerlink\" title=\"野指针的定位\"></a>野指针的定位</h1><p><a class=\"link\"   href=\"https://www.jianshu.com/p/8aba0ee41cd7\" >iOS野指针定位总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/a9014c4f379d\" >iOS 通向野指针的必经之路 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"检测和调试野指针\"><a href=\"#检测和调试野指针\" class=\"headerlink\" title=\"检测和调试野指针\"></a>检测和调试野指针</h3><ol>\n<li><p><strong>启用僵尸对象（Zombie Objects）</strong>： Xcode 提供了启用僵尸对象的选项，可以帮助检测野指针。启用僵尸对象后，被释放的对象会变成僵尸对象，当对僵尸对象发送消息时，会抛出异常，帮助你找到问题所在。</p>\n<p> 启用僵尸对象：</p>\n<ul>\n<li>选择你的项目。</li>\n<li>在左侧栏中选择 “Edit Scheme”。</li>\n<li>选择 “Run” 标签，然后选择 “Diagnostics”。</li>\n<li>勾选 “Enable Zombie Objects”。</li>\n</ul>\n</li>\n<li><p><strong>Address Sanitizer</strong>： Address Sanitizer 是一个运行时工具，可以检测内存错误，包括使用野指针。可以在 Xcode 中启用 Address Sanitizer 进行检测。</p>\n<p> 启用 Address Sanitizer：</p>\n<ul>\n<li>选择你的项目。</li>\n<li>在左侧栏中选择 “Edit Scheme”。</li>\n<li>选择 “Run” 标签，然后选择 “Diagnostics”。</li>\n<li>勾选 “Address Sanitizer”。</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/mjios/archive/2013/04/22/3034788.html\" >【Objective-C】09-空指针和野指针 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<!-- # 什么是空指针、野指针？ -->\n\n<ul>\n<li><p>空指针：</p>\n<p>  1&gt; 没有存储任何内存地址的指针就称为空指针(NULL指针)</p>\n<p>  2&gt; 空指针就是被赋值为0的指针，在没有被具体初始化之前，其值为0。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *s1 = NULL;</span><br><span class=\"line\">Student *s2 = nil;</span><br></pre></td></tr></table></figure></li>\n</ul>","more":"<ul>\n<li><p>野指针：</p>\n<p>  “野指针”不是NULL指针，是指向”垃圾”内存（不可用内存）的指针。野指针是非常危险的。向野指针发送消息会导致崩溃。野指针错误形式在Xcode中通常表现为：Thread 1：EXC_BAD_ACCESS，因为你访问了一块已经不属于你的内存。</p>\n</li>\n<li><p>野指针，有指向，而空指针无指向，为NULL</p>\n</li>\n</ul>\n<p><strong>空指针</strong>表示指针不指向任何对象或内存，可以安全地检查和处理。</p>\n<p><strong>野指针</strong>指向已经释放或未分配的内存，使用它们会导致未定义行为，需要小心处理。</p>\n<h1 id=\"野指针如何产生？\"><a href=\"#野指针如何产生？\" class=\"headerlink\" title=\"野指针如何产生？\"></a>野指针如何产生？</h1><blockquote>\n<ol>\n<li><p>指针变量未初始化</p>\n<p> 任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。</p>\n</li>\n<li><p>指针释放后之后未置空</p>\n<p> 有时指针在free或delete后未赋值 NULL，便会使人以为是合法的。别看free和delete的名字（尤其是delete），它们只是把指针所指的内存给释放掉，但并没有把指针本身干掉。此时指针指向的就是“垃圾”内存。释放后的指针应立即将指针置为NULL，防止产生“野指针”。</p>\n</li>\n<li><p>指针操作超越变量作用域</p>\n<p> 不要返回指向栈内存的指针或引用，因为栈内存在函数结束时会被释放。</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>释放对象后没有将指针置为 nil</strong>： 当你手动释放一个对象后，如果没有将指向该对象的指针置为 nil，该指针就变成了野指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">[obj release]; // obj 指向的内存被释放了</span><br><span class=\"line\">// obj 现在是野指针</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>示例一：</p>\n<p>assign可以用来修饰OC对象，会造成野指针。 unsafe_unretained声明一个弱引用，但不会自动置为nil，会出现野指针。</p>\n<p>示例二：</p>\n<p>自定义Student类，在main函数中添加下列代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *stu = [[Student alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:10];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu release];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:10];</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，你会发现<code>[stu setAge:10];</code>报错了，是个野指针错误！</p>\n<p><strong>分析一下报错原因</strong></p>\n<p>1&gt; 执行完第1行代码后，内存中有个指针变量stu，指向了Student对象 <code>Student *stu = [[Student alloc] init];</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/005.png\"\n                      alt=\"img\"\n                ></p>\n<p>假设Student对象的地址为0xff43，指针变量stu的地址为0xee45，stu中存储的是Student对象的地址0xff43。即指针变量stu指向了这个Student对象。</p>\n<p>2&gt; 接下来是第3行代码: <code>[stu setAge:10];</code></p>\n<p>这行代码的意思是：给stu所指向的Student对象发送一条setAge:消息，即调用这个Student对象的setAge:方法。目前来说，这个Student对象仍存在于内存中，所以这句代码没有任何问题。</p>\n<p>3&gt; 接下来是第5行代码: <code>[stu release];</code></p>\n<p>这行代码的意思是：给stu指向的Student对象发送一条release消息。在这里，Student对象接收到release消息后，会马上被销毁，所占用的内存会被回收。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/006.png\"\n                      alt=\"img\"\n                ></p>\n<p>Student对象被销毁了，地址为0xff43的内存就变成了”垃圾内存”，然而，指针变量stu仍然指向这一块内存，这时候，stu就称为了<strong>野指针！</strong></p>\n<p>4&gt; 最后执行了第7行代码: <code>[stu setAge:10];</code></p>\n<p>这句代码的意思仍然是： 给stu所指向的Student对象发送一条setAge:消息。但是在执行完第5行代码后，Student对象已经被销毁了，它所占用的内存已经是垃圾内存，如果你还去访问这一块内存，那就会报野指针错误。这块内存已经不可用了，也不属于你了，你还去访问它，肯定是不合法的。所以，这行代码报错了！</p>\n<p>5&gt; 如果修改下代码： </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student *stu = [[Student alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[stu release];</span><br><span class=\"line\"></span><br><span class=\"line\">stu = <span class=\"literal\">nil</span>;   <span class=\"comment\">// stu变成了空指针，stu就不再指向任何内存了</span></span><br><span class=\"line\"></span><br><span class=\"line\">[stu setAge:<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n\n<p> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/22/iOS/OC/002-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/011-%E7%A9%BA%E6%8C%87%E9%92%88%E3%80%81%E9%87%8E%E6%8C%87%E9%92%88/README/007.png\"\n                      alt=\"img\"\n                ></p>\n<p>因为stu是个空指针，没有指向任何对象，因此第9行的setAge:消息是发不出去的，不会造成任何影响。当然，肯定也不会报错。</p>\n<h1 id=\"防止野指针的方法\"><a href=\"#防止野指针的方法\" class=\"headerlink\" title=\"防止野指针的方法\"></a>防止野指针的方法</h1><ol>\n<li><p><strong>将指针置为 nil</strong>： 在释放对象后，将指针置为 nil 可以防止野指针。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">MyClass *obj = [[MyClass alloc] init];</span><br><span class=\"line\">[obj release];</span><br><span class=\"line\">obj = nil; // 防止野指针</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用自动引用计数（ARC）</strong>： ARC 自动管理对象的内存，避免手动管理引用计数，从而减少野指针的产生。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用弱引用（weak）</strong>： 使用弱引用（weak）来防止循环引用和野指针。弱引用在引用对象被释放后自动置为 nil。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objective</span><br><span class=\"line\">复制代码</span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;Delegate&gt; delegate;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"野指针的定位\"><a href=\"#野指针的定位\" class=\"headerlink\" title=\"野指针的定位\"></a>野指针的定位</h1><p><a class=\"link\"   href=\"https://www.jianshu.com/p/8aba0ee41cd7\" >iOS野指针定位总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/a9014c4f379d\" >iOS 通向野指针的必经之路 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"检测和调试野指针\"><a href=\"#检测和调试野指针\" class=\"headerlink\" title=\"检测和调试野指针\"></a>检测和调试野指针</h3><ol>\n<li><p><strong>启用僵尸对象（Zombie Objects）</strong>： Xcode 提供了启用僵尸对象的选项，可以帮助检测野指针。启用僵尸对象后，被释放的对象会变成僵尸对象，当对僵尸对象发送消息时，会抛出异常，帮助你找到问题所在。</p>\n<p> 启用僵尸对象：</p>\n<ul>\n<li>选择你的项目。</li>\n<li>在左侧栏中选择 “Edit Scheme”。</li>\n<li>选择 “Run” 标签，然后选择 “Diagnostics”。</li>\n<li>勾选 “Enable Zombie Objects”。</li>\n</ul>\n</li>\n<li><p><strong>Address Sanitizer</strong>： Address Sanitizer 是一个运行时工具，可以检测内存错误，包括使用野指针。可以在 Xcode 中启用 Address Sanitizer 进行检测。</p>\n<p> 启用 Address Sanitizer：</p>\n<ul>\n<li>选择你的项目。</li>\n<li>在左侧栏中选择 “Edit Scheme”。</li>\n<li>选择 “Run” 标签，然后选择 “Diagnostics”。</li>\n<li>勾选 “Address Sanitizer”。</li>\n</ul>\n</li>\n</ol>"},{"title":"内存区域","date":"2024-07-30T09:01:08.063Z","_content":"\niOS 中的内存主要分为五大区域：\n\nText Segment（代码段）：存储应用程序的代码，包括可执行代码和只读数据。\nData Segment（数据段）：存储应用程序的初始化数据，包括全局变量和静态变量。\nHeap（堆）：用于动态分配内存，存储应用程序在运行时创建的对象和数据。\nStack（栈）：用于存储函数调用相关的信息，包括函数参数、返回地址和局部变量。\nBSS Segment（未初始化数据段）：存储应用程序的未初始化数据，包括全局变量和静态变量。\n栈和堆是两个主要的内存区域，它们有着不同的特点和用途：\n\n栈（Stack）：\n\n栈是一块连续的内存区域，用于存储函数调用相关的信息。\n栈的内存是自动分配和释放的，不需要手动管理。\n栈上的数据包括函数参数、返回地址、局部变量和函数调用链信息。\n栈的大小是固定的，通常在编译时确定。\n堆（Heap）：\n\n堆是一块动态分配的内存区域，用于存储应用程序在运行时创建的对象和数据。\n堆的内存需要手动管理，使用 malloc、free 等函数来分配和释放内存。\n堆上的数据包括动态创建的对象、数组和结构体等。\n堆的大小可以动态变化，取决于应用程序的需求。\n在 iOS 中，以下数据通常存储在栈上：\n\n函数参数\n局部变量\n函数返回地址\n函数调用链信息\n以下数据通常存储在堆上：\n\n动态创建的对象\n数组和结构体\n字符串和其他动态分配的数据\n需要注意的是，iOS 中的内存管理主要使用 ARC（Automatic Reference Counting）机制，ARC 会自动管理堆上的内存，开发者无需手动释放内存。\n\n\n```c\nint a = 10;   // 全局初始化区\nchar *p;    // 全局未初始化区\n \nmain {\n   int b;   // 栈区\n   char s[] = \"abc\";   // 栈区\n   char *p1;   // 栈区\n   char *p2 = \"123456\";   // 123456 在常量区，p2在栈上\n   static int c = 0;   // 全局(静态)初始化区\n    \n   w1 = (char *)malloc(10);\n   w2 = (char *)malloc(20);   // 分配得来的10和20字节的区域就在堆区。\n}\n```","source":"_posts/iOS/OC/002-内存管理/023-内存区域/README.md","raw":"---\ntitle: 内存区域\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 内存\n---\n\niOS 中的内存主要分为五大区域：\n\nText Segment（代码段）：存储应用程序的代码，包括可执行代码和只读数据。\nData Segment（数据段）：存储应用程序的初始化数据，包括全局变量和静态变量。\nHeap（堆）：用于动态分配内存，存储应用程序在运行时创建的对象和数据。\nStack（栈）：用于存储函数调用相关的信息，包括函数参数、返回地址和局部变量。\nBSS Segment（未初始化数据段）：存储应用程序的未初始化数据，包括全局变量和静态变量。\n栈和堆是两个主要的内存区域，它们有着不同的特点和用途：\n\n栈（Stack）：\n\n栈是一块连续的内存区域，用于存储函数调用相关的信息。\n栈的内存是自动分配和释放的，不需要手动管理。\n栈上的数据包括函数参数、返回地址、局部变量和函数调用链信息。\n栈的大小是固定的，通常在编译时确定。\n堆（Heap）：\n\n堆是一块动态分配的内存区域，用于存储应用程序在运行时创建的对象和数据。\n堆的内存需要手动管理，使用 malloc、free 等函数来分配和释放内存。\n堆上的数据包括动态创建的对象、数组和结构体等。\n堆的大小可以动态变化，取决于应用程序的需求。\n在 iOS 中，以下数据通常存储在栈上：\n\n函数参数\n局部变量\n函数返回地址\n函数调用链信息\n以下数据通常存储在堆上：\n\n动态创建的对象\n数组和结构体\n字符串和其他动态分配的数据\n需要注意的是，iOS 中的内存管理主要使用 ARC（Automatic Reference Counting）机制，ARC 会自动管理堆上的内存，开发者无需手动释放内存。\n\n\n```c\nint a = 10;   // 全局初始化区\nchar *p;    // 全局未初始化区\n \nmain {\n   int b;   // 栈区\n   char s[] = \"abc\";   // 栈区\n   char *p1;   // 栈区\n   char *p2 = \"123456\";   // 123456 在常量区，p2在栈上\n   static int c = 0;   // 全局(静态)初始化区\n    \n   w1 = (char *)malloc(10);\n   w2 = (char *)malloc(20);   // 分配得来的10和20字节的区域就在堆区。\n}\n```","slug":"iOS/OC/002-内存管理/023-内存区域/README","published":1,"updated":"2024-08-06T08:41:46.108Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94a002vdgxr3iqwapsd","content":"<p>iOS 中的内存主要分为五大区域：</p>\n<p>Text Segment（代码段）：存储应用程序的代码，包括可执行代码和只读数据。<br>Data Segment（数据段）：存储应用程序的初始化数据，包括全局变量和静态变量。<br>Heap（堆）：用于动态分配内存，存储应用程序在运行时创建的对象和数据。<br>Stack（栈）：用于存储函数调用相关的信息，包括函数参数、返回地址和局部变量。<br>BSS Segment（未初始化数据段）：存储应用程序的未初始化数据，包括全局变量和静态变量。<br>栈和堆是两个主要的内存区域，它们有着不同的特点和用途：</p>\n<p>栈（Stack）：</p>\n<p>栈是一块连续的内存区域，用于存储函数调用相关的信息。<br>栈的内存是自动分配和释放的，不需要手动管理。<br>栈上的数据包括函数参数、返回地址、局部变量和函数调用链信息。<br>栈的大小是固定的，通常在编译时确定。<br>堆（Heap）：</p>\n<p>堆是一块动态分配的内存区域，用于存储应用程序在运行时创建的对象和数据。<br>堆的内存需要手动管理，使用 malloc、free 等函数来分配和释放内存。<br>堆上的数据包括动态创建的对象、数组和结构体等。<br>堆的大小可以动态变化，取决于应用程序的需求。<br>在 iOS 中，以下数据通常存储在栈上：</p>\n<p>函数参数<br>局部变量<br>函数返回地址<br>函数调用链信息<br>以下数据通常存储在堆上：</p>\n<p>动态创建的对象<br>数组和结构体<br>字符串和其他动态分配的数据<br>需要注意的是，iOS 中的内存管理主要使用 ARC（Automatic Reference Counting）机制，ARC 会自动管理堆上的内存，开发者无需手动释放内存。</p>\n<div class=\"highlight-container\" data-rel=\"C\"><figure class=\"iseeu highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;   <span class=\"comment\">// 全局初始化区</span></span><br><span class=\"line\"><span class=\"type\">char</span> *p;    <span class=\"comment\">// 全局未初始化区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">main &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> b;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> s[] = <span class=\"string\">&quot;abc&quot;</span>;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> *p1;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> *p2 = <span class=\"string\">&quot;123456&quot;</span>;   <span class=\"comment\">// 123456 在常量区，p2在栈上</span></span><br><span class=\"line\">   <span class=\"type\">static</span> <span class=\"type\">int</span> c = <span class=\"number\">0</span>;   <span class=\"comment\">// 全局(静态)初始化区</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   w1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">   w2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">20</span>);   <span class=\"comment\">// 分配得来的10和20字节的区域就在堆区。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<p>iOS 中的内存主要分为五大区域：</p>\n<p>Text Segment（代码段）：存储应用程序的代码，包括可执行代码和只读数据。<br>Data Segment（数据段）：存储应用程序的初始化数据，包括全局变量和静态变量。<br>Heap（堆）：用于动态分配内存，存储应用程序在运行时创建的对象和数据。<br>Stack（栈）：用于存储函数调用相关的信息，包括函数参数、返回地址和局部变量。<br>BSS Segment（未初始化数据段）：存储应用程序的未初始化数据，包括全局变量和静态变量。<br>栈和堆是两个主要的内存区域，它们有着不同的特点和用途：</p>\n<p>栈（Stack）：</p>\n<p>栈是一块连续的内存区域，用于存储函数调用相关的信息。<br>栈的内存是自动分配和释放的，不需要手动管理。<br>栈上的数据包括函数参数、返回地址、局部变量和函数调用链信息。<br>栈的大小是固定的，通常在编译时确定。<br>堆（Heap）：</p>\n<p>堆是一块动态分配的内存区域，用于存储应用程序在运行时创建的对象和数据。<br>堆的内存需要手动管理，使用 malloc、free 等函数来分配和释放内存。<br>堆上的数据包括动态创建的对象、数组和结构体等。<br>堆的大小可以动态变化，取决于应用程序的需求。<br>在 iOS 中，以下数据通常存储在栈上：</p>\n<p>函数参数<br>局部变量<br>函数返回地址<br>函数调用链信息<br>以下数据通常存储在堆上：</p>\n<p>动态创建的对象<br>数组和结构体<br>字符串和其他动态分配的数据<br>需要注意的是，iOS 中的内存管理主要使用 ARC（Automatic Reference Counting）机制，ARC 会自动管理堆上的内存，开发者无需手动释放内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;   <span class=\"comment\">// 全局初始化区</span></span><br><span class=\"line\"><span class=\"type\">char</span> *p;    <span class=\"comment\">// 全局未初始化区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">main &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> b;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> s[] = <span class=\"string\">&quot;abc&quot;</span>;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> *p1;   <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">   <span class=\"type\">char</span> *p2 = <span class=\"string\">&quot;123456&quot;</span>;   <span class=\"comment\">// 123456 在常量区，p2在栈上</span></span><br><span class=\"line\">   <span class=\"type\">static</span> <span class=\"type\">int</span> c = <span class=\"number\">0</span>;   <span class=\"comment\">// 全局(静态)初始化区</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   w1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">   w2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">20</span>);   <span class=\"comment\">// 分配得来的10和20字节的区域就在堆区。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"反射是什么？","date":"2024-07-30T02:17:18.213Z","_content":"\n在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。\n\n<!-- more -->\n\n获取Class的三种方法\n\n```\n// 通过字符串获取class  \nClass class = NSClassFromString(@\"NSString\");  \nNSLog(@\"class type : %@\", class);  \n\n\n// 直接用class 来创建对象 ,通过对象来获取class \nid str = [[class alloc] init];   \nNSLog(@\"%@\", [str class]);  \n\n\n// 通过类来获取class  \nNSLog(@\"%d\", class==NSString.class);   \n```\n\n\n常用判断方法\n\n```\n// 当前对象是否这个类或其子类的实例\n- (BOOL)isKindOfClass:(Class)aClass;\n\n// 当前对象是否是这个类的实例\n- (BOOL)isMemberOfClass:(Class)aClass;\n\n// 当前对象是否遵守这个协议\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n// 当前对象是否实现这个方法\n- (BOOL)respondsToSelector:(SEL)aSelector;\n```\n\n\n# GPT \n\n在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。\n\n### 反射的常见用途\n\n1. **动态类型检查**：在运行时检查对象的类型。\n2. **动态方法调用**：在运行时调用对象的方法。\n3. **动态属性访问**：在运行时访问对象的属性。\n4. **序列化和反序列化**：将对象转换为可传输格式（如JSON），或将传输格式转换回对象。\n\n### Objective-C中的反射\n\nObjective-C由于其动态特性，支持广泛的反射操作。常用的反射相关方法和类包括：\n\n- `NSObject`类的方法：\n  - `class`\n  - `superclass`\n  - `isKindOfClass:`\n  - `isMemberOfClass:`\n  - `respondsToSelector:`\n  - `performSelector:`\n  - `conformsToProtocol:`\n- `NSClassFromString`\n- `NSStringFromClass`\n- `NSSelectorFromString`\n- `NSStringFromSelector`\n\n#### 示例：动态类型检查和方法调用\n\n```objective-c\n#import <Foundation/Foundation.h>\n\n@interface MyClass : NSObject\n- (void)sayHello;\n@end\n\n@implementation MyClass\n- (void)sayHello {\n    NSLog(@\"Hello, World!\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // 动态创建类实例\n        Class myClass = NSClassFromString(@\"MyClass\");\n        id myObject = [[myClass alloc] init];\n        \n        // 动态检查类型\n        if ([myObject isKindOfClass:myClass]) {\n            NSLog(@\"myObject is kind of MyClass\");\n        }\n        \n        // 动态调用方法\n        SEL selector = NSSelectorFromString(@\"sayHello\");\n        if ([myObject respondsToSelector:selector]) {\n            [myObject performSelector:selector];\n        }\n    }\n    return 0;\n}\n```\n\n**输出：**\n\n```\nmyObject is kind of MyClass\nHello, World!\n```\n\n在这个示例中，`NSClassFromString`用于动态获取类，`NSSelectorFromString`用于动态获取方法选择器，`performSelector:`用于动态调用方法。\n\n### Swift中的反射\n\nSwift也支持反射，但由于其更强的类型安全和编译时检查，Swift的反射功能比Objective-C有限。Swift提供了`Mirror`类型来进行反射操作。\n\n#### 示例：使用`Mirror`进行反射\n\n```swift\nimport Foundation\n\nclass MyClass {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    func sayHello() {\n        print(\"Hello, World!\")\n    }\n}\n\nlet myObject = MyClass(name: \"John\", age: 30)\n\n// 使用Mirror进行反射\nlet mirror = Mirror(reflecting: myObject)\nfor child in mirror.children {\n    if let label = child.label {\n        print(\"\\(label): \\(child.value)\")\n    }\n}\n```\n\n**输出：**\n\n```\nname: John\nage: 30\n```\n\n在这个示例中，`Mirror`用于反射`myObject`的属性和值。需要注意的是，Swift的反射功能更注重属性的获取，而不是动态方法调用。\n\n### 总结\n\n反射在iOS开发中提供了强大的动态能力，允许在运行时检查和操作对象的类型、属性和方法。Objective-C提供了广泛的反射功能，而Swift也提供了基本的反射能力，主要用于属性的获取和操作。在实际开发中，合理使用反射可以提高代码的灵活性和适应性，但过度使用反射可能会影响性能和代码的可维护性。\n\n","source":"_posts/iOS/OC/003-OC方法/015-反射是什么？/README.md","raw":"---\ntitle: 反射是什么？\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 反射\n---\n\n在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。\n\n<!-- more -->\n\n获取Class的三种方法\n\n```\n// 通过字符串获取class  \nClass class = NSClassFromString(@\"NSString\");  \nNSLog(@\"class type : %@\", class);  \n\n\n// 直接用class 来创建对象 ,通过对象来获取class \nid str = [[class alloc] init];   \nNSLog(@\"%@\", [str class]);  \n\n\n// 通过类来获取class  \nNSLog(@\"%d\", class==NSString.class);   \n```\n\n\n常用判断方法\n\n```\n// 当前对象是否这个类或其子类的实例\n- (BOOL)isKindOfClass:(Class)aClass;\n\n// 当前对象是否是这个类的实例\n- (BOOL)isMemberOfClass:(Class)aClass;\n\n// 当前对象是否遵守这个协议\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n// 当前对象是否实现这个方法\n- (BOOL)respondsToSelector:(SEL)aSelector;\n```\n\n\n# GPT \n\n在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。\n\n### 反射的常见用途\n\n1. **动态类型检查**：在运行时检查对象的类型。\n2. **动态方法调用**：在运行时调用对象的方法。\n3. **动态属性访问**：在运行时访问对象的属性。\n4. **序列化和反序列化**：将对象转换为可传输格式（如JSON），或将传输格式转换回对象。\n\n### Objective-C中的反射\n\nObjective-C由于其动态特性，支持广泛的反射操作。常用的反射相关方法和类包括：\n\n- `NSObject`类的方法：\n  - `class`\n  - `superclass`\n  - `isKindOfClass:`\n  - `isMemberOfClass:`\n  - `respondsToSelector:`\n  - `performSelector:`\n  - `conformsToProtocol:`\n- `NSClassFromString`\n- `NSStringFromClass`\n- `NSSelectorFromString`\n- `NSStringFromSelector`\n\n#### 示例：动态类型检查和方法调用\n\n```objective-c\n#import <Foundation/Foundation.h>\n\n@interface MyClass : NSObject\n- (void)sayHello;\n@end\n\n@implementation MyClass\n- (void)sayHello {\n    NSLog(@\"Hello, World!\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // 动态创建类实例\n        Class myClass = NSClassFromString(@\"MyClass\");\n        id myObject = [[myClass alloc] init];\n        \n        // 动态检查类型\n        if ([myObject isKindOfClass:myClass]) {\n            NSLog(@\"myObject is kind of MyClass\");\n        }\n        \n        // 动态调用方法\n        SEL selector = NSSelectorFromString(@\"sayHello\");\n        if ([myObject respondsToSelector:selector]) {\n            [myObject performSelector:selector];\n        }\n    }\n    return 0;\n}\n```\n\n**输出：**\n\n```\nmyObject is kind of MyClass\nHello, World!\n```\n\n在这个示例中，`NSClassFromString`用于动态获取类，`NSSelectorFromString`用于动态获取方法选择器，`performSelector:`用于动态调用方法。\n\n### Swift中的反射\n\nSwift也支持反射，但由于其更强的类型安全和编译时检查，Swift的反射功能比Objective-C有限。Swift提供了`Mirror`类型来进行反射操作。\n\n#### 示例：使用`Mirror`进行反射\n\n```swift\nimport Foundation\n\nclass MyClass {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    func sayHello() {\n        print(\"Hello, World!\")\n    }\n}\n\nlet myObject = MyClass(name: \"John\", age: 30)\n\n// 使用Mirror进行反射\nlet mirror = Mirror(reflecting: myObject)\nfor child in mirror.children {\n    if let label = child.label {\n        print(\"\\(label): \\(child.value)\")\n    }\n}\n```\n\n**输出：**\n\n```\nname: John\nage: 30\n```\n\n在这个示例中，`Mirror`用于反射`myObject`的属性和值。需要注意的是，Swift的反射功能更注重属性的获取，而不是动态方法调用。\n\n### 总结\n\n反射在iOS开发中提供了强大的动态能力，允许在运行时检查和操作对象的类型、属性和方法。Objective-C提供了广泛的反射功能，而Swift也提供了基本的反射能力，主要用于属性的获取和操作。在实际开发中，合理使用反射可以提高代码的灵活性和适应性，但过度使用反射可能会影响性能和代码的可维护性。\n\n","slug":"iOS/OC/003-OC方法/015-反射是什么？/README","published":1,"updated":"2024-08-06T08:41:02.031Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94b002xdgxret8r11io","content":"<p>在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。</p>\n<span id=\"more\"></span>\n\n<p>获取Class的三种方法</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过字符串获取class  </span><br><span class=\"line\">Class class = NSClassFromString(@&quot;NSString&quot;);  </span><br><span class=\"line\">NSLog(@&quot;class type : %@&quot;, class);  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 直接用class 来创建对象 ,通过对象来获取class </span><br><span class=\"line\">id str = [[class alloc] init];   </span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [str class]);  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 通过类来获取class  </span><br><span class=\"line\">NSLog(@&quot;%d&quot;, class==NSString.class);   </span><br></pre></td></tr></table></figure></div>\n\n\n<p>常用判断方法</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前对象是否这个类或其子类的实例</span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否是这个类的实例</span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否遵守这个协议</span><br><span class=\"line\">- (BOOL)conformsToProtocol:(Protocol *)aProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否实现这个方法</span><br><span class=\"line\">- (BOOL)respondsToSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。</p>\n<h3 id=\"反射的常见用途\"><a href=\"#反射的常见用途\" class=\"headerlink\" title=\"反射的常见用途\"></a>反射的常见用途</h3><ol>\n<li><strong>动态类型检查</strong>：在运行时检查对象的类型。</li>\n<li><strong>动态方法调用</strong>：在运行时调用对象的方法。</li>\n<li><strong>动态属性访问</strong>：在运行时访问对象的属性。</li>\n<li><strong>序列化和反序列化</strong>：将对象转换为可传输格式（如JSON），或将传输格式转换回对象。</li>\n</ol>\n<h3 id=\"Objective-C中的反射\"><a href=\"#Objective-C中的反射\" class=\"headerlink\" title=\"Objective-C中的反射\"></a>Objective-C中的反射</h3><p>Objective-C由于其动态特性，支持广泛的反射操作。常用的反射相关方法和类包括：</p>\n<ul>\n<li><code>NSObject</code>类的方法：<ul>\n<li><code>class</code></li>\n<li><code>superclass</code></li>\n<li><code>isKindOfClass:</code></li>\n<li><code>isMemberOfClass:</code></li>\n<li><code>respondsToSelector:</code></li>\n<li><code>performSelector:</code></li>\n<li><code>conformsToProtocol:</code></li>\n</ul>\n</li>\n<li><code>NSClassFromString</code></li>\n<li><code>NSStringFromClass</code></li>\n<li><code>NSSelectorFromString</code></li>\n<li><code>NSStringFromSelector</code></li>\n</ul>\n<h4 id=\"示例：动态类型检查和方法调用\"><a href=\"#示例：动态类型检查和方法调用\" class=\"headerlink\" title=\"示例：动态类型检查和方法调用\"></a>示例：动态类型检查和方法调用</h4><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">- (void)sayHello;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">- (void)sayHello &#123;</span><br><span class=\"line\">    NSLog(@&quot;Hello, World!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        // 动态创建类实例</span><br><span class=\"line\">        Class myClass = NSClassFromString(@&quot;MyClass&quot;);</span><br><span class=\"line\">        id myObject = [[myClass alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 动态检查类型</span><br><span class=\"line\">        if ([myObject isKindOfClass:myClass]) &#123;</span><br><span class=\"line\">            NSLog(@&quot;myObject is kind of MyClass&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 动态调用方法</span><br><span class=\"line\">        SEL selector = NSSelectorFromString(@&quot;sayHello&quot;);</span><br><span class=\"line\">        if ([myObject respondsToSelector:selector]) &#123;</span><br><span class=\"line\">            [myObject performSelector:selector];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>输出：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject is kind of MyClass</span><br><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，<code>NSClassFromString</code>用于动态获取类，<code>NSSelectorFromString</code>用于动态获取方法选择器，<code>performSelector:</code>用于动态调用方法。</p>\n<h3 id=\"Swift中的反射\"><a href=\"#Swift中的反射\" class=\"headerlink\" title=\"Swift中的反射\"></a>Swift中的反射</h3><p>Swift也支持反射，但由于其更强的类型安全和编译时检查，Swift的反射功能比Objective-C有限。Swift提供了<code>Mirror</code>类型来进行反射操作。</p>\n<h4 id=\"示例：使用Mirror进行反射\"><a href=\"#示例：使用Mirror进行反射\" class=\"headerlink\" title=\"示例：使用Mirror进行反射\"></a>示例：使用<code>Mirror</code>进行反射</h4><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObject <span class=\"operator\">=</span> <span class=\"type\">MyClass</span>(name: <span class=\"string\">&quot;John&quot;</span>, age: <span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Mirror进行反射</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mirror <span class=\"operator\">=</span> <span class=\"type\">Mirror</span>(reflecting: myObject)</span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> mirror.children &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> label <span class=\"operator\">=</span> child.label &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(label)</span>: <span class=\"subst\">\\(child.value)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>输出：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: John</span><br><span class=\"line\">age: 30</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，<code>Mirror</code>用于反射<code>myObject</code>的属性和值。需要注意的是，Swift的反射功能更注重属性的获取，而不是动态方法调用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>反射在iOS开发中提供了强大的动态能力，允许在运行时检查和操作对象的类型、属性和方法。Objective-C提供了广泛的反射功能，而Swift也提供了基本的反射能力，主要用于属性的获取和操作。在实际开发中，合理使用反射可以提高代码的灵活性和适应性，但过度使用反射可能会影响性能和代码的可维护性。</p>\n","excerpt":"<p>在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。</p>","more":"<p>获取Class的三种方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过字符串获取class  </span><br><span class=\"line\">Class class = NSClassFromString(@&quot;NSString&quot;);  </span><br><span class=\"line\">NSLog(@&quot;class type : %@&quot;, class);  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 直接用class 来创建对象 ,通过对象来获取class </span><br><span class=\"line\">id str = [[class alloc] init];   </span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [str class]);  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 通过类来获取class  </span><br><span class=\"line\">NSLog(@&quot;%d&quot;, class==NSString.class);   </span><br></pre></td></tr></table></figure>\n\n\n<p>常用判断方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前对象是否这个类或其子类的实例</span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否是这个类的实例</span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否遵守这个协议</span><br><span class=\"line\">- (BOOL)conformsToProtocol:(Protocol *)aProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前对象是否实现这个方法</span><br><span class=\"line\">- (BOOL)respondsToSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在iOS开发中，反射（Reflection）是指在运行时动态检查和操作对象、类型、属性和方法的能力。通过反射，你可以在代码中动态地获取类型信息、调用方法、访问属性等，而无需在编译时知道这些信息。</p>\n<h3 id=\"反射的常见用途\"><a href=\"#反射的常见用途\" class=\"headerlink\" title=\"反射的常见用途\"></a>反射的常见用途</h3><ol>\n<li><strong>动态类型检查</strong>：在运行时检查对象的类型。</li>\n<li><strong>动态方法调用</strong>：在运行时调用对象的方法。</li>\n<li><strong>动态属性访问</strong>：在运行时访问对象的属性。</li>\n<li><strong>序列化和反序列化</strong>：将对象转换为可传输格式（如JSON），或将传输格式转换回对象。</li>\n</ol>\n<h3 id=\"Objective-C中的反射\"><a href=\"#Objective-C中的反射\" class=\"headerlink\" title=\"Objective-C中的反射\"></a>Objective-C中的反射</h3><p>Objective-C由于其动态特性，支持广泛的反射操作。常用的反射相关方法和类包括：</p>\n<ul>\n<li><code>NSObject</code>类的方法：<ul>\n<li><code>class</code></li>\n<li><code>superclass</code></li>\n<li><code>isKindOfClass:</code></li>\n<li><code>isMemberOfClass:</code></li>\n<li><code>respondsToSelector:</code></li>\n<li><code>performSelector:</code></li>\n<li><code>conformsToProtocol:</code></li>\n</ul>\n</li>\n<li><code>NSClassFromString</code></li>\n<li><code>NSStringFromClass</code></li>\n<li><code>NSSelectorFromString</code></li>\n<li><code>NSStringFromSelector</code></li>\n</ul>\n<h4 id=\"示例：动态类型检查和方法调用\"><a href=\"#示例：动态类型检查和方法调用\" class=\"headerlink\" title=\"示例：动态类型检查和方法调用\"></a>示例：动态类型检查和方法调用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">- (void)sayHello;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MyClass</span><br><span class=\"line\">- (void)sayHello &#123;</span><br><span class=\"line\">    NSLog(@&quot;Hello, World!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        // 动态创建类实例</span><br><span class=\"line\">        Class myClass = NSClassFromString(@&quot;MyClass&quot;);</span><br><span class=\"line\">        id myObject = [[myClass alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 动态检查类型</span><br><span class=\"line\">        if ([myObject isKindOfClass:myClass]) &#123;</span><br><span class=\"line\">            NSLog(@&quot;myObject is kind of MyClass&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 动态调用方法</span><br><span class=\"line\">        SEL selector = NSSelectorFromString(@&quot;sayHello&quot;);</span><br><span class=\"line\">        if ([myObject respondsToSelector:selector]) &#123;</span><br><span class=\"line\">            [myObject performSelector:selector];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject is kind of MyClass</span><br><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>NSClassFromString</code>用于动态获取类，<code>NSSelectorFromString</code>用于动态获取方法选择器，<code>performSelector:</code>用于动态调用方法。</p>\n<h3 id=\"Swift中的反射\"><a href=\"#Swift中的反射\" class=\"headerlink\" title=\"Swift中的反射\"></a>Swift中的反射</h3><p>Swift也支持反射，但由于其更强的类型安全和编译时检查，Swift的反射功能比Objective-C有限。Swift提供了<code>Mirror</code>类型来进行反射操作。</p>\n<h4 id=\"示例：使用Mirror进行反射\"><a href=\"#示例：使用Mirror进行反射\" class=\"headerlink\" title=\"示例：使用Mirror进行反射\"></a>示例：使用<code>Mirror</code>进行反射</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObject <span class=\"operator\">=</span> <span class=\"type\">MyClass</span>(name: <span class=\"string\">&quot;John&quot;</span>, age: <span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Mirror进行反射</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mirror <span class=\"operator\">=</span> <span class=\"type\">Mirror</span>(reflecting: myObject)</span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> mirror.children &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> label <span class=\"operator\">=</span> child.label &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(label)</span>: <span class=\"subst\">\\(child.value)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: John</span><br><span class=\"line\">age: 30</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>Mirror</code>用于反射<code>myObject</code>的属性和值。需要注意的是，Swift的反射功能更注重属性的获取，而不是动态方法调用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>反射在iOS开发中提供了强大的动态能力，允许在运行时检查和操作对象的类型、属性和方法。Objective-C提供了广泛的反射功能，而Swift也提供了基本的反射能力，主要用于属性的获取和操作。在实际开发中，合理使用反射可以提高代码的灵活性和适应性，但过度使用反射可能会影响性能和代码的可维护性。</p>"},{"title":"iOS中UIView与CALayer","date":"2024-08-09T01:15:15.232Z","_content":"\n# 参考\n\n[UIView与CALayer的关系](https://coderlawrence.github.io/2020/03/04/UIView%E4%B8%8ECALayer%E7%9A%84%E5%85%B3%E7%B3%BB/)\n\n\n# 正文\n\n## UIView继承关系 \n\n首先我们要理解UIView以及它的一个继承关系等\n\nUIView表示屏幕上的一块矩形区域，它是基本上iOS所有可视化控件的父类，UIView可以管理矩形区域里的内容，处理矩形区域的事件，包括对子视图的管理以及动画的实现。\n\n![](001.png)\n\n上面的图是UIKit相关类的继承关系，从上面可以看出，UIView继承自UIResponder，所以UIView可以做事件响应，它也是iOS中所有视图（控件）直接或者间接的父类。\n\n## UIResponder介绍\n\n在UIKit中UIResponder作为响应事件的对象，来响应系统传递过来的事件并进行处理。在UIResponder中定义了处理各种事件传递的接口。\nUIApplication、UIViewController、UIView、和所有从UIView派生出来的UIKit类（包括UIWindow）都直接或间接地继承自UIResponder类。\n而CALayer直接继承NSObject，并没有相应的处理事件的接口。\n\n\n## UIView与CALayer的区别\n\n1. UIView能够响应事件，CALayer不可以\n2. UIView是CALayer的delegate，当CALayer属性改变、动画产生时，UIView能够得到通知；\n3. UIView只是处理事件，CALayer主要负责图层的绘制\n4. UIView 和 CALayer 不是线程安全的，并且只能在主线程创建、访问和销毁。\n5. 每个UIView内部都有一个CALayer在背后提供内容绘制和显示，而且UIView的尺寸样式都由内部的Layer所提供。两者都有树状层级结构，layer内部有SubLayers，View内部有SubViews。但是Layer比View多了AnchorPoint\n6. 一个Layer的frame是由它anchorPoint,position,bounds,和 transform 共同决定的，而一个View的frame只是简单的返回Layer的frame\n7. 在iOS做动画的时候，修改非RootLayer的属性（譬如位置、背景色等）会默认产生隐式动画，而修改UIView则不会\n\n8. 常用：向UIView的layer上添加子layer，来使目标View上敷上一层黑色的透明薄膜。\n```objc\nCALayer *grayCover = [[CALayer alloc] init];\ngrayCover.backgroudColor = [[UIColor blackColor]colorWithAlphaComponent:0.3].CGColor;\n[self.layer addSubLayer: grayCover];\n```","source":"_posts/iOS/OC/003-OC方法/001-UIView与CALayer/index.md","raw":"---\ntitle: iOS中UIView与CALayer\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- CALayer\n- UIView\n---\n\n# 参考\n\n[UIView与CALayer的关系](https://coderlawrence.github.io/2020/03/04/UIView%E4%B8%8ECALayer%E7%9A%84%E5%85%B3%E7%B3%BB/)\n\n\n# 正文\n\n## UIView继承关系 \n\n首先我们要理解UIView以及它的一个继承关系等\n\nUIView表示屏幕上的一块矩形区域，它是基本上iOS所有可视化控件的父类，UIView可以管理矩形区域里的内容，处理矩形区域的事件，包括对子视图的管理以及动画的实现。\n\n![](001.png)\n\n上面的图是UIKit相关类的继承关系，从上面可以看出，UIView继承自UIResponder，所以UIView可以做事件响应，它也是iOS中所有视图（控件）直接或者间接的父类。\n\n## UIResponder介绍\n\n在UIKit中UIResponder作为响应事件的对象，来响应系统传递过来的事件并进行处理。在UIResponder中定义了处理各种事件传递的接口。\nUIApplication、UIViewController、UIView、和所有从UIView派生出来的UIKit类（包括UIWindow）都直接或间接地继承自UIResponder类。\n而CALayer直接继承NSObject，并没有相应的处理事件的接口。\n\n\n## UIView与CALayer的区别\n\n1. UIView能够响应事件，CALayer不可以\n2. UIView是CALayer的delegate，当CALayer属性改变、动画产生时，UIView能够得到通知；\n3. UIView只是处理事件，CALayer主要负责图层的绘制\n4. UIView 和 CALayer 不是线程安全的，并且只能在主线程创建、访问和销毁。\n5. 每个UIView内部都有一个CALayer在背后提供内容绘制和显示，而且UIView的尺寸样式都由内部的Layer所提供。两者都有树状层级结构，layer内部有SubLayers，View内部有SubViews。但是Layer比View多了AnchorPoint\n6. 一个Layer的frame是由它anchorPoint,position,bounds,和 transform 共同决定的，而一个View的frame只是简单的返回Layer的frame\n7. 在iOS做动画的时候，修改非RootLayer的属性（譬如位置、背景色等）会默认产生隐式动画，而修改UIView则不会\n\n8. 常用：向UIView的layer上添加子layer，来使目标View上敷上一层黑色的透明薄膜。\n```objc\nCALayer *grayCover = [[CALayer alloc] init];\ngrayCover.backgroudColor = [[UIColor blackColor]colorWithAlphaComponent:0.3].CGColor;\n[self.layer addSubLayer: grayCover];\n```","slug":"iOS/OC/003-OC方法/001-UIView与CALayer/index","published":1,"updated":"2024-08-09T02:14:21.044Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94b002zdgxre55eeiem","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a class=\"link\"   href=\"https://coderlawrence.github.io/2020/03/04/UIView%E4%B8%8ECALayer%E7%9A%84%E5%85%B3%E7%B3%BB/\" >UIView与CALayer的关系 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"UIView继承关系\"><a href=\"#UIView继承关系\" class=\"headerlink\" title=\"UIView继承关系\"></a>UIView继承关系</h2><p>首先我们要理解UIView以及它的一个继承关系等</p>\n<p>UIView表示屏幕上的一块矩形区域，它是基本上iOS所有可视化控件的父类，UIView可以管理矩形区域里的内容，处理矩形区域的事件，包括对子视图的管理以及动画的实现。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/09/iOS/OC/003-OC%E6%96%B9%E6%B3%95/001-UIView%E4%B8%8ECALayer/index/001.png\"\n                     \n                ></p>\n<p>上面的图是UIKit相关类的继承关系，从上面可以看出，UIView继承自UIResponder，所以UIView可以做事件响应，它也是iOS中所有视图（控件）直接或者间接的父类。</p>\n<h2 id=\"UIResponder介绍\"><a href=\"#UIResponder介绍\" class=\"headerlink\" title=\"UIResponder介绍\"></a>UIResponder介绍</h2><p>在UIKit中UIResponder作为响应事件的对象，来响应系统传递过来的事件并进行处理。在UIResponder中定义了处理各种事件传递的接口。<br>UIApplication、UIViewController、UIView、和所有从UIView派生出来的UIKit类（包括UIWindow）都直接或间接地继承自UIResponder类。<br>而CALayer直接继承NSObject，并没有相应的处理事件的接口。</p>\n<h2 id=\"UIView与CALayer的区别\"><a href=\"#UIView与CALayer的区别\" class=\"headerlink\" title=\"UIView与CALayer的区别\"></a>UIView与CALayer的区别</h2><ol>\n<li><p>UIView能够响应事件，CALayer不可以</p>\n</li>\n<li><p>UIView是CALayer的delegate，当CALayer属性改变、动画产生时，UIView能够得到通知；</p>\n</li>\n<li><p>UIView只是处理事件，CALayer主要负责图层的绘制</p>\n</li>\n<li><p>UIView 和 CALayer 不是线程安全的，并且只能在主线程创建、访问和销毁。</p>\n</li>\n<li><p>每个UIView内部都有一个CALayer在背后提供内容绘制和显示，而且UIView的尺寸样式都由内部的Layer所提供。两者都有树状层级结构，layer内部有SubLayers，View内部有SubViews。但是Layer比View多了AnchorPoint</p>\n</li>\n<li><p>一个Layer的frame是由它anchorPoint,position,bounds,和 transform 共同决定的，而一个View的frame只是简单的返回Layer的frame</p>\n</li>\n<li><p>在iOS做动画的时候，修改非RootLayer的属性（譬如位置、背景色等）会默认产生隐式动画，而修改UIView则不会</p>\n</li>\n<li><p>常用：向UIView的layer上添加子layer，来使目标View上敷上一层黑色的透明薄膜。</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CALayer</span> *grayCover = [[<span class=\"built_in\">CALayer</span> alloc] init];</span><br><span class=\"line\">grayCover.backgroudColor = [[<span class=\"built_in\">UIColor</span> blackColor]colorWithAlphaComponent:<span class=\"number\">0.3</span>].CGColor;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.layer addSubLayer: grayCover];</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a class=\"link\"   href=\"https://coderlawrence.github.io/2020/03/04/UIView%E4%B8%8ECALayer%E7%9A%84%E5%85%B3%E7%B3%BB/\" >UIView与CALayer的关系 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"UIView继承关系\"><a href=\"#UIView继承关系\" class=\"headerlink\" title=\"UIView继承关系\"></a>UIView继承关系</h2><p>首先我们要理解UIView以及它的一个继承关系等</p>\n<p>UIView表示屏幕上的一块矩形区域，它是基本上iOS所有可视化控件的父类，UIView可以管理矩形区域里的内容，处理矩形区域的事件，包括对子视图的管理以及动画的实现。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/09/iOS/OC/003-OC%E6%96%B9%E6%B3%95/001-UIView%E4%B8%8ECALayer/index/001.png\"\n                     \n                ></p>\n<p>上面的图是UIKit相关类的继承关系，从上面可以看出，UIView继承自UIResponder，所以UIView可以做事件响应，它也是iOS中所有视图（控件）直接或者间接的父类。</p>\n<h2 id=\"UIResponder介绍\"><a href=\"#UIResponder介绍\" class=\"headerlink\" title=\"UIResponder介绍\"></a>UIResponder介绍</h2><p>在UIKit中UIResponder作为响应事件的对象，来响应系统传递过来的事件并进行处理。在UIResponder中定义了处理各种事件传递的接口。<br>UIApplication、UIViewController、UIView、和所有从UIView派生出来的UIKit类（包括UIWindow）都直接或间接地继承自UIResponder类。<br>而CALayer直接继承NSObject，并没有相应的处理事件的接口。</p>\n<h2 id=\"UIView与CALayer的区别\"><a href=\"#UIView与CALayer的区别\" class=\"headerlink\" title=\"UIView与CALayer的区别\"></a>UIView与CALayer的区别</h2><ol>\n<li><p>UIView能够响应事件，CALayer不可以</p>\n</li>\n<li><p>UIView是CALayer的delegate，当CALayer属性改变、动画产生时，UIView能够得到通知；</p>\n</li>\n<li><p>UIView只是处理事件，CALayer主要负责图层的绘制</p>\n</li>\n<li><p>UIView 和 CALayer 不是线程安全的，并且只能在主线程创建、访问和销毁。</p>\n</li>\n<li><p>每个UIView内部都有一个CALayer在背后提供内容绘制和显示，而且UIView的尺寸样式都由内部的Layer所提供。两者都有树状层级结构，layer内部有SubLayers，View内部有SubViews。但是Layer比View多了AnchorPoint</p>\n</li>\n<li><p>一个Layer的frame是由它anchorPoint,position,bounds,和 transform 共同决定的，而一个View的frame只是简单的返回Layer的frame</p>\n</li>\n<li><p>在iOS做动画的时候，修改非RootLayer的属性（譬如位置、背景色等）会默认产生隐式动画，而修改UIView则不会</p>\n</li>\n<li><p>常用：向UIView的layer上添加子layer，来使目标View上敷上一层黑色的透明薄膜。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CALayer</span> *grayCover = [[<span class=\"built_in\">CALayer</span> alloc] init];</span><br><span class=\"line\">grayCover.backgroudColor = [[<span class=\"built_in\">UIColor</span> blackColor]colorWithAlphaComponent:<span class=\"number\">0.3</span>].CGColor;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.layer addSubLayer: grayCover];</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"frame 和 bounds","date":"2024-07-30T02:42:59.637Z","_content":"\n[frame和bounds的区别](https://www.jianshu.com/p/964313cfbdaa)\n\n* frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）\n* bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）\n\n<!-- more -->\n\n# frame和bounds简介\n\n![](001.webp)\n\n* frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）\n* bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）。\n\n其实本地坐标系统的关键就是要知道的它的原点（0，0）在父坐标系统中的什么位置（这个位置是相对于父view的本地坐标系统而言的，最终的父view就是UIWindow，它的本地坐标系统原点就是屏幕的左上角了）。\n\n通过修改view的bounds属性可以修改本地坐标系统的原点位置。\n\n# 代码\n\n```\nUIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(100, 100, 200, 200)];\nview1.backgroundColor = [UIColor redColor];\n[self.view addSubview:view1];//添加到self.view\nNSLog(@\"view1 frame:%@========view1 bounds:%@\",NSStringFromCGRect(view1.frame),NSStringFromCGRect(view1.bounds));\n\nUIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];\nview2.backgroundColor = [UIColor yellowColor];\n[view1 addSubview:view2];//添加到view1上,[此时view1坐标系左上角起点为(-20,-20)]\nNSLog(@\"view2 frame:%@========view2 bounds:%@\",NSStringFromCGRect(view2.frame),NSStringFromCGRect(view2.bounds));\n```\n\n![](002.webp)\n\n输出\n```\nview1 frame:{{100, 100}, {200, 200}}========view1 bounds:{{0, 0}, {200, 200}}\nview2 frame:{{0, 0}, {100, 100}}========view2 bounds:{{0, 0}, {100, 100}}\n```\n\n下面我们来改变view1的bounds，代码如下\n\n```\n[view1 setBounds:CGRectMake(-20, -20, 200, 200)];\n```\n\n![](003.webp)\n\n```\nview1 frame:{{100, 100}, {200, 200}}========view1 bounds:{{-20, -20}, {200, 200}}\nview2 frame:{{0, 0}, {100, 100}}========view2 bounds:{{0, 0}, {100, 100}}\n```\n\n\n# bouns大于frame的情况\n\n假设设置了控件的bounds大于frame，那么此时会导致frame被撑大，frame的x,y,width,height都会改变。\n\n![](004.webp)\n\n\n\n# 问：frame 和 bounds 分别是用来做什么的？\n\n* frame是参考父view的坐标系来设置自己左上角的位置。\n\n* 设置bounds可以修改自己坐标系的原点位置，进而影响到其“子view”的显示位置。\n\n* bounds使用场景：\n\n    其实bounds我们一直在使用，就是我们使用scrollview的时候。\n\n    为什么我们滚动scrollview可以看到超出显示屏的内容。就是因为scrollview在不断改变自己的bounds，从而改变scrollview上的子view的frame，让他们的frame始终在最顶级view（window）的frame内部，这样我们就可以始终看到内容了。\n\n\n# 问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明\n\n[iOS日常开发之frame和bounds的不同](https://blog.csdn.net/lihao_ios/article/details/107540979)\n\n[2016年3月 iOS 面试总结](https://halfrost.com/ios_interview/)\n\n","source":"_posts/iOS/OC/003-OC方法/017-frame和bounds/README.md","raw":"---\ntitle: frame 和 bounds\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- frame\n- bounds\n---\n\n[frame和bounds的区别](https://www.jianshu.com/p/964313cfbdaa)\n\n* frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）\n* bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）\n\n<!-- more -->\n\n# frame和bounds简介\n\n![](001.webp)\n\n* frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）\n* bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）。\n\n其实本地坐标系统的关键就是要知道的它的原点（0，0）在父坐标系统中的什么位置（这个位置是相对于父view的本地坐标系统而言的，最终的父view就是UIWindow，它的本地坐标系统原点就是屏幕的左上角了）。\n\n通过修改view的bounds属性可以修改本地坐标系统的原点位置。\n\n# 代码\n\n```\nUIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(100, 100, 200, 200)];\nview1.backgroundColor = [UIColor redColor];\n[self.view addSubview:view1];//添加到self.view\nNSLog(@\"view1 frame:%@========view1 bounds:%@\",NSStringFromCGRect(view1.frame),NSStringFromCGRect(view1.bounds));\n\nUIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];\nview2.backgroundColor = [UIColor yellowColor];\n[view1 addSubview:view2];//添加到view1上,[此时view1坐标系左上角起点为(-20,-20)]\nNSLog(@\"view2 frame:%@========view2 bounds:%@\",NSStringFromCGRect(view2.frame),NSStringFromCGRect(view2.bounds));\n```\n\n![](002.webp)\n\n输出\n```\nview1 frame:{{100, 100}, {200, 200}}========view1 bounds:{{0, 0}, {200, 200}}\nview2 frame:{{0, 0}, {100, 100}}========view2 bounds:{{0, 0}, {100, 100}}\n```\n\n下面我们来改变view1的bounds，代码如下\n\n```\n[view1 setBounds:CGRectMake(-20, -20, 200, 200)];\n```\n\n![](003.webp)\n\n```\nview1 frame:{{100, 100}, {200, 200}}========view1 bounds:{{-20, -20}, {200, 200}}\nview2 frame:{{0, 0}, {100, 100}}========view2 bounds:{{0, 0}, {100, 100}}\n```\n\n\n# bouns大于frame的情况\n\n假设设置了控件的bounds大于frame，那么此时会导致frame被撑大，frame的x,y,width,height都会改变。\n\n![](004.webp)\n\n\n\n# 问：frame 和 bounds 分别是用来做什么的？\n\n* frame是参考父view的坐标系来设置自己左上角的位置。\n\n* 设置bounds可以修改自己坐标系的原点位置，进而影响到其“子view”的显示位置。\n\n* bounds使用场景：\n\n    其实bounds我们一直在使用，就是我们使用scrollview的时候。\n\n    为什么我们滚动scrollview可以看到超出显示屏的内容。就是因为scrollview在不断改变自己的bounds，从而改变scrollview上的子view的frame，让他们的frame始终在最顶级view（window）的frame内部，这样我们就可以始终看到内容了。\n\n\n# 问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明\n\n[iOS日常开发之frame和bounds的不同](https://blog.csdn.net/lihao_ios/article/details/107540979)\n\n[2016年3月 iOS 面试总结](https://halfrost.com/ios_interview/)\n\n","slug":"iOS/OC/003-OC方法/017-frame和bounds/README","published":1,"updated":"2024-08-06T08:41:10.830Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94c0030dgxrdyyt7g91","content":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/964313cfbdaa\" >frame和bounds的区别 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ul>\n<li>frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）</li>\n<li>bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"frame和bounds简介\"><a href=\"#frame和bounds简介\" class=\"headerlink\" title=\"frame和bounds简介\"></a>frame和bounds简介</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/001.webp\"\n                     \n                ></p>\n<ul>\n<li>frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）</li>\n<li>bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）。</li>\n</ul>\n<p>其实本地坐标系统的关键就是要知道的它的原点（0，0）在父坐标系统中的什么位置（这个位置是相对于父view的本地坐标系统而言的，最终的父view就是UIWindow，它的本地坐标系统原点就是屏幕的左上角了）。</p>\n<p>通过修改view的bounds属性可以修改本地坐标系统的原点位置。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(100, 100, 200, 200)];</span><br><span class=\"line\">view1.backgroundColor = [UIColor redColor];</span><br><span class=\"line\">[self.view addSubview:view1];//添加到self.view</span><br><span class=\"line\">NSLog(@&quot;view1 frame:%@========view1 bounds:%@&quot;,NSStringFromCGRect(view1.frame),NSStringFromCGRect(view1.bounds));</span><br><span class=\"line\"></span><br><span class=\"line\">UIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];</span><br><span class=\"line\">view2.backgroundColor = [UIColor yellowColor];</span><br><span class=\"line\">[view1 addSubview:view2];//添加到view1上,[此时view1坐标系左上角起点为(-20,-20)]</span><br><span class=\"line\">NSLog(@&quot;view2 frame:%@========view2 bounds:%@&quot;,NSStringFromCGRect(view2.frame),NSStringFromCGRect(view2.bounds));</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/002.webp\"\n                     \n                ></p>\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view1 frame:&#123;&#123;100, 100&#125;, &#123;200, 200&#125;&#125;========view1 bounds:&#123;&#123;0, 0&#125;, &#123;200, 200&#125;&#125;</span><br><span class=\"line\">view2 frame:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;========view2 bounds:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>下面我们来改变view1的bounds，代码如下</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[view1 setBounds:CGRectMake(-20, -20, 200, 200)];</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/003.webp\"\n                     \n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view1 frame:&#123;&#123;100, 100&#125;, &#123;200, 200&#125;&#125;========view1 bounds:&#123;&#123;-20, -20&#125;, &#123;200, 200&#125;&#125;</span><br><span class=\"line\">view2 frame:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;========view2 bounds:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"bouns大于frame的情况\"><a href=\"#bouns大于frame的情况\" class=\"headerlink\" title=\"bouns大于frame的情况\"></a>bouns大于frame的情况</h1><p>假设设置了控件的bounds大于frame，那么此时会导致frame被撑大，frame的x,y,width,height都会改变。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/004.webp\"\n                     \n                ></p>\n<h1 id=\"问：frame-和-bounds-分别是用来做什么的？\"><a href=\"#问：frame-和-bounds-分别是用来做什么的？\" class=\"headerlink\" title=\"问：frame 和 bounds 分别是用来做什么的？\"></a>问：frame 和 bounds 分别是用来做什么的？</h1><ul>\n<li><p>frame是参考父view的坐标系来设置自己左上角的位置。</p>\n</li>\n<li><p>设置bounds可以修改自己坐标系的原点位置，进而影响到其“子view”的显示位置。</p>\n</li>\n<li><p>bounds使用场景：</p>\n<p>  其实bounds我们一直在使用，就是我们使用scrollview的时候。</p>\n<p>  为什么我们滚动scrollview可以看到超出显示屏的内容。就是因为scrollview在不断改变自己的bounds，从而改变scrollview上的子view的frame，让他们的frame始终在最顶级view（window）的frame内部，这样我们就可以始终看到内容了。</p>\n</li>\n</ul>\n<h1 id=\"问：frame-和-bound-一定都相等么？如果有不等的情况，请举例说明\"><a href=\"#问：frame-和-bound-一定都相等么？如果有不等的情况，请举例说明\" class=\"headerlink\" title=\"问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明\"></a>问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/lihao_ios/article/details/107540979\" >iOS日常开发之frame和bounds的不同 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://halfrost.com/ios_interview/\" >2016年3月 iOS 面试总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/964313cfbdaa\" >frame和bounds的区别 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ul>\n<li>frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）</li>\n<li>bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）</li>\n</ul>","more":"<h1 id=\"frame和bounds简介\"><a href=\"#frame和bounds简介\" class=\"headerlink\" title=\"frame和bounds简介\"></a>frame和bounds简介</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/001.webp\"\n                     \n                ></p>\n<ul>\n<li>frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）</li>\n<li>bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）。</li>\n</ul>\n<p>其实本地坐标系统的关键就是要知道的它的原点（0，0）在父坐标系统中的什么位置（这个位置是相对于父view的本地坐标系统而言的，最终的父view就是UIWindow，它的本地坐标系统原点就是屏幕的左上角了）。</p>\n<p>通过修改view的bounds属性可以修改本地坐标系统的原点位置。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(100, 100, 200, 200)];</span><br><span class=\"line\">view1.backgroundColor = [UIColor redColor];</span><br><span class=\"line\">[self.view addSubview:view1];//添加到self.view</span><br><span class=\"line\">NSLog(@&quot;view1 frame:%@========view1 bounds:%@&quot;,NSStringFromCGRect(view1.frame),NSStringFromCGRect(view1.bounds));</span><br><span class=\"line\"></span><br><span class=\"line\">UIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];</span><br><span class=\"line\">view2.backgroundColor = [UIColor yellowColor];</span><br><span class=\"line\">[view1 addSubview:view2];//添加到view1上,[此时view1坐标系左上角起点为(-20,-20)]</span><br><span class=\"line\">NSLog(@&quot;view2 frame:%@========view2 bounds:%@&quot;,NSStringFromCGRect(view2.frame),NSStringFromCGRect(view2.bounds));</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/002.webp\"\n                     \n                ></p>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view1 frame:&#123;&#123;100, 100&#125;, &#123;200, 200&#125;&#125;========view1 bounds:&#123;&#123;0, 0&#125;, &#123;200, 200&#125;&#125;</span><br><span class=\"line\">view2 frame:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;========view2 bounds:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面我们来改变view1的bounds，代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[view1 setBounds:CGRectMake(-20, -20, 200, 200)];</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/003.webp\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view1 frame:&#123;&#123;100, 100&#125;, &#123;200, 200&#125;&#125;========view1 bounds:&#123;&#123;-20, -20&#125;, &#123;200, 200&#125;&#125;</span><br><span class=\"line\">view2 frame:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;========view2 bounds:&#123;&#123;0, 0&#125;, &#123;100, 100&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"bouns大于frame的情况\"><a href=\"#bouns大于frame的情况\" class=\"headerlink\" title=\"bouns大于frame的情况\"></a>bouns大于frame的情况</h1><p>假设设置了控件的bounds大于frame，那么此时会导致frame被撑大，frame的x,y,width,height都会改变。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/07/30/iOS/OC/003-OC%E6%96%B9%E6%B3%95/017-frame%E5%92%8Cbounds/README/004.webp\"\n                     \n                ></p>\n<h1 id=\"问：frame-和-bounds-分别是用来做什么的？\"><a href=\"#问：frame-和-bounds-分别是用来做什么的？\" class=\"headerlink\" title=\"问：frame 和 bounds 分别是用来做什么的？\"></a>问：frame 和 bounds 分别是用来做什么的？</h1><ul>\n<li><p>frame是参考父view的坐标系来设置自己左上角的位置。</p>\n</li>\n<li><p>设置bounds可以修改自己坐标系的原点位置，进而影响到其“子view”的显示位置。</p>\n</li>\n<li><p>bounds使用场景：</p>\n<p>  其实bounds我们一直在使用，就是我们使用scrollview的时候。</p>\n<p>  为什么我们滚动scrollview可以看到超出显示屏的内容。就是因为scrollview在不断改变自己的bounds，从而改变scrollview上的子view的frame，让他们的frame始终在最顶级view（window）的frame内部，这样我们就可以始终看到内容了。</p>\n</li>\n</ul>\n<h1 id=\"问：frame-和-bound-一定都相等么？如果有不等的情况，请举例说明\"><a href=\"#问：frame-和-bound-一定都相等么？如果有不等的情况，请举例说明\" class=\"headerlink\" title=\"问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明\"></a>问：frame 和 bound 一定都相等么？如果有不等的情况，请举例说明</h1><p><a class=\"link\"   href=\"https://blog.csdn.net/lihao_ios/article/details/107540979\" >iOS日常开发之frame和bounds的不同 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://halfrost.com/ios_interview/\" >2016年3月 iOS 面试总结 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>"},{"title":"imageName 和 imageWithContextOfFile 的区别？哪个性能高？","date":"2024-07-30T02:34:13.971Z","_content":"\n> imageNamed性能高，因为他缓存到内存中了！\n\n1. 用imageNamed的方式加载时，图片使用完毕后缓存到内存中，内存消耗多，加载速度快。即使生成的对象被 autoReleasePool释放了，这份缓存也不释放，如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存。imageNamed采用了缓存机制，如果缓存中已加载了图片，直接从缓存读就行了，每次就不用再去读文件了，效率会更高 \n2. imageWithContextOfFile加载，图片是不会缓存的，加载速度慢。\n3. 大量使用imageNamed方式会在不需要缓存的地方额外增加开销CPU的时间。当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式,这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间.\n\n**结论**\n\n* 如果图片较小,并且频繁使用的图片,使用imageName:来加载图片(按钮图片/主页图片/占位图)\n* 如果图片较大,并且使用次数较少,使用 imageWithContentOfFile:来加载(相册/版本新特性)\n\n\n# GPT\n\n在iOS开发中，`imageNamed:` 和 `imageWithContentsOfFile:` 是两个常用的加载图片的方法。它们有不同的用途和性能特点。\n\n### `imageNamed:`\n\n**用法：**\n\n```objective-c\nUIImage *image = [UIImage imageNamed:@\"example.png\"];\n```\n\n**特点：**\n\n- **缓存机制**：`imageNamed:` 方法会缓存已经加载的图片。当再次请求相同名称的图片时，会直接从缓存中获取，而不是重新加载。这可以提高性能，尤其是在多次使用相同图片的情况下。\n- **适用于资源包中的图片**：通常用于加载应用程序包中的图片资源。\n- **不需要提供文件路径**：只需要提供图片名称，系统会自动在资源包中查找。\n\n**适用场景：**\n\n- 适合加载应用程序包中的小图片。\n- 适合频繁使用的图片，因为缓存机制可以提高性能。\n\n### `imageWithContentsOfFile:`\n\n**用法：**\n\n```objective-c\nNSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example\" ofType:@\"png\"];\nUIImage *image = [UIImage imageWithContentsOfFile:filePath];\n```\n\n**特点：**\n\n- **无缓存机制**：`imageWithContentsOfFile:` 每次调用都会从磁盘加载图片，不会缓存。这意味着在频繁使用同一图片时，性能可能会受到影响。\n- **需要提供完整路径**：需要提供图片的完整文件路径。\n- **适用于沙盒中的图片**：可以加载沙盒中的图片资源。\n\n**适用场景：**\n\n- 适合加载不经常使用的图片。\n- 适合加载动态生成或下载到沙盒中的图片。\n\n### 性能比较\n\n- **内存占用**：由于`imageNamed:`会缓存图片，如果加载大量图片，可能会增加内存占用。而`imageWithContentsOfFile:`每次都从磁盘读取图片，内存占用较低，但会增加磁盘I/O。\n- **加载速度**：对于多次使用同一图片的情况，`imageNamed:`的性能更高，因为缓存机制避免了重复的磁盘I/O。对于一次性加载的图片，`imageWithContentsOfFile:`可以避免不必要的内存缓存。\n- **适用场景**：在需要频繁使用相同图片的场景下，`imageNamed:`更具优势。在只需要偶尔加载或一次性使用图片的场景下，`imageWithContentsOfFile:`更适合。\n\n### 示例代码\n\n**`imageNamed:` 示例**\n\n```objective-c\nUIImage *image = [UIImage imageNamed:@\"example.png\"];\n```\n\n**`imageWithContentsOfFile:` 示例**\n\n```objective-c\nNSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example\" ofType:@\"png\"];\nUIImage *image = [UIImage imageWithContentsOfFile:filePath];\n```\n\n### 总结\n\n- **`imageNamed:`**：适合频繁使用的图片，具有缓存机制，加载速度快，内存占用相对较高。\n- **`imageWithContentsOfFile:`**：适合偶尔使用或动态加载的图片，无缓存机制，加载速度稍慢，但内存占用较低。\n\n选择哪个方法取决于具体的使用场景和性能需求。对于频繁使用的图片资源，建议使用`imageNamed:`；对于一次性加载或动态生成的图片资源，建议使用`imageWithContentsOfFile:`。","source":"_posts/iOS/OC/003-OC方法/016-imageName和imageWithContextOfFile 的区别？/README.md","raw":"---\ntitle: imageName 和 imageWithContextOfFile 的区别？哪个性能高？\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- imageName\n---\n\n> imageNamed性能高，因为他缓存到内存中了！\n\n1. 用imageNamed的方式加载时，图片使用完毕后缓存到内存中，内存消耗多，加载速度快。即使生成的对象被 autoReleasePool释放了，这份缓存也不释放，如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存。imageNamed采用了缓存机制，如果缓存中已加载了图片，直接从缓存读就行了，每次就不用再去读文件了，效率会更高 \n2. imageWithContextOfFile加载，图片是不会缓存的，加载速度慢。\n3. 大量使用imageNamed方式会在不需要缓存的地方额外增加开销CPU的时间。当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式,这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间.\n\n**结论**\n\n* 如果图片较小,并且频繁使用的图片,使用imageName:来加载图片(按钮图片/主页图片/占位图)\n* 如果图片较大,并且使用次数较少,使用 imageWithContentOfFile:来加载(相册/版本新特性)\n\n\n# GPT\n\n在iOS开发中，`imageNamed:` 和 `imageWithContentsOfFile:` 是两个常用的加载图片的方法。它们有不同的用途和性能特点。\n\n### `imageNamed:`\n\n**用法：**\n\n```objective-c\nUIImage *image = [UIImage imageNamed:@\"example.png\"];\n```\n\n**特点：**\n\n- **缓存机制**：`imageNamed:` 方法会缓存已经加载的图片。当再次请求相同名称的图片时，会直接从缓存中获取，而不是重新加载。这可以提高性能，尤其是在多次使用相同图片的情况下。\n- **适用于资源包中的图片**：通常用于加载应用程序包中的图片资源。\n- **不需要提供文件路径**：只需要提供图片名称，系统会自动在资源包中查找。\n\n**适用场景：**\n\n- 适合加载应用程序包中的小图片。\n- 适合频繁使用的图片，因为缓存机制可以提高性能。\n\n### `imageWithContentsOfFile:`\n\n**用法：**\n\n```objective-c\nNSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example\" ofType:@\"png\"];\nUIImage *image = [UIImage imageWithContentsOfFile:filePath];\n```\n\n**特点：**\n\n- **无缓存机制**：`imageWithContentsOfFile:` 每次调用都会从磁盘加载图片，不会缓存。这意味着在频繁使用同一图片时，性能可能会受到影响。\n- **需要提供完整路径**：需要提供图片的完整文件路径。\n- **适用于沙盒中的图片**：可以加载沙盒中的图片资源。\n\n**适用场景：**\n\n- 适合加载不经常使用的图片。\n- 适合加载动态生成或下载到沙盒中的图片。\n\n### 性能比较\n\n- **内存占用**：由于`imageNamed:`会缓存图片，如果加载大量图片，可能会增加内存占用。而`imageWithContentsOfFile:`每次都从磁盘读取图片，内存占用较低，但会增加磁盘I/O。\n- **加载速度**：对于多次使用同一图片的情况，`imageNamed:`的性能更高，因为缓存机制避免了重复的磁盘I/O。对于一次性加载的图片，`imageWithContentsOfFile:`可以避免不必要的内存缓存。\n- **适用场景**：在需要频繁使用相同图片的场景下，`imageNamed:`更具优势。在只需要偶尔加载或一次性使用图片的场景下，`imageWithContentsOfFile:`更适合。\n\n### 示例代码\n\n**`imageNamed:` 示例**\n\n```objective-c\nUIImage *image = [UIImage imageNamed:@\"example.png\"];\n```\n\n**`imageWithContentsOfFile:` 示例**\n\n```objective-c\nNSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example\" ofType:@\"png\"];\nUIImage *image = [UIImage imageWithContentsOfFile:filePath];\n```\n\n### 总结\n\n- **`imageNamed:`**：适合频繁使用的图片，具有缓存机制，加载速度快，内存占用相对较高。\n- **`imageWithContentsOfFile:`**：适合偶尔使用或动态加载的图片，无缓存机制，加载速度稍慢，但内存占用较低。\n\n选择哪个方法取决于具体的使用场景和性能需求。对于频繁使用的图片资源，建议使用`imageNamed:`；对于一次性加载或动态生成的图片资源，建议使用`imageWithContentsOfFile:`。","slug":"iOS/OC/003-OC方法/016-imageName和imageWithContextOfFile 的区别？/README","published":1,"updated":"2024-08-06T08:41:06.411Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94d0034dgxrgom6g27h","content":"<blockquote>\n<p>imageNamed性能高，因为他缓存到内存中了！</p>\n</blockquote>\n<ol>\n<li>用imageNamed的方式加载时，图片使用完毕后缓存到内存中，内存消耗多，加载速度快。即使生成的对象被 autoReleasePool释放了，这份缓存也不释放，如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存。imageNamed采用了缓存机制，如果缓存中已加载了图片，直接从缓存读就行了，每次就不用再去读文件了，效率会更高 </li>\n<li>imageWithContextOfFile加载，图片是不会缓存的，加载速度慢。</li>\n<li>大量使用imageNamed方式会在不需要缓存的地方额外增加开销CPU的时间。当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式,这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间.</li>\n</ol>\n<p><strong>结论</strong></p>\n<ul>\n<li>如果图片较小,并且频繁使用的图片,使用imageName:来加载图片(按钮图片&#x2F;主页图片&#x2F;占位图)</li>\n<li>如果图片较大,并且使用次数较少,使用 imageWithContentOfFile:来加载(相册&#x2F;版本新特性)</li>\n</ul>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在iOS开发中，<code>imageNamed:</code> 和 <code>imageWithContentsOfFile:</code> 是两个常用的加载图片的方法。它们有不同的用途和性能特点。</p>\n<h3 id=\"imageNamed\"><a href=\"#imageNamed\" class=\"headerlink\" title=\"imageNamed:\"></a><code>imageNamed:</code></h3><p><strong>用法：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImage *image = [UIImage imageNamed:@&quot;example.png&quot;];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>缓存机制</strong>：<code>imageNamed:</code> 方法会缓存已经加载的图片。当再次请求相同名称的图片时，会直接从缓存中获取，而不是重新加载。这可以提高性能，尤其是在多次使用相同图片的情况下。</li>\n<li><strong>适用于资源包中的图片</strong>：通常用于加载应用程序包中的图片资源。</li>\n<li><strong>不需要提供文件路径</strong>：只需要提供图片名称，系统会自动在资源包中查找。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>适合加载应用程序包中的小图片。</li>\n<li>适合频繁使用的图片，因为缓存机制可以提高性能。</li>\n</ul>\n<h3 id=\"imageWithContentsOfFile\"><a href=\"#imageWithContentsOfFile\" class=\"headerlink\" title=\"imageWithContentsOfFile:\"></a><code>imageWithContentsOfFile:</code></h3><p><strong>用法：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;example&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\">UIImage *image = [UIImage imageWithContentsOfFile:filePath];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>无缓存机制</strong>：<code>imageWithContentsOfFile:</code> 每次调用都会从磁盘加载图片，不会缓存。这意味着在频繁使用同一图片时，性能可能会受到影响。</li>\n<li><strong>需要提供完整路径</strong>：需要提供图片的完整文件路径。</li>\n<li><strong>适用于沙盒中的图片</strong>：可以加载沙盒中的图片资源。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>适合加载不经常使用的图片。</li>\n<li>适合加载动态生成或下载到沙盒中的图片。</li>\n</ul>\n<h3 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h3><ul>\n<li><strong>内存占用</strong>：由于<code>imageNamed:</code>会缓存图片，如果加载大量图片，可能会增加内存占用。而<code>imageWithContentsOfFile:</code>每次都从磁盘读取图片，内存占用较低，但会增加磁盘I&#x2F;O。</li>\n<li><strong>加载速度</strong>：对于多次使用同一图片的情况，<code>imageNamed:</code>的性能更高，因为缓存机制避免了重复的磁盘I&#x2F;O。对于一次性加载的图片，<code>imageWithContentsOfFile:</code>可以避免不必要的内存缓存。</li>\n<li><strong>适用场景</strong>：在需要频繁使用相同图片的场景下，<code>imageNamed:</code>更具优势。在只需要偶尔加载或一次性使用图片的场景下，<code>imageWithContentsOfFile:</code>更适合。</li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p><strong><code>imageNamed:</code> 示例</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImage *image = [UIImage imageNamed:@&quot;example.png&quot;];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><code>imageWithContentsOfFile:</code> 示例</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;example&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\">UIImage *image = [UIImage imageWithContentsOfFile:filePath];</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>imageNamed:</code>**：适合频繁使用的图片，具有缓存机制，加载速度快，内存占用相对较高。</li>\n<li>**<code>imageWithContentsOfFile:</code>**：适合偶尔使用或动态加载的图片，无缓存机制，加载速度稍慢，但内存占用较低。</li>\n</ul>\n<p>选择哪个方法取决于具体的使用场景和性能需求。对于频繁使用的图片资源，建议使用<code>imageNamed:</code>；对于一次性加载或动态生成的图片资源，建议使用<code>imageWithContentsOfFile:</code>。</p>\n","excerpt":"","more":"<blockquote>\n<p>imageNamed性能高，因为他缓存到内存中了！</p>\n</blockquote>\n<ol>\n<li>用imageNamed的方式加载时，图片使用完毕后缓存到内存中，内存消耗多，加载速度快。即使生成的对象被 autoReleasePool释放了，这份缓存也不释放，如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存。imageNamed采用了缓存机制，如果缓存中已加载了图片，直接从缓存读就行了，每次就不用再去读文件了，效率会更高 </li>\n<li>imageWithContextOfFile加载，图片是不会缓存的，加载速度慢。</li>\n<li>大量使用imageNamed方式会在不需要缓存的地方额外增加开销CPU的时间。当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式,这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间.</li>\n</ol>\n<p><strong>结论</strong></p>\n<ul>\n<li>如果图片较小,并且频繁使用的图片,使用imageName:来加载图片(按钮图片&#x2F;主页图片&#x2F;占位图)</li>\n<li>如果图片较大,并且使用次数较少,使用 imageWithContentOfFile:来加载(相册&#x2F;版本新特性)</li>\n</ul>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>在iOS开发中，<code>imageNamed:</code> 和 <code>imageWithContentsOfFile:</code> 是两个常用的加载图片的方法。它们有不同的用途和性能特点。</p>\n<h3 id=\"imageNamed\"><a href=\"#imageNamed\" class=\"headerlink\" title=\"imageNamed:\"></a><code>imageNamed:</code></h3><p><strong>用法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImage *image = [UIImage imageNamed:@&quot;example.png&quot;];</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>缓存机制</strong>：<code>imageNamed:</code> 方法会缓存已经加载的图片。当再次请求相同名称的图片时，会直接从缓存中获取，而不是重新加载。这可以提高性能，尤其是在多次使用相同图片的情况下。</li>\n<li><strong>适用于资源包中的图片</strong>：通常用于加载应用程序包中的图片资源。</li>\n<li><strong>不需要提供文件路径</strong>：只需要提供图片名称，系统会自动在资源包中查找。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>适合加载应用程序包中的小图片。</li>\n<li>适合频繁使用的图片，因为缓存机制可以提高性能。</li>\n</ul>\n<h3 id=\"imageWithContentsOfFile\"><a href=\"#imageWithContentsOfFile\" class=\"headerlink\" title=\"imageWithContentsOfFile:\"></a><code>imageWithContentsOfFile:</code></h3><p><strong>用法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;example&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\">UIImage *image = [UIImage imageWithContentsOfFile:filePath];</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>无缓存机制</strong>：<code>imageWithContentsOfFile:</code> 每次调用都会从磁盘加载图片，不会缓存。这意味着在频繁使用同一图片时，性能可能会受到影响。</li>\n<li><strong>需要提供完整路径</strong>：需要提供图片的完整文件路径。</li>\n<li><strong>适用于沙盒中的图片</strong>：可以加载沙盒中的图片资源。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>适合加载不经常使用的图片。</li>\n<li>适合加载动态生成或下载到沙盒中的图片。</li>\n</ul>\n<h3 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h3><ul>\n<li><strong>内存占用</strong>：由于<code>imageNamed:</code>会缓存图片，如果加载大量图片，可能会增加内存占用。而<code>imageWithContentsOfFile:</code>每次都从磁盘读取图片，内存占用较低，但会增加磁盘I&#x2F;O。</li>\n<li><strong>加载速度</strong>：对于多次使用同一图片的情况，<code>imageNamed:</code>的性能更高，因为缓存机制避免了重复的磁盘I&#x2F;O。对于一次性加载的图片，<code>imageWithContentsOfFile:</code>可以避免不必要的内存缓存。</li>\n<li><strong>适用场景</strong>：在需要频繁使用相同图片的场景下，<code>imageNamed:</code>更具优势。在只需要偶尔加载或一次性使用图片的场景下，<code>imageWithContentsOfFile:</code>更适合。</li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p><strong><code>imageNamed:</code> 示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImage *image = [UIImage imageNamed:@&quot;example.png&quot;];</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>imageWithContentsOfFile:</code> 示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;example&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\">UIImage *image = [UIImage imageWithContentsOfFile:filePath];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>imageNamed:</code>**：适合频繁使用的图片，具有缓存机制，加载速度快，内存占用相对较高。</li>\n<li>**<code>imageWithContentsOfFile:</code>**：适合偶尔使用或动态加载的图片，无缓存机制，加载速度稍慢，但内存占用较低。</li>\n</ul>\n<p>选择哪个方法取决于具体的使用场景和性能需求。对于频繁使用的图片资源，建议使用<code>imageNamed:</code>；对于一次性加载或动态生成的图片资源，建议使用<code>imageWithContentsOfFile:</code>。</p>\n"},{"title":"View的layout的方法","date":"2024-07-30T07:21:30.201Z","_content":"\n[iOS 谈谈layoutSubviews何用](https://www.jianshu.com/p/2ef48c2f0c97)\n\n<!-- more-->\n\n下面列出View的layout的方法:\n```\nlayoutSubviews\nlayoutIfNeeded\nsetNeedsLayout\nsetNeedsDisplay\ndrawRect\nsizeThatFits\nsizeToFit\n```\n\n# layoutSubviews\n\n`layoutSubviews` 是 `UIView` 的一个方法，用于在视图的子视图布局发生变化时进行重新布局。它的调用时机有以下几种情况：\n\n### 1. 初始布局\n当视图第一次显示时，系统会自动调用 `layoutSubviews` 方法以布局视图及其子视图。\n\n### 2. 布局发生变化\n当视图的 `frame` 或 `bounds` 改变时，系统会调用 `layoutSubviews` 方法。例如，通过设置视图的 `frame` 或 `bounds` 来改变视图的大小或位置时。\n\n### 3. 子视图添加或移除\n当向视图中添加或移除子视图时，`layoutSubviews` 会被调用。例如，使用 `addSubview:` 或 `removeFromSuperview` 方法时。\n\n### 4. 设置需要布局更新\n当调用 `setNeedsLayout` 方法时，系统会标记视图需要重新布局，并在下一个布局周期调用 `layoutSubviews` 方法。\n\n### 5. 设置需要显示更新\n当调用 `setNeedsDisplay` 方法时，系统也会调用 `layoutSubviews` 方法，因为需要重新绘制视图。\n\n### 6. 设备旋转\n当设备旋转导致屏幕尺寸变化时，系统会调用 `layoutSubviews` 方法以适应新的屏幕尺寸。\n\n### 例子\n\n```swift\nclass CustomView: UIView {\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 在此处调整子视图的布局\n        subview.frame = CGRect(x: 0, y: 0, width: self.bounds.width, height: 50)\n    }\n}\n```\n\n在这个示例中，每当 `CustomView` 的 `frame` 或 `bounds` 发生变化时，系统会调用 `layoutSubviews` 方法，在该方法中可以调整 `subview` 的 `frame` 以适应新的尺寸。\n\n### 总结\n`layoutSubviews` 方法在视图的布局或子视图的布局需要更新时被调用。理解它的调用时机有助于在自定义视图时正确处理布局更新。\n\n\n\n# layoutIfNeeded\n\n`layoutIfNeeded` 是 `UIView` 的一个方法，用于立即布局视图及其子视图。通常情况下，视图的布局会在下一个运行循环中异步执行，但是如果你希望立即执行布局而不等待下一个运行循环，可以调用 `layoutIfNeeded` 方法。\n\n### 调用时机\n\n1. **手动布局更新**：\n   - 当你需要确保视图在某个时刻立即布局时，可以在需要的地方调用 `layoutIfNeeded` 方法。例如，在视图控制器的 `viewWillAppear` 或 `viewDidAppear` 方法中，有时需要确保视图已经正确布局后再执行某些操作。\n\n2. **动画布局**：\n   - 在使用 `UIView` 的动画方法（如 `animate(withDuration:animations:)`）时，你可以在动画代码块中使用 `layoutIfNeeded` 方法来确保动画执行过程中视图的布局是最新的。这可以避免动画执行过程中布局更新导致的不良效果。\n\n3. **获取布局后的尺寸**：\n   - 在某些情况下，你可能需要获取视图在特定时刻的布局后的尺寸或位置信息。在获取这些信息之前，可以调用 `layoutIfNeeded` 来确保已经进行了布局计算。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    func animateAndLayout() {\n        UIView.animate(withDuration: 0.3) {\n            // 在动画中更新约束或者属性\n            self.layoutIfNeeded()\n        }\n    }\n}\n```\n\n在这个示例中，当 `animateAndLayout` 方法被调用时，通过 `UIView` 的动画方法来执行动画，同时在动画块中调用 `layoutIfNeeded` 方法，确保在动画执行期间视图的布局是最新的。\n\n### 总结\n\n`layoutIfNeeded` 方法通常用于需要立即执行布局或确保在某些操作之前视图已经完成布局计算的情况下。它能够在需要时强制视图立即进行布局计算，并等待布局更新完成。\n\n\n\n\n# setNeedsLayout\n\n`setNeedsLayout` 是 `UIView` 的一个方法，用于标记视图需要重新布局。在标记之后，系统会在下一个布局周期中异步调用 `layoutSubviews` 方法。这个方法不会立即触发布局更新，但会在下一次运行循环中进行布局。调用 `setNeedsLayout` 的场景主要包括以下几种：\n\n### 调用时机\n\n1. **视图的属性发生变化**：\n   - 当视图的某些属性（如 `frame`、`bounds`、`center` 等）发生变化时，你需要更新其子视图的布局。例如，如果你手动改变了视图的 `frame`，可以调用 `setNeedsLayout` 来确保子视图布局在下一个布局周期内更新。\n\n2. **视图的内容发生变化**：\n   - 如果视图的内容发生了变化，并且需要重新布局子视图。例如，视图中的文本、图像等内容变化后，需要调整子视图的位置或大小。\n\n3. **响应外部事件**：\n   - 当响应外部事件（如用户交互、通知等）需要更新视图的布局时。例如，用户点击按钮后需要调整其他视图的位置或大小。\n\n4. **约束变化**：\n   - 当使用 Auto Layout 并且视图的约束发生变化时，可以调用 `setNeedsLayout` 来触发重新布局。例如，你修改了视图的 NSLayoutConstraint 并希望立即生效。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    var someProperty: Int = 0 {\n        didSet {\n            // 当属性变化时，需要更新视图布局\n            setNeedsLayout()\n        }\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 在此处调整子视图的布局\n        subview.frame = CGRect(x: 0, y: 0, width: self.bounds.width, height: 50)\n    }\n}\n```\n\n在这个示例中，当 `someProperty` 发生变化时，会调用 `setNeedsLayout` 方法，标记视图需要重新布局。然后在下一个布局周期中，系统会调用 `layoutSubviews` 方法，在该方法中可以调整子视图的布局。\n\n### 总结\n\n`setNeedsLayout` 方法用于标记视图需要重新布局，在标记后，系统会在下一个布局周期内异步调用 `layoutSubviews` 方法。它通常用于响应视图属性、内容或外部事件的变化，以确保子视图的布局是最新的。通过调用 `setNeedsLayout`，可以延迟布局更新，从而优化性能和减少不必要的布局计算。\n\n**setNeedsLayout方法并不会立即刷新，立即刷新需要调用layoutIfNeeded方法！**\n```\n[self.view setNeedsLayout];\n[self.view layoutIfNeeded];\n```\n\n\n\n# setNeedsDisplay\n\n`setNeedsDisplay` 是 `UIView` 的一个方法，用于标记视图需要重新绘制。调用 `setNeedsDisplay` 方法会使系统在下一个绘制周期中调用视图的 `draw(_:)` 方法。这通常用于视图内容发生变化，需要重新绘制的情况。以下是一些常见的调用场景：\n\n### 调用时机\n\n1. **视图内容发生变化**：\n   - 当视图的内容需要更新时（例如文本、图像或颜色等变化），可以调用 `setNeedsDisplay` 来标记视图需要重新绘制。例如，你在自定义视图中绘制了一个图形，如果图形的数据发生了变化，需要调用 `setNeedsDisplay` 重新绘制。\n\n2. **视图的属性发生变化**：\n   - 如果视图的某些属性（如背景色、透明度等）发生变化，且这些变化需要通过重新绘制才能反映出来。例如，你改变了视图的 `backgroundColor` 或 `alpha` 值，可以调用 `setNeedsDisplay` 重新绘制视图。\n\n3. **响应外部事件**：\n   - 当响应外部事件（如用户交互、通知等）需要更新视图的内容时。例如，用户点击按钮后，需要更新视图中显示的内容。\n\n4. **动画效果**：\n   - 在某些动画效果中，需要逐帧更新视图的内容。例如，你在一个自定义视图中实现动画，通过定时器或 CADisplayLink 调用 `setNeedsDisplay` 来逐帧重绘视图。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    var fillColor: UIColor = .red {\n        didSet {\n            // 当填充颜色变化时，标记视图需要重新绘制\n            setNeedsDisplay()\n        }\n    }\n    \n    override func draw(_ rect: CGRect) {\n        super.draw(rect)\n        \n        // 在此处执行自定义绘制\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n        \n        context.setFillColor(fillColor.cgColor)\n        context.fill(rect)\n    }\n}\n```\n\n在这个示例中，当 `fillColor` 属性变化时，会调用 `setNeedsDisplay` 方法，标记视图需要重新绘制。在下一个绘制周期中，系统会调用 `draw(_:)` 方法，在该方法中可以执行自定义绘制。\n\n### 总结\n\n`setNeedsDisplay` 方法用于标记视图需要重新绘制，在标记后，系统会在下一个绘制周期内调用 `draw(_:)` 方法。它通常用于视图内容或属性发生变化，需要通过重新绘制来反映这些变化的情况。通过调用 `setNeedsDisplay`，可以确保视图内容及时更新，保持与应用状态的一致性。\n\n\n\n\n# drawRect\n\n在iOS开发中，`drawRect:`方法是`UIView`类的一个实例方法，用于在自定义视图中绘制内容。`drawRect:`方法会在系统需要视图重绘时调用，比如视图首次显示或需要更新其内容时。以下是一些具体的场景：\n\n### 何时调用`drawRect:`\n\n1. **视图首次显示**：\n   - 当视图首次显示在屏幕上时，系统会调用`drawRect:`方法来绘制视图的内容。\n\n2. **视图内容需要更新**：\n   - 当视图的内容发生变化，需要重新绘制时，系统会调用`drawRect:`方法。例如，调用`setNeedsDisplay`或`setNeedsDisplayInRect:`方法会标记视图为需要重绘，系统会在下一个绘制周期中调用`drawRect:`方法。\n\n3. **视图尺寸变化**：\n   - 当视图的尺寸发生变化时（例如，通过自动布局约束调整），系统可能会调用`drawRect:`方法以适应新的尺寸。\n\n### 示例代码\n\n以下是一个示例，演示如何在自定义视图中实现`drawRect:`方法：\n\n```swift\nimport UIKit\n\nclass CustomView: UIView {\n\n    // 初始化方法\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    // 设置初始配置\n    private func setup() {\n        // 可以在这里进行一些初始配置\n        backgroundColor = .white\n    }\n\n    // 绘制内容\n    override func draw(_ rect: CGRect) {\n        // 获取绘图上下文\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n        \n        // 设置绘图属性\n        context.setLineWidth(2.0)\n        context.setStrokeColor(UIColor.red.cgColor)\n        \n        // 绘制矩形\n        let rectangle = CGRect(x: 10, y: 10, width: 100, height: 100)\n        context.addRect(rectangle)\n        context.strokePath()\n    }\n}\n```\n\n### 触发`drawRect:`\n\n你可以通过以下方式触发视图的重绘，进而调用`drawRect:`方法：\n\n1. **手动调用`setNeedsDisplay`**：\n   - 标记整个视图为需要重绘。\n\n    ```swift\n    customView.setNeedsDisplay()\n    ```\n\n2. **手动调用`setNeedsDisplayInRect:`**：\n   - 标记视图的特定区域为需要重绘。\n\n    ```swift\n    customView.setNeedsDisplay(in: CGRect(x: 10, y: 10, width: 50, height: 50))\n    ```\n\n### 注意事项\n\n- `drawRect:`方法只应在视图内容需要更新时调用，避免不必要的性能开销。\n- 不要直接调用`drawRect:`方法。相反，使用`setNeedsDisplay`或`setNeedsDisplayInRect:`来触发重绘。\n- 在`drawRect:`方法中进行绘制操作时，应避免执行耗时任务，以保持界面流畅。\n- 如果你的视图不需要自定义绘制，避免重写`drawRect:`方法，因为它会禁用视图的离屏渲染优化。\n\n### 总结\n\n`drawRect:`方法是用于在自定义视图中绘制内容的关键方法。它会在视图首次显示、内容需要更新或尺寸变化时由系统调用。通过合理使用`setNeedsDisplay`和`setNeedsDisplayInRect:`方法，你可以控制视图的重绘行为，确保应用界面的高效和流畅。\n\n\n\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/020-View的layout的方法/README.md","raw":"---\ntitle: View的layout的方法\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- View\n- layout\n---\n\n[iOS 谈谈layoutSubviews何用](https://www.jianshu.com/p/2ef48c2f0c97)\n\n<!-- more-->\n\n下面列出View的layout的方法:\n```\nlayoutSubviews\nlayoutIfNeeded\nsetNeedsLayout\nsetNeedsDisplay\ndrawRect\nsizeThatFits\nsizeToFit\n```\n\n# layoutSubviews\n\n`layoutSubviews` 是 `UIView` 的一个方法，用于在视图的子视图布局发生变化时进行重新布局。它的调用时机有以下几种情况：\n\n### 1. 初始布局\n当视图第一次显示时，系统会自动调用 `layoutSubviews` 方法以布局视图及其子视图。\n\n### 2. 布局发生变化\n当视图的 `frame` 或 `bounds` 改变时，系统会调用 `layoutSubviews` 方法。例如，通过设置视图的 `frame` 或 `bounds` 来改变视图的大小或位置时。\n\n### 3. 子视图添加或移除\n当向视图中添加或移除子视图时，`layoutSubviews` 会被调用。例如，使用 `addSubview:` 或 `removeFromSuperview` 方法时。\n\n### 4. 设置需要布局更新\n当调用 `setNeedsLayout` 方法时，系统会标记视图需要重新布局，并在下一个布局周期调用 `layoutSubviews` 方法。\n\n### 5. 设置需要显示更新\n当调用 `setNeedsDisplay` 方法时，系统也会调用 `layoutSubviews` 方法，因为需要重新绘制视图。\n\n### 6. 设备旋转\n当设备旋转导致屏幕尺寸变化时，系统会调用 `layoutSubviews` 方法以适应新的屏幕尺寸。\n\n### 例子\n\n```swift\nclass CustomView: UIView {\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 在此处调整子视图的布局\n        subview.frame = CGRect(x: 0, y: 0, width: self.bounds.width, height: 50)\n    }\n}\n```\n\n在这个示例中，每当 `CustomView` 的 `frame` 或 `bounds` 发生变化时，系统会调用 `layoutSubviews` 方法，在该方法中可以调整 `subview` 的 `frame` 以适应新的尺寸。\n\n### 总结\n`layoutSubviews` 方法在视图的布局或子视图的布局需要更新时被调用。理解它的调用时机有助于在自定义视图时正确处理布局更新。\n\n\n\n# layoutIfNeeded\n\n`layoutIfNeeded` 是 `UIView` 的一个方法，用于立即布局视图及其子视图。通常情况下，视图的布局会在下一个运行循环中异步执行，但是如果你希望立即执行布局而不等待下一个运行循环，可以调用 `layoutIfNeeded` 方法。\n\n### 调用时机\n\n1. **手动布局更新**：\n   - 当你需要确保视图在某个时刻立即布局时，可以在需要的地方调用 `layoutIfNeeded` 方法。例如，在视图控制器的 `viewWillAppear` 或 `viewDidAppear` 方法中，有时需要确保视图已经正确布局后再执行某些操作。\n\n2. **动画布局**：\n   - 在使用 `UIView` 的动画方法（如 `animate(withDuration:animations:)`）时，你可以在动画代码块中使用 `layoutIfNeeded` 方法来确保动画执行过程中视图的布局是最新的。这可以避免动画执行过程中布局更新导致的不良效果。\n\n3. **获取布局后的尺寸**：\n   - 在某些情况下，你可能需要获取视图在特定时刻的布局后的尺寸或位置信息。在获取这些信息之前，可以调用 `layoutIfNeeded` 来确保已经进行了布局计算。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    func animateAndLayout() {\n        UIView.animate(withDuration: 0.3) {\n            // 在动画中更新约束或者属性\n            self.layoutIfNeeded()\n        }\n    }\n}\n```\n\n在这个示例中，当 `animateAndLayout` 方法被调用时，通过 `UIView` 的动画方法来执行动画，同时在动画块中调用 `layoutIfNeeded` 方法，确保在动画执行期间视图的布局是最新的。\n\n### 总结\n\n`layoutIfNeeded` 方法通常用于需要立即执行布局或确保在某些操作之前视图已经完成布局计算的情况下。它能够在需要时强制视图立即进行布局计算，并等待布局更新完成。\n\n\n\n\n# setNeedsLayout\n\n`setNeedsLayout` 是 `UIView` 的一个方法，用于标记视图需要重新布局。在标记之后，系统会在下一个布局周期中异步调用 `layoutSubviews` 方法。这个方法不会立即触发布局更新，但会在下一次运行循环中进行布局。调用 `setNeedsLayout` 的场景主要包括以下几种：\n\n### 调用时机\n\n1. **视图的属性发生变化**：\n   - 当视图的某些属性（如 `frame`、`bounds`、`center` 等）发生变化时，你需要更新其子视图的布局。例如，如果你手动改变了视图的 `frame`，可以调用 `setNeedsLayout` 来确保子视图布局在下一个布局周期内更新。\n\n2. **视图的内容发生变化**：\n   - 如果视图的内容发生了变化，并且需要重新布局子视图。例如，视图中的文本、图像等内容变化后，需要调整子视图的位置或大小。\n\n3. **响应外部事件**：\n   - 当响应外部事件（如用户交互、通知等）需要更新视图的布局时。例如，用户点击按钮后需要调整其他视图的位置或大小。\n\n4. **约束变化**：\n   - 当使用 Auto Layout 并且视图的约束发生变化时，可以调用 `setNeedsLayout` 来触发重新布局。例如，你修改了视图的 NSLayoutConstraint 并希望立即生效。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    var someProperty: Int = 0 {\n        didSet {\n            // 当属性变化时，需要更新视图布局\n            setNeedsLayout()\n        }\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 在此处调整子视图的布局\n        subview.frame = CGRect(x: 0, y: 0, width: self.bounds.width, height: 50)\n    }\n}\n```\n\n在这个示例中，当 `someProperty` 发生变化时，会调用 `setNeedsLayout` 方法，标记视图需要重新布局。然后在下一个布局周期中，系统会调用 `layoutSubviews` 方法，在该方法中可以调整子视图的布局。\n\n### 总结\n\n`setNeedsLayout` 方法用于标记视图需要重新布局，在标记后，系统会在下一个布局周期内异步调用 `layoutSubviews` 方法。它通常用于响应视图属性、内容或外部事件的变化，以确保子视图的布局是最新的。通过调用 `setNeedsLayout`，可以延迟布局更新，从而优化性能和减少不必要的布局计算。\n\n**setNeedsLayout方法并不会立即刷新，立即刷新需要调用layoutIfNeeded方法！**\n```\n[self.view setNeedsLayout];\n[self.view layoutIfNeeded];\n```\n\n\n\n# setNeedsDisplay\n\n`setNeedsDisplay` 是 `UIView` 的一个方法，用于标记视图需要重新绘制。调用 `setNeedsDisplay` 方法会使系统在下一个绘制周期中调用视图的 `draw(_:)` 方法。这通常用于视图内容发生变化，需要重新绘制的情况。以下是一些常见的调用场景：\n\n### 调用时机\n\n1. **视图内容发生变化**：\n   - 当视图的内容需要更新时（例如文本、图像或颜色等变化），可以调用 `setNeedsDisplay` 来标记视图需要重新绘制。例如，你在自定义视图中绘制了一个图形，如果图形的数据发生了变化，需要调用 `setNeedsDisplay` 重新绘制。\n\n2. **视图的属性发生变化**：\n   - 如果视图的某些属性（如背景色、透明度等）发生变化，且这些变化需要通过重新绘制才能反映出来。例如，你改变了视图的 `backgroundColor` 或 `alpha` 值，可以调用 `setNeedsDisplay` 重新绘制视图。\n\n3. **响应外部事件**：\n   - 当响应外部事件（如用户交互、通知等）需要更新视图的内容时。例如，用户点击按钮后，需要更新视图中显示的内容。\n\n4. **动画效果**：\n   - 在某些动画效果中，需要逐帧更新视图的内容。例如，你在一个自定义视图中实现动画，通过定时器或 CADisplayLink 调用 `setNeedsDisplay` 来逐帧重绘视图。\n\n### 示例\n\n```swift\nclass CustomView: UIView {\n    var fillColor: UIColor = .red {\n        didSet {\n            // 当填充颜色变化时，标记视图需要重新绘制\n            setNeedsDisplay()\n        }\n    }\n    \n    override func draw(_ rect: CGRect) {\n        super.draw(rect)\n        \n        // 在此处执行自定义绘制\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n        \n        context.setFillColor(fillColor.cgColor)\n        context.fill(rect)\n    }\n}\n```\n\n在这个示例中，当 `fillColor` 属性变化时，会调用 `setNeedsDisplay` 方法，标记视图需要重新绘制。在下一个绘制周期中，系统会调用 `draw(_:)` 方法，在该方法中可以执行自定义绘制。\n\n### 总结\n\n`setNeedsDisplay` 方法用于标记视图需要重新绘制，在标记后，系统会在下一个绘制周期内调用 `draw(_:)` 方法。它通常用于视图内容或属性发生变化，需要通过重新绘制来反映这些变化的情况。通过调用 `setNeedsDisplay`，可以确保视图内容及时更新，保持与应用状态的一致性。\n\n\n\n\n# drawRect\n\n在iOS开发中，`drawRect:`方法是`UIView`类的一个实例方法，用于在自定义视图中绘制内容。`drawRect:`方法会在系统需要视图重绘时调用，比如视图首次显示或需要更新其内容时。以下是一些具体的场景：\n\n### 何时调用`drawRect:`\n\n1. **视图首次显示**：\n   - 当视图首次显示在屏幕上时，系统会调用`drawRect:`方法来绘制视图的内容。\n\n2. **视图内容需要更新**：\n   - 当视图的内容发生变化，需要重新绘制时，系统会调用`drawRect:`方法。例如，调用`setNeedsDisplay`或`setNeedsDisplayInRect:`方法会标记视图为需要重绘，系统会在下一个绘制周期中调用`drawRect:`方法。\n\n3. **视图尺寸变化**：\n   - 当视图的尺寸发生变化时（例如，通过自动布局约束调整），系统可能会调用`drawRect:`方法以适应新的尺寸。\n\n### 示例代码\n\n以下是一个示例，演示如何在自定义视图中实现`drawRect:`方法：\n\n```swift\nimport UIKit\n\nclass CustomView: UIView {\n\n    // 初始化方法\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    // 设置初始配置\n    private func setup() {\n        // 可以在这里进行一些初始配置\n        backgroundColor = .white\n    }\n\n    // 绘制内容\n    override func draw(_ rect: CGRect) {\n        // 获取绘图上下文\n        guard let context = UIGraphicsGetCurrentContext() else { return }\n        \n        // 设置绘图属性\n        context.setLineWidth(2.0)\n        context.setStrokeColor(UIColor.red.cgColor)\n        \n        // 绘制矩形\n        let rectangle = CGRect(x: 10, y: 10, width: 100, height: 100)\n        context.addRect(rectangle)\n        context.strokePath()\n    }\n}\n```\n\n### 触发`drawRect:`\n\n你可以通过以下方式触发视图的重绘，进而调用`drawRect:`方法：\n\n1. **手动调用`setNeedsDisplay`**：\n   - 标记整个视图为需要重绘。\n\n    ```swift\n    customView.setNeedsDisplay()\n    ```\n\n2. **手动调用`setNeedsDisplayInRect:`**：\n   - 标记视图的特定区域为需要重绘。\n\n    ```swift\n    customView.setNeedsDisplay(in: CGRect(x: 10, y: 10, width: 50, height: 50))\n    ```\n\n### 注意事项\n\n- `drawRect:`方法只应在视图内容需要更新时调用，避免不必要的性能开销。\n- 不要直接调用`drawRect:`方法。相反，使用`setNeedsDisplay`或`setNeedsDisplayInRect:`来触发重绘。\n- 在`drawRect:`方法中进行绘制操作时，应避免执行耗时任务，以保持界面流畅。\n- 如果你的视图不需要自定义绘制，避免重写`drawRect:`方法，因为它会禁用视图的离屏渲染优化。\n\n### 总结\n\n`drawRect:`方法是用于在自定义视图中绘制内容的关键方法。它会在视图首次显示、内容需要更新或尺寸变化时由系统调用。通过合理使用`setNeedsDisplay`和`setNeedsDisplayInRect:`方法，你可以控制视图的重绘行为，确保应用界面的高效和流畅。\n\n\n\n\n\n\n","slug":"iOS/OC/003-OC方法/020-View的layout的方法/README","published":1,"updated":"2024-08-06T08:41:33.804Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94d0036dgxra9ht7l15","content":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/2ef48c2f0c97\" >iOS 谈谈layoutSubviews何用 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<span id=\"more\"></span>\n\n<p>下面列出View的layout的方法:</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layoutSubviews</span><br><span class=\"line\">layoutIfNeeded</span><br><span class=\"line\">setNeedsLayout</span><br><span class=\"line\">setNeedsDisplay</span><br><span class=\"line\">drawRect</span><br><span class=\"line\">sizeThatFits</span><br><span class=\"line\">sizeToFit</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"layoutSubviews\"><a href=\"#layoutSubviews\" class=\"headerlink\" title=\"layoutSubviews\"></a>layoutSubviews</h1><p><code>layoutSubviews</code> 是 <code>UIView</code> 的一个方法，用于在视图的子视图布局发生变化时进行重新布局。它的调用时机有以下几种情况：</p>\n<h3 id=\"1-初始布局\"><a href=\"#1-初始布局\" class=\"headerlink\" title=\"1. 初始布局\"></a>1. 初始布局</h3><p>当视图第一次显示时，系统会自动调用 <code>layoutSubviews</code> 方法以布局视图及其子视图。</p>\n<h3 id=\"2-布局发生变化\"><a href=\"#2-布局发生变化\" class=\"headerlink\" title=\"2. 布局发生变化\"></a>2. 布局发生变化</h3><p>当视图的 <code>frame</code> 或 <code>bounds</code> 改变时，系统会调用 <code>layoutSubviews</code> 方法。例如，通过设置视图的 <code>frame</code> 或 <code>bounds</code> 来改变视图的大小或位置时。</p>\n<h3 id=\"3-子视图添加或移除\"><a href=\"#3-子视图添加或移除\" class=\"headerlink\" title=\"3. 子视图添加或移除\"></a>3. 子视图添加或移除</h3><p>当向视图中添加或移除子视图时，<code>layoutSubviews</code> 会被调用。例如，使用 <code>addSubview:</code> 或 <code>removeFromSuperview</code> 方法时。</p>\n<h3 id=\"4-设置需要布局更新\"><a href=\"#4-设置需要布局更新\" class=\"headerlink\" title=\"4. 设置需要布局更新\"></a>4. 设置需要布局更新</h3><p>当调用 <code>setNeedsLayout</code> 方法时，系统会标记视图需要重新布局，并在下一个布局周期调用 <code>layoutSubviews</code> 方法。</p>\n<h3 id=\"5-设置需要显示更新\"><a href=\"#5-设置需要显示更新\" class=\"headerlink\" title=\"5. 设置需要显示更新\"></a>5. 设置需要显示更新</h3><p>当调用 <code>setNeedsDisplay</code> 方法时，系统也会调用 <code>layoutSubviews</code> 方法，因为需要重新绘制视图。</p>\n<h3 id=\"6-设备旋转\"><a href=\"#6-设备旋转\" class=\"headerlink\" title=\"6. 设备旋转\"></a>6. 设备旋转</h3><p>当设备旋转导致屏幕尺寸变化时，系统会调用 <code>layoutSubviews</code> 方法以适应新的屏幕尺寸。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">layoutSubviews</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处调整子视图的布局</span></span><br><span class=\"line\">        subview.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"keyword\">self</span>.bounds.width, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，每当 <code>CustomView</code> 的 <code>frame</code> 或 <code>bounds</code> 发生变化时，系统会调用 <code>layoutSubviews</code> 方法，在该方法中可以调整 <code>subview</code> 的 <code>frame</code> 以适应新的尺寸。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>layoutSubviews</code> 方法在视图的布局或子视图的布局需要更新时被调用。理解它的调用时机有助于在自定义视图时正确处理布局更新。</p>\n<h1 id=\"layoutIfNeeded\"><a href=\"#layoutIfNeeded\" class=\"headerlink\" title=\"layoutIfNeeded\"></a>layoutIfNeeded</h1><p><code>layoutIfNeeded</code> 是 <code>UIView</code> 的一个方法，用于立即布局视图及其子视图。通常情况下，视图的布局会在下一个运行循环中异步执行，但是如果你希望立即执行布局而不等待下一个运行循环，可以调用 <code>layoutIfNeeded</code> 方法。</p>\n<h3 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>手动布局更新</strong>：</p>\n<ul>\n<li>当你需要确保视图在某个时刻立即布局时，可以在需要的地方调用 <code>layoutIfNeeded</code> 方法。例如，在视图控制器的 <code>viewWillAppear</code> 或 <code>viewDidAppear</code> 方法中，有时需要确保视图已经正确布局后再执行某些操作。</li>\n</ul>\n</li>\n<li><p><strong>动画布局</strong>：</p>\n<ul>\n<li>在使用 <code>UIView</code> 的动画方法（如 <code>animate(withDuration:animations:)</code>）时，你可以在动画代码块中使用 <code>layoutIfNeeded</code> 方法来确保动画执行过程中视图的布局是最新的。这可以避免动画执行过程中布局更新导致的不良效果。</li>\n</ul>\n</li>\n<li><p><strong>获取布局后的尺寸</strong>：</p>\n<ul>\n<li>在某些情况下，你可能需要获取视图在特定时刻的布局后的尺寸或位置信息。在获取这些信息之前，可以调用 <code>layoutIfNeeded</code> 来确保已经进行了布局计算。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">animateAndLayout</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在动画中更新约束或者属性</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.layoutIfNeeded()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，当 <code>animateAndLayout</code> 方法被调用时，通过 <code>UIView</code> 的动画方法来执行动画，同时在动画块中调用 <code>layoutIfNeeded</code> 方法，确保在动画执行期间视图的布局是最新的。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>layoutIfNeeded</code> 方法通常用于需要立即执行布局或确保在某些操作之前视图已经完成布局计算的情况下。它能够在需要时强制视图立即进行布局计算，并等待布局更新完成。</p>\n<h1 id=\"setNeedsLayout\"><a href=\"#setNeedsLayout\" class=\"headerlink\" title=\"setNeedsLayout\"></a>setNeedsLayout</h1><p><code>setNeedsLayout</code> 是 <code>UIView</code> 的一个方法，用于标记视图需要重新布局。在标记之后，系统会在下一个布局周期中异步调用 <code>layoutSubviews</code> 方法。这个方法不会立即触发布局更新，但会在下一次运行循环中进行布局。调用 <code>setNeedsLayout</code> 的场景主要包括以下几种：</p>\n<h3 id=\"调用时机-1\"><a href=\"#调用时机-1\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>视图的属性发生变化</strong>：</p>\n<ul>\n<li>当视图的某些属性（如 <code>frame</code>、<code>bounds</code>、<code>center</code> 等）发生变化时，你需要更新其子视图的布局。例如，如果你手动改变了视图的 <code>frame</code>，可以调用 <code>setNeedsLayout</code> 来确保子视图布局在下一个布局周期内更新。</li>\n</ul>\n</li>\n<li><p><strong>视图的内容发生变化</strong>：</p>\n<ul>\n<li>如果视图的内容发生了变化，并且需要重新布局子视图。例如，视图中的文本、图像等内容变化后，需要调整子视图的位置或大小。</li>\n</ul>\n</li>\n<li><p><strong>响应外部事件</strong>：</p>\n<ul>\n<li>当响应外部事件（如用户交互、通知等）需要更新视图的布局时。例如，用户点击按钮后需要调整其他视图的位置或大小。</li>\n</ul>\n</li>\n<li><p><strong>约束变化</strong>：</p>\n<ul>\n<li>当使用 Auto Layout 并且视图的约束发生变化时，可以调用 <code>setNeedsLayout</code> 来触发重新布局。例如，你修改了视图的 NSLayoutConstraint 并希望立即生效。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> someProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当属性变化时，需要更新视图布局</span></span><br><span class=\"line\">            setNeedsLayout()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">layoutSubviews</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处调整子视图的布局</span></span><br><span class=\"line\">        subview.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"keyword\">self</span>.bounds.width, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，当 <code>someProperty</code> 发生变化时，会调用 <code>setNeedsLayout</code> 方法，标记视图需要重新布局。然后在下一个布局周期中，系统会调用 <code>layoutSubviews</code> 方法，在该方法中可以调整子视图的布局。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>setNeedsLayout</code> 方法用于标记视图需要重新布局，在标记后，系统会在下一个布局周期内异步调用 <code>layoutSubviews</code> 方法。它通常用于响应视图属性、内容或外部事件的变化，以确保子视图的布局是最新的。通过调用 <code>setNeedsLayout</code>，可以延迟布局更新，从而优化性能和减少不必要的布局计算。</p>\n<p><strong>setNeedsLayout方法并不会立即刷新，立即刷新需要调用layoutIfNeeded方法！</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.view setNeedsLayout];</span><br><span class=\"line\">[self.view layoutIfNeeded];</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h1 id=\"setNeedsDisplay\"><a href=\"#setNeedsDisplay\" class=\"headerlink\" title=\"setNeedsDisplay\"></a>setNeedsDisplay</h1><p><code>setNeedsDisplay</code> 是 <code>UIView</code> 的一个方法，用于标记视图需要重新绘制。调用 <code>setNeedsDisplay</code> 方法会使系统在下一个绘制周期中调用视图的 <code>draw(_:)</code> 方法。这通常用于视图内容发生变化，需要重新绘制的情况。以下是一些常见的调用场景：</p>\n<h3 id=\"调用时机-2\"><a href=\"#调用时机-2\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>视图内容发生变化</strong>：</p>\n<ul>\n<li>当视图的内容需要更新时（例如文本、图像或颜色等变化），可以调用 <code>setNeedsDisplay</code> 来标记视图需要重新绘制。例如，你在自定义视图中绘制了一个图形，如果图形的数据发生了变化，需要调用 <code>setNeedsDisplay</code> 重新绘制。</li>\n</ul>\n</li>\n<li><p><strong>视图的属性发生变化</strong>：</p>\n<ul>\n<li>如果视图的某些属性（如背景色、透明度等）发生变化，且这些变化需要通过重新绘制才能反映出来。例如，你改变了视图的 <code>backgroundColor</code> 或 <code>alpha</code> 值，可以调用 <code>setNeedsDisplay</code> 重新绘制视图。</li>\n</ul>\n</li>\n<li><p><strong>响应外部事件</strong>：</p>\n<ul>\n<li>当响应外部事件（如用户交互、通知等）需要更新视图的内容时。例如，用户点击按钮后，需要更新视图中显示的内容。</li>\n</ul>\n</li>\n<li><p><strong>动画效果</strong>：</p>\n<ul>\n<li>在某些动画效果中，需要逐帧更新视图的内容。例如，你在一个自定义视图中实现动画，通过定时器或 CADisplayLink 调用 <code>setNeedsDisplay</code> 来逐帧重绘视图。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fillColor: <span class=\"type\">UIColor</span> <span class=\"operator\">=</span> .red &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当填充颜色变化时，标记视图需要重新绘制</span></span><br><span class=\"line\">            setNeedsDisplay()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.draw(rect)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处执行自定义绘制</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        context.setFillColor(fillColor.cgColor)</span><br><span class=\"line\">        context.fill(rect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个示例中，当 <code>fillColor</code> 属性变化时，会调用 <code>setNeedsDisplay</code> 方法，标记视图需要重新绘制。在下一个绘制周期中，系统会调用 <code>draw(_:)</code> 方法，在该方法中可以执行自定义绘制。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>setNeedsDisplay</code> 方法用于标记视图需要重新绘制，在标记后，系统会在下一个绘制周期内调用 <code>draw(_:)</code> 方法。它通常用于视图内容或属性发生变化，需要通过重新绘制来反映这些变化的情况。通过调用 <code>setNeedsDisplay</code>，可以确保视图内容及时更新，保持与应用状态的一致性。</p>\n<h1 id=\"drawRect\"><a href=\"#drawRect\" class=\"headerlink\" title=\"drawRect\"></a>drawRect</h1><p>在iOS开发中，<code>drawRect:</code>方法是<code>UIView</code>类的一个实例方法，用于在自定义视图中绘制内容。<code>drawRect:</code>方法会在系统需要视图重绘时调用，比如视图首次显示或需要更新其内容时。以下是一些具体的场景：</p>\n<h3 id=\"何时调用drawRect\"><a href=\"#何时调用drawRect\" class=\"headerlink\" title=\"何时调用drawRect:\"></a>何时调用<code>drawRect:</code></h3><ol>\n<li><p><strong>视图首次显示</strong>：</p>\n<ul>\n<li>当视图首次显示在屏幕上时，系统会调用<code>drawRect:</code>方法来绘制视图的内容。</li>\n</ul>\n</li>\n<li><p><strong>视图内容需要更新</strong>：</p>\n<ul>\n<li>当视图的内容发生变化，需要重新绘制时，系统会调用<code>drawRect:</code>方法。例如，调用<code>setNeedsDisplay</code>或<code>setNeedsDisplayInRect:</code>方法会标记视图为需要重绘，系统会在下一个绘制周期中调用<code>drawRect:</code>方法。</li>\n</ul>\n</li>\n<li><p><strong>视图尺寸变化</strong>：</p>\n<ul>\n<li>当视图的尺寸发生变化时（例如，通过自动布局约束调整），系统可能会调用<code>drawRect:</code>方法以适应新的尺寸。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下是一个示例，演示如何在自定义视图中实现<code>drawRect:</code>方法：</p>\n<div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化方法</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: coder)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始配置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">setup</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 可以在这里进行一些初始配置</span></span><br><span class=\"line\">        backgroundColor <span class=\"operator\">=</span> .white</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绘制内容</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取绘图上下文</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置绘图属性</span></span><br><span class=\"line\">        context.setLineWidth(<span class=\"number\">2.0</span>)</span><br><span class=\"line\">        context.setStrokeColor(<span class=\"type\">UIColor</span>.red.cgColor)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 绘制矩形</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> rectangle <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">        context.addRect(rectangle)</span><br><span class=\"line\">        context.strokePath()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"触发drawRect\"><a href=\"#触发drawRect\" class=\"headerlink\" title=\"触发drawRect:\"></a>触发<code>drawRect:</code></h3><p>你可以通过以下方式触发视图的重绘，进而调用<code>drawRect:</code>方法：</p>\n<ol>\n<li><p>**手动调用<code>setNeedsDisplay</code>**：</p>\n<ul>\n<li>标记整个视图为需要重绘。</li>\n</ul>\n <div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customView.setNeedsDisplay()</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>**手动调用<code>setNeedsDisplayInRect:</code>**：</p>\n<ul>\n<li>标记视图的特定区域为需要重绘。</li>\n</ul>\n <div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customView.setNeedsDisplay(in: <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">50</span>, height: <span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>drawRect:</code>方法只应在视图内容需要更新时调用，避免不必要的性能开销。</li>\n<li>不要直接调用<code>drawRect:</code>方法。相反，使用<code>setNeedsDisplay</code>或<code>setNeedsDisplayInRect:</code>来触发重绘。</li>\n<li>在<code>drawRect:</code>方法中进行绘制操作时，应避免执行耗时任务，以保持界面流畅。</li>\n<li>如果你的视图不需要自定义绘制，避免重写<code>drawRect:</code>方法，因为它会禁用视图的离屏渲染优化。</li>\n</ul>\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>drawRect:</code>方法是用于在自定义视图中绘制内容的关键方法。它会在视图首次显示、内容需要更新或尺寸变化时由系统调用。通过合理使用<code>setNeedsDisplay</code>和<code>setNeedsDisplayInRect:</code>方法，你可以控制视图的重绘行为，确保应用界面的高效和流畅。</p>\n","excerpt":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/2ef48c2f0c97\" >iOS 谈谈layoutSubviews何用 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>","more":"<p>下面列出View的layout的方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layoutSubviews</span><br><span class=\"line\">layoutIfNeeded</span><br><span class=\"line\">setNeedsLayout</span><br><span class=\"line\">setNeedsDisplay</span><br><span class=\"line\">drawRect</span><br><span class=\"line\">sizeThatFits</span><br><span class=\"line\">sizeToFit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"layoutSubviews\"><a href=\"#layoutSubviews\" class=\"headerlink\" title=\"layoutSubviews\"></a>layoutSubviews</h1><p><code>layoutSubviews</code> 是 <code>UIView</code> 的一个方法，用于在视图的子视图布局发生变化时进行重新布局。它的调用时机有以下几种情况：</p>\n<h3 id=\"1-初始布局\"><a href=\"#1-初始布局\" class=\"headerlink\" title=\"1. 初始布局\"></a>1. 初始布局</h3><p>当视图第一次显示时，系统会自动调用 <code>layoutSubviews</code> 方法以布局视图及其子视图。</p>\n<h3 id=\"2-布局发生变化\"><a href=\"#2-布局发生变化\" class=\"headerlink\" title=\"2. 布局发生变化\"></a>2. 布局发生变化</h3><p>当视图的 <code>frame</code> 或 <code>bounds</code> 改变时，系统会调用 <code>layoutSubviews</code> 方法。例如，通过设置视图的 <code>frame</code> 或 <code>bounds</code> 来改变视图的大小或位置时。</p>\n<h3 id=\"3-子视图添加或移除\"><a href=\"#3-子视图添加或移除\" class=\"headerlink\" title=\"3. 子视图添加或移除\"></a>3. 子视图添加或移除</h3><p>当向视图中添加或移除子视图时，<code>layoutSubviews</code> 会被调用。例如，使用 <code>addSubview:</code> 或 <code>removeFromSuperview</code> 方法时。</p>\n<h3 id=\"4-设置需要布局更新\"><a href=\"#4-设置需要布局更新\" class=\"headerlink\" title=\"4. 设置需要布局更新\"></a>4. 设置需要布局更新</h3><p>当调用 <code>setNeedsLayout</code> 方法时，系统会标记视图需要重新布局，并在下一个布局周期调用 <code>layoutSubviews</code> 方法。</p>\n<h3 id=\"5-设置需要显示更新\"><a href=\"#5-设置需要显示更新\" class=\"headerlink\" title=\"5. 设置需要显示更新\"></a>5. 设置需要显示更新</h3><p>当调用 <code>setNeedsDisplay</code> 方法时，系统也会调用 <code>layoutSubviews</code> 方法，因为需要重新绘制视图。</p>\n<h3 id=\"6-设备旋转\"><a href=\"#6-设备旋转\" class=\"headerlink\" title=\"6. 设备旋转\"></a>6. 设备旋转</h3><p>当设备旋转导致屏幕尺寸变化时，系统会调用 <code>layoutSubviews</code> 方法以适应新的屏幕尺寸。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">layoutSubviews</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处调整子视图的布局</span></span><br><span class=\"line\">        subview.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"keyword\">self</span>.bounds.width, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，每当 <code>CustomView</code> 的 <code>frame</code> 或 <code>bounds</code> 发生变化时，系统会调用 <code>layoutSubviews</code> 方法，在该方法中可以调整 <code>subview</code> 的 <code>frame</code> 以适应新的尺寸。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>layoutSubviews</code> 方法在视图的布局或子视图的布局需要更新时被调用。理解它的调用时机有助于在自定义视图时正确处理布局更新。</p>\n<h1 id=\"layoutIfNeeded\"><a href=\"#layoutIfNeeded\" class=\"headerlink\" title=\"layoutIfNeeded\"></a>layoutIfNeeded</h1><p><code>layoutIfNeeded</code> 是 <code>UIView</code> 的一个方法，用于立即布局视图及其子视图。通常情况下，视图的布局会在下一个运行循环中异步执行，但是如果你希望立即执行布局而不等待下一个运行循环，可以调用 <code>layoutIfNeeded</code> 方法。</p>\n<h3 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>手动布局更新</strong>：</p>\n<ul>\n<li>当你需要确保视图在某个时刻立即布局时，可以在需要的地方调用 <code>layoutIfNeeded</code> 方法。例如，在视图控制器的 <code>viewWillAppear</code> 或 <code>viewDidAppear</code> 方法中，有时需要确保视图已经正确布局后再执行某些操作。</li>\n</ul>\n</li>\n<li><p><strong>动画布局</strong>：</p>\n<ul>\n<li>在使用 <code>UIView</code> 的动画方法（如 <code>animate(withDuration:animations:)</code>）时，你可以在动画代码块中使用 <code>layoutIfNeeded</code> 方法来确保动画执行过程中视图的布局是最新的。这可以避免动画执行过程中布局更新导致的不良效果。</li>\n</ul>\n</li>\n<li><p><strong>获取布局后的尺寸</strong>：</p>\n<ul>\n<li>在某些情况下，你可能需要获取视图在特定时刻的布局后的尺寸或位置信息。在获取这些信息之前，可以调用 <code>layoutIfNeeded</code> 来确保已经进行了布局计算。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">animateAndLayout</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在动画中更新约束或者属性</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.layoutIfNeeded()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，当 <code>animateAndLayout</code> 方法被调用时，通过 <code>UIView</code> 的动画方法来执行动画，同时在动画块中调用 <code>layoutIfNeeded</code> 方法，确保在动画执行期间视图的布局是最新的。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>layoutIfNeeded</code> 方法通常用于需要立即执行布局或确保在某些操作之前视图已经完成布局计算的情况下。它能够在需要时强制视图立即进行布局计算，并等待布局更新完成。</p>\n<h1 id=\"setNeedsLayout\"><a href=\"#setNeedsLayout\" class=\"headerlink\" title=\"setNeedsLayout\"></a>setNeedsLayout</h1><p><code>setNeedsLayout</code> 是 <code>UIView</code> 的一个方法，用于标记视图需要重新布局。在标记之后，系统会在下一个布局周期中异步调用 <code>layoutSubviews</code> 方法。这个方法不会立即触发布局更新，但会在下一次运行循环中进行布局。调用 <code>setNeedsLayout</code> 的场景主要包括以下几种：</p>\n<h3 id=\"调用时机-1\"><a href=\"#调用时机-1\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>视图的属性发生变化</strong>：</p>\n<ul>\n<li>当视图的某些属性（如 <code>frame</code>、<code>bounds</code>、<code>center</code> 等）发生变化时，你需要更新其子视图的布局。例如，如果你手动改变了视图的 <code>frame</code>，可以调用 <code>setNeedsLayout</code> 来确保子视图布局在下一个布局周期内更新。</li>\n</ul>\n</li>\n<li><p><strong>视图的内容发生变化</strong>：</p>\n<ul>\n<li>如果视图的内容发生了变化，并且需要重新布局子视图。例如，视图中的文本、图像等内容变化后，需要调整子视图的位置或大小。</li>\n</ul>\n</li>\n<li><p><strong>响应外部事件</strong>：</p>\n<ul>\n<li>当响应外部事件（如用户交互、通知等）需要更新视图的布局时。例如，用户点击按钮后需要调整其他视图的位置或大小。</li>\n</ul>\n</li>\n<li><p><strong>约束变化</strong>：</p>\n<ul>\n<li>当使用 Auto Layout 并且视图的约束发生变化时，可以调用 <code>setNeedsLayout</code> 来触发重新布局。例如，你修改了视图的 NSLayoutConstraint 并希望立即生效。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> someProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当属性变化时，需要更新视图布局</span></span><br><span class=\"line\">            setNeedsLayout()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">layoutSubviews</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处调整子视图的布局</span></span><br><span class=\"line\">        subview.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"keyword\">self</span>.bounds.width, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，当 <code>someProperty</code> 发生变化时，会调用 <code>setNeedsLayout</code> 方法，标记视图需要重新布局。然后在下一个布局周期中，系统会调用 <code>layoutSubviews</code> 方法，在该方法中可以调整子视图的布局。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>setNeedsLayout</code> 方法用于标记视图需要重新布局，在标记后，系统会在下一个布局周期内异步调用 <code>layoutSubviews</code> 方法。它通常用于响应视图属性、内容或外部事件的变化，以确保子视图的布局是最新的。通过调用 <code>setNeedsLayout</code>，可以延迟布局更新，从而优化性能和减少不必要的布局计算。</p>\n<p><strong>setNeedsLayout方法并不会立即刷新，立即刷新需要调用layoutIfNeeded方法！</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.view setNeedsLayout];</span><br><span class=\"line\">[self.view layoutIfNeeded];</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"setNeedsDisplay\"><a href=\"#setNeedsDisplay\" class=\"headerlink\" title=\"setNeedsDisplay\"></a>setNeedsDisplay</h1><p><code>setNeedsDisplay</code> 是 <code>UIView</code> 的一个方法，用于标记视图需要重新绘制。调用 <code>setNeedsDisplay</code> 方法会使系统在下一个绘制周期中调用视图的 <code>draw(_:)</code> 方法。这通常用于视图内容发生变化，需要重新绘制的情况。以下是一些常见的调用场景：</p>\n<h3 id=\"调用时机-2\"><a href=\"#调用时机-2\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h3><ol>\n<li><p><strong>视图内容发生变化</strong>：</p>\n<ul>\n<li>当视图的内容需要更新时（例如文本、图像或颜色等变化），可以调用 <code>setNeedsDisplay</code> 来标记视图需要重新绘制。例如，你在自定义视图中绘制了一个图形，如果图形的数据发生了变化，需要调用 <code>setNeedsDisplay</code> 重新绘制。</li>\n</ul>\n</li>\n<li><p><strong>视图的属性发生变化</strong>：</p>\n<ul>\n<li>如果视图的某些属性（如背景色、透明度等）发生变化，且这些变化需要通过重新绘制才能反映出来。例如，你改变了视图的 <code>backgroundColor</code> 或 <code>alpha</code> 值，可以调用 <code>setNeedsDisplay</code> 重新绘制视图。</li>\n</ul>\n</li>\n<li><p><strong>响应外部事件</strong>：</p>\n<ul>\n<li>当响应外部事件（如用户交互、通知等）需要更新视图的内容时。例如，用户点击按钮后，需要更新视图中显示的内容。</li>\n</ul>\n</li>\n<li><p><strong>动画效果</strong>：</p>\n<ul>\n<li>在某些动画效果中，需要逐帧更新视图的内容。例如，你在一个自定义视图中实现动画，通过定时器或 CADisplayLink 调用 <code>setNeedsDisplay</code> 来逐帧重绘视图。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fillColor: <span class=\"type\">UIColor</span> <span class=\"operator\">=</span> .red &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当填充颜色变化时，标记视图需要重新绘制</span></span><br><span class=\"line\">            setNeedsDisplay()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.draw(rect)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 在此处执行自定义绘制</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        context.setFillColor(fillColor.cgColor)</span><br><span class=\"line\">        context.fill(rect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，当 <code>fillColor</code> 属性变化时，会调用 <code>setNeedsDisplay</code> 方法，标记视图需要重新绘制。在下一个绘制周期中，系统会调用 <code>draw(_:)</code> 方法，在该方法中可以执行自定义绘制。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>setNeedsDisplay</code> 方法用于标记视图需要重新绘制，在标记后，系统会在下一个绘制周期内调用 <code>draw(_:)</code> 方法。它通常用于视图内容或属性发生变化，需要通过重新绘制来反映这些变化的情况。通过调用 <code>setNeedsDisplay</code>，可以确保视图内容及时更新，保持与应用状态的一致性。</p>\n<h1 id=\"drawRect\"><a href=\"#drawRect\" class=\"headerlink\" title=\"drawRect\"></a>drawRect</h1><p>在iOS开发中，<code>drawRect:</code>方法是<code>UIView</code>类的一个实例方法，用于在自定义视图中绘制内容。<code>drawRect:</code>方法会在系统需要视图重绘时调用，比如视图首次显示或需要更新其内容时。以下是一些具体的场景：</p>\n<h3 id=\"何时调用drawRect\"><a href=\"#何时调用drawRect\" class=\"headerlink\" title=\"何时调用drawRect:\"></a>何时调用<code>drawRect:</code></h3><ol>\n<li><p><strong>视图首次显示</strong>：</p>\n<ul>\n<li>当视图首次显示在屏幕上时，系统会调用<code>drawRect:</code>方法来绘制视图的内容。</li>\n</ul>\n</li>\n<li><p><strong>视图内容需要更新</strong>：</p>\n<ul>\n<li>当视图的内容发生变化，需要重新绘制时，系统会调用<code>drawRect:</code>方法。例如，调用<code>setNeedsDisplay</code>或<code>setNeedsDisplayInRect:</code>方法会标记视图为需要重绘，系统会在下一个绘制周期中调用<code>drawRect:</code>方法。</li>\n</ul>\n</li>\n<li><p><strong>视图尺寸变化</strong>：</p>\n<ul>\n<li>当视图的尺寸发生变化时（例如，通过自动布局约束调整），系统可能会调用<code>drawRect:</code>方法以适应新的尺寸。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下是一个示例，演示如何在自定义视图中实现<code>drawRect:</code>方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span>: <span class=\"title class_ inherited__\">UIView</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化方法</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: coder)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始配置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">setup</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 可以在这里进行一些初始配置</span></span><br><span class=\"line\">        backgroundColor <span class=\"operator\">=</span> .white</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绘制内容</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取绘图上下文</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> context <span class=\"operator\">=</span> <span class=\"type\">UIGraphicsGetCurrentContext</span>() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置绘图属性</span></span><br><span class=\"line\">        context.setLineWidth(<span class=\"number\">2.0</span>)</span><br><span class=\"line\">        context.setStrokeColor(<span class=\"type\">UIColor</span>.red.cgColor)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 绘制矩形</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> rectangle <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">        context.addRect(rectangle)</span><br><span class=\"line\">        context.strokePath()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"触发drawRect\"><a href=\"#触发drawRect\" class=\"headerlink\" title=\"触发drawRect:\"></a>触发<code>drawRect:</code></h3><p>你可以通过以下方式触发视图的重绘，进而调用<code>drawRect:</code>方法：</p>\n<ol>\n<li><p>**手动调用<code>setNeedsDisplay</code>**：</p>\n<ul>\n<li>标记整个视图为需要重绘。</li>\n</ul>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customView.setNeedsDisplay()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**手动调用<code>setNeedsDisplayInRect:</code>**：</p>\n<ul>\n<li>标记视图的特定区域为需要重绘。</li>\n</ul>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customView.setNeedsDisplay(in: <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">50</span>, height: <span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>drawRect:</code>方法只应在视图内容需要更新时调用，避免不必要的性能开销。</li>\n<li>不要直接调用<code>drawRect:</code>方法。相反，使用<code>setNeedsDisplay</code>或<code>setNeedsDisplayInRect:</code>来触发重绘。</li>\n<li>在<code>drawRect:</code>方法中进行绘制操作时，应避免执行耗时任务，以保持界面流畅。</li>\n<li>如果你的视图不需要自定义绘制，避免重写<code>drawRect:</code>方法，因为它会禁用视图的离屏渲染优化。</li>\n</ul>\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>drawRect:</code>方法是用于在自定义视图中绘制内容的关键方法。它会在视图首次显示、内容需要更新或尺寸变化时由系统调用。通过合理使用<code>setNeedsDisplay</code>和<code>setNeedsDisplayInRect:</code>方法，你可以控制视图的重绘行为，确保应用界面的高效和流畅。</p>"},{"title":"iOS定时器","date":"2024-07-30T07:20:56.539Z","_content":"\n在 iOS 中，有多种方式可以实现定时器（Timer）功能，每种方式都有其适用的场景和特性。以下是几种常用的定时器实现方式：\n\n### 1. `Timer`\n\n`Timer` 是 Foundation 框架中的一个类，用于创建和管理定时器。它可以在指定的时间间隔内重复调用某个方法或执行某个闭包。\n\n#### 使用示例\n\n```swift\nimport Foundation\n\nclass TimerExample {\n    var timer: Timer?\n    \n    func startTimer() {\n        timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true)\n    }\n    \n    @objc func timerFired() {\n        print(\"Timer fired!\")\n    }\n    \n    func stopTimer() {\n        timer?.invalidate()\n        timer = nil\n    }\n}\n\nlet example = TimerExample()\nexample.startTimer()\n```\n\n#### 关键点\n\n- `scheduledTimer(timeInterval:target:selector:userInfo:repeats:)`：创建并启动一个定时器。\n- `invalidate()`：停止定时器。\n- 定时器默认运行在默认模式（`default`）下，如果需要在滚动等操作时继续运行，需要添加到运行循环中的不同模式（例如 `RunLoop.Mode.common`）。\n\n### 2. `CADisplayLink`\n\n`CADisplayLink` 是 Core Animation 框架中的一个类，它允许你在屏幕刷新时执行某个方法，通常用于动画的逐帧更新。\n\n#### 使用示例\n\n```swift\nimport UIKit\n\nclass DisplayLinkExample {\n    var displayLink: CADisplayLink?\n    \n    func startDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(displayLinkFired))\n        displayLink?.add(to: .main, forMode: .default)\n    }\n    \n    @objc func displayLinkFired() {\n        print(\"DisplayLink fired!\")\n    }\n    \n    func stopDisplayLink() {\n        displayLink?.invalidate()\n        displayLink = nil\n    }\n}\n\nlet example = DisplayLinkExample()\nexample.startDisplayLink()\n```\n\n#### 关键点\n\n- `CADisplayLink`：与屏幕刷新率同步，非常适合用于动画。\n- `add(to:forMode:)`：将 `CADisplayLink` 添加到运行循环。\n\n### 3. `DispatchSourceTimer`\n\n`DispatchSourceTimer` 是 GCD（Grand Central Dispatch）中的一个类，提供了一个更低级别的、基于块的定时器。\n\n#### 使用示例\n\n```swift\nimport Dispatch\n\nclass GCDTimerExample {\n    var timer: DispatchSourceTimer?\n    \n    func startTimer() {\n        let queue = DispatchQueue(label: \"com.example.timer\")\n        timer = DispatchSource.makeTimerSource(queue: queue)\n        timer?.schedule(deadline: .now(), repeating: 1.0)\n        timer?.setEventHandler {\n            print(\"GCD Timer fired!\")\n        }\n        timer?.resume()\n    }\n    \n    func stopTimer() {\n        timer?.cancel()\n        timer = nil\n    }\n}\n\nlet example = GCDTimerExample()\nexample.startTimer()\n```\n\n#### 关键点\n\n- `DispatchSourceTimer`：提供了一个非常灵活和高效的定时器解决方案。\n- `schedule(deadline:repeating:)`：配置定时器的启动时间和重复间隔。\n- `setEventHandler(handler:)`：设置定时器触发时执行的代码块。\n- `resume()`：启动定时器。\n\n### 4. `NSTimer`（旧版 `Timer`）\n\n`NSTimer` 是 `Timer` 的旧版名称，在现代 Swift 代码中通常使用 `Timer` 作为替代。\n\n#### 使用示例\n\n```swift\nimport Foundation\n\nclass NSTimerExample {\n    var timer: NSTimer?\n    \n    func startTimer() {\n        timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true)\n    }\n    \n    @objc func timerFired() {\n        print(\"NSTimer fired!\")\n    }\n    \n    func stopTimer() {\n        timer?.invalidate()\n        timer = nil\n    }\n}\n\nlet example = NSTimerExample()\nexample.startTimer()\n```\n\n### 总结\n\n- **`Timer`**：适合大多数定时任务，易于使用。\n- **`CADisplayLink`**：适合需要与屏幕刷新率同步的任务，如动画。\n- **`DispatchSourceTimer`**：适合需要高性能和高灵活性的场景。\n- **`NSTimer`**：现代代码中通常使用 `Timer` 代替。\n\n根据具体需求选择合适的定时器工具，可以更好地满足应用的性能和功能要求。","source":"_posts/iOS/OC/003-OC方法/019-定时器/README.md","raw":"---\ntitle: iOS定时器\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 定时器\n---\n\n在 iOS 中，有多种方式可以实现定时器（Timer）功能，每种方式都有其适用的场景和特性。以下是几种常用的定时器实现方式：\n\n### 1. `Timer`\n\n`Timer` 是 Foundation 框架中的一个类，用于创建和管理定时器。它可以在指定的时间间隔内重复调用某个方法或执行某个闭包。\n\n#### 使用示例\n\n```swift\nimport Foundation\n\nclass TimerExample {\n    var timer: Timer?\n    \n    func startTimer() {\n        timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true)\n    }\n    \n    @objc func timerFired() {\n        print(\"Timer fired!\")\n    }\n    \n    func stopTimer() {\n        timer?.invalidate()\n        timer = nil\n    }\n}\n\nlet example = TimerExample()\nexample.startTimer()\n```\n\n#### 关键点\n\n- `scheduledTimer(timeInterval:target:selector:userInfo:repeats:)`：创建并启动一个定时器。\n- `invalidate()`：停止定时器。\n- 定时器默认运行在默认模式（`default`）下，如果需要在滚动等操作时继续运行，需要添加到运行循环中的不同模式（例如 `RunLoop.Mode.common`）。\n\n### 2. `CADisplayLink`\n\n`CADisplayLink` 是 Core Animation 框架中的一个类，它允许你在屏幕刷新时执行某个方法，通常用于动画的逐帧更新。\n\n#### 使用示例\n\n```swift\nimport UIKit\n\nclass DisplayLinkExample {\n    var displayLink: CADisplayLink?\n    \n    func startDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(displayLinkFired))\n        displayLink?.add(to: .main, forMode: .default)\n    }\n    \n    @objc func displayLinkFired() {\n        print(\"DisplayLink fired!\")\n    }\n    \n    func stopDisplayLink() {\n        displayLink?.invalidate()\n        displayLink = nil\n    }\n}\n\nlet example = DisplayLinkExample()\nexample.startDisplayLink()\n```\n\n#### 关键点\n\n- `CADisplayLink`：与屏幕刷新率同步，非常适合用于动画。\n- `add(to:forMode:)`：将 `CADisplayLink` 添加到运行循环。\n\n### 3. `DispatchSourceTimer`\n\n`DispatchSourceTimer` 是 GCD（Grand Central Dispatch）中的一个类，提供了一个更低级别的、基于块的定时器。\n\n#### 使用示例\n\n```swift\nimport Dispatch\n\nclass GCDTimerExample {\n    var timer: DispatchSourceTimer?\n    \n    func startTimer() {\n        let queue = DispatchQueue(label: \"com.example.timer\")\n        timer = DispatchSource.makeTimerSource(queue: queue)\n        timer?.schedule(deadline: .now(), repeating: 1.0)\n        timer?.setEventHandler {\n            print(\"GCD Timer fired!\")\n        }\n        timer?.resume()\n    }\n    \n    func stopTimer() {\n        timer?.cancel()\n        timer = nil\n    }\n}\n\nlet example = GCDTimerExample()\nexample.startTimer()\n```\n\n#### 关键点\n\n- `DispatchSourceTimer`：提供了一个非常灵活和高效的定时器解决方案。\n- `schedule(deadline:repeating:)`：配置定时器的启动时间和重复间隔。\n- `setEventHandler(handler:)`：设置定时器触发时执行的代码块。\n- `resume()`：启动定时器。\n\n### 4. `NSTimer`（旧版 `Timer`）\n\n`NSTimer` 是 `Timer` 的旧版名称，在现代 Swift 代码中通常使用 `Timer` 作为替代。\n\n#### 使用示例\n\n```swift\nimport Foundation\n\nclass NSTimerExample {\n    var timer: NSTimer?\n    \n    func startTimer() {\n        timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true)\n    }\n    \n    @objc func timerFired() {\n        print(\"NSTimer fired!\")\n    }\n    \n    func stopTimer() {\n        timer?.invalidate()\n        timer = nil\n    }\n}\n\nlet example = NSTimerExample()\nexample.startTimer()\n```\n\n### 总结\n\n- **`Timer`**：适合大多数定时任务，易于使用。\n- **`CADisplayLink`**：适合需要与屏幕刷新率同步的任务，如动画。\n- **`DispatchSourceTimer`**：适合需要高性能和高灵活性的场景。\n- **`NSTimer`**：现代代码中通常使用 `Timer` 代替。\n\n根据具体需求选择合适的定时器工具，可以更好地满足应用的性能和功能要求。","slug":"iOS/OC/003-OC方法/019-定时器/README","published":1,"updated":"2024-08-06T08:41:26.881Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94e0039dgxr0tq7ff3i","content":"<p>在 iOS 中，有多种方式可以实现定时器（Timer）功能，每种方式都有其适用的场景和特性。以下是几种常用的定时器实现方式：</p>\n<h3 id=\"1-Timer\"><a href=\"#1-Timer\" class=\"headerlink\" title=\"1. Timer\"></a>1. <code>Timer</code></h3><p><code>Timer</code> 是 Foundation 框架中的一个类，用于创建和管理定时器。它可以在指定的时间间隔内重复调用某个方法或执行某个闭包。</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">Timer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">Timer</span>.scheduledTimer(timeInterval: <span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(timerFired), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">timerFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Timer fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">TimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>scheduledTimer(timeInterval:target:selector:userInfo:repeats:)</code>：创建并启动一个定时器。</li>\n<li><code>invalidate()</code>：停止定时器。</li>\n<li>定时器默认运行在默认模式（<code>default</code>）下，如果需要在滚动等操作时继续运行，需要添加到运行循环中的不同模式（例如 <code>RunLoop.Mode.common</code>）。</li>\n</ul>\n<h3 id=\"2-CADisplayLink\"><a href=\"#2-CADisplayLink\" class=\"headerlink\" title=\"2. CADisplayLink\"></a>2. <code>CADisplayLink</code></h3><p><code>CADisplayLink</code> 是 Core Animation 框架中的一个类，它允许你在屏幕刷新时执行某个方法，通常用于动画的逐帧更新。</p>\n<h4 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DisplayLinkExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> displayLink: <span class=\"type\">CADisplayLink</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startDisplayLink</span>() &#123;</span><br><span class=\"line\">        displayLink <span class=\"operator\">=</span> <span class=\"type\">CADisplayLink</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(displayLinkFired))</span><br><span class=\"line\">        displayLink<span class=\"operator\">?</span>.add(to: .main, forMode: .default)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">displayLinkFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;DisplayLink fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopDisplayLink</span>() &#123;</span><br><span class=\"line\">        displayLink<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        displayLink <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">DisplayLinkExample</span>()</span><br><span class=\"line\">example.startDisplayLink()</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"关键点-1\"><a href=\"#关键点-1\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>CADisplayLink</code>：与屏幕刷新率同步，非常适合用于动画。</li>\n<li><code>add(to:forMode:)</code>：将 <code>CADisplayLink</code> 添加到运行循环。</li>\n</ul>\n<h3 id=\"3-DispatchSourceTimer\"><a href=\"#3-DispatchSourceTimer\" class=\"headerlink\" title=\"3. DispatchSourceTimer\"></a>3. <code>DispatchSourceTimer</code></h3><p><code>DispatchSourceTimer</code> 是 GCD（Grand Central Dispatch）中的一个类，提供了一个更低级别的、基于块的定时器。</p>\n<h4 id=\"使用示例-2\"><a href=\"#使用示例-2\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Dispatch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GCDTimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">DispatchSourceTimer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.timer&quot;</span>)</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">DispatchSource</span>.makeTimerSource(queue: queue)</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.schedule(deadline: .now(), repeating: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.setEventHandler &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;GCD Timer fired!&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.resume()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.cancel()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">GCDTimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"关键点-2\"><a href=\"#关键点-2\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>DispatchSourceTimer</code>：提供了一个非常灵活和高效的定时器解决方案。</li>\n<li><code>schedule(deadline:repeating:)</code>：配置定时器的启动时间和重复间隔。</li>\n<li><code>setEventHandler(handler:)</code>：设置定时器触发时执行的代码块。</li>\n<li><code>resume()</code>：启动定时器。</li>\n</ul>\n<h3 id=\"4-NSTimer（旧版-Timer）\"><a href=\"#4-NSTimer（旧版-Timer）\" class=\"headerlink\" title=\"4. NSTimer（旧版 Timer）\"></a>4. <code>NSTimer</code>（旧版 <code>Timer</code>）</h3><p><code>NSTimer</code> 是 <code>Timer</code> 的旧版名称，在现代 Swift 代码中通常使用 <code>Timer</code> 作为替代。</p>\n<h4 id=\"使用示例-3\"><a href=\"#使用示例-3\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NSTimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">NSTimer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">NSTimer</span>.scheduledTimerWithTimeInterval(<span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(timerFired), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">timerFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;NSTimer fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">NSTimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>Timer</code>**：适合大多数定时任务，易于使用。</li>\n<li>**<code>CADisplayLink</code>**：适合需要与屏幕刷新率同步的任务，如动画。</li>\n<li>**<code>DispatchSourceTimer</code>**：适合需要高性能和高灵活性的场景。</li>\n<li>**<code>NSTimer</code>**：现代代码中通常使用 <code>Timer</code> 代替。</li>\n</ul>\n<p>根据具体需求选择合适的定时器工具，可以更好地满足应用的性能和功能要求。</p>\n","excerpt":"","more":"<p>在 iOS 中，有多种方式可以实现定时器（Timer）功能，每种方式都有其适用的场景和特性。以下是几种常用的定时器实现方式：</p>\n<h3 id=\"1-Timer\"><a href=\"#1-Timer\" class=\"headerlink\" title=\"1. Timer\"></a>1. <code>Timer</code></h3><p><code>Timer</code> 是 Foundation 框架中的一个类，用于创建和管理定时器。它可以在指定的时间间隔内重复调用某个方法或执行某个闭包。</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">Timer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">Timer</span>.scheduledTimer(timeInterval: <span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(timerFired), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">timerFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Timer fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">TimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>scheduledTimer(timeInterval:target:selector:userInfo:repeats:)</code>：创建并启动一个定时器。</li>\n<li><code>invalidate()</code>：停止定时器。</li>\n<li>定时器默认运行在默认模式（<code>default</code>）下，如果需要在滚动等操作时继续运行，需要添加到运行循环中的不同模式（例如 <code>RunLoop.Mode.common</code>）。</li>\n</ul>\n<h3 id=\"2-CADisplayLink\"><a href=\"#2-CADisplayLink\" class=\"headerlink\" title=\"2. CADisplayLink\"></a>2. <code>CADisplayLink</code></h3><p><code>CADisplayLink</code> 是 Core Animation 框架中的一个类，它允许你在屏幕刷新时执行某个方法，通常用于动画的逐帧更新。</p>\n<h4 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DisplayLinkExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> displayLink: <span class=\"type\">CADisplayLink</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startDisplayLink</span>() &#123;</span><br><span class=\"line\">        displayLink <span class=\"operator\">=</span> <span class=\"type\">CADisplayLink</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(displayLinkFired))</span><br><span class=\"line\">        displayLink<span class=\"operator\">?</span>.add(to: .main, forMode: .default)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">displayLinkFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;DisplayLink fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopDisplayLink</span>() &#123;</span><br><span class=\"line\">        displayLink<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        displayLink <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">DisplayLinkExample</span>()</span><br><span class=\"line\">example.startDisplayLink()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键点-1\"><a href=\"#关键点-1\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>CADisplayLink</code>：与屏幕刷新率同步，非常适合用于动画。</li>\n<li><code>add(to:forMode:)</code>：将 <code>CADisplayLink</code> 添加到运行循环。</li>\n</ul>\n<h3 id=\"3-DispatchSourceTimer\"><a href=\"#3-DispatchSourceTimer\" class=\"headerlink\" title=\"3. DispatchSourceTimer\"></a>3. <code>DispatchSourceTimer</code></h3><p><code>DispatchSourceTimer</code> 是 GCD（Grand Central Dispatch）中的一个类，提供了一个更低级别的、基于块的定时器。</p>\n<h4 id=\"使用示例-2\"><a href=\"#使用示例-2\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Dispatch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GCDTimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">DispatchSourceTimer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.timer&quot;</span>)</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">DispatchSource</span>.makeTimerSource(queue: queue)</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.schedule(deadline: .now(), repeating: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.setEventHandler &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;GCD Timer fired!&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.resume()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.cancel()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">GCDTimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键点-2\"><a href=\"#关键点-2\" class=\"headerlink\" title=\"关键点\"></a>关键点</h4><ul>\n<li><code>DispatchSourceTimer</code>：提供了一个非常灵活和高效的定时器解决方案。</li>\n<li><code>schedule(deadline:repeating:)</code>：配置定时器的启动时间和重复间隔。</li>\n<li><code>setEventHandler(handler:)</code>：设置定时器触发时执行的代码块。</li>\n<li><code>resume()</code>：启动定时器。</li>\n</ul>\n<h3 id=\"4-NSTimer（旧版-Timer）\"><a href=\"#4-NSTimer（旧版-Timer）\" class=\"headerlink\" title=\"4. NSTimer（旧版 Timer）\"></a>4. <code>NSTimer</code>（旧版 <code>Timer</code>）</h3><p><code>NSTimer</code> 是 <code>Timer</code> 的旧版名称，在现代 Swift 代码中通常使用 <code>Timer</code> 作为替代。</p>\n<h4 id=\"使用示例-3\"><a href=\"#使用示例-3\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NSTimerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer: <span class=\"type\">NSTimer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">startTimer</span>() &#123;</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"type\">NSTimer</span>.scheduledTimerWithTimeInterval(<span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(timerFired), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@objc</span> <span class=\"keyword\">func</span> <span class=\"title function_\">timerFired</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;NSTimer fired!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stopTimer</span>() &#123;</span><br><span class=\"line\">        timer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">        timer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> example <span class=\"operator\">=</span> <span class=\"type\">NSTimerExample</span>()</span><br><span class=\"line\">example.startTimer()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>Timer</code>**：适合大多数定时任务，易于使用。</li>\n<li>**<code>CADisplayLink</code>**：适合需要与屏幕刷新率同步的任务，如动画。</li>\n<li>**<code>DispatchSourceTimer</code>**：适合需要高性能和高灵活性的场景。</li>\n<li>**<code>NSTimer</code>**：现代代码中通常使用 <code>Timer</code> 代替。</li>\n</ul>\n<p>根据具体需求选择合适的定时器工具，可以更好地满足应用的性能和功能要求。</p>\n"},{"title":"iOS后台定时器","date":"2024-07-30T08:30:45.045Z","_content":"\n\n方法一：根据记录开始的时间和获取当前时间进行时间差操作进行处理。监听进入前台、进入后台的消息，在进入后台的时候存一下时间戳，停掉定时器(系统会强制停止定时器)；在再进入前台时，计算时间差。若剩余的时间大于时间差，就减去时间差，否则赋值剩余时间为0。（主流）\n\n方法二：苹果只允许三种情况下的App在后台可以一直执行：音视频、定位更新、下载，若是直播、视频播放、地图类、有下载的应用可以这样使用，但是有些小需求就不需这样做。\n\n方法三：通过向苹果的系统申请，在后台完成一个Task任务。\n\n","source":"_posts/iOS/OC/003-OC方法/019-定时器/后台定时器.md","raw":"---\ntitle: iOS后台定时器\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 定时器\n---\n\n\n方法一：根据记录开始的时间和获取当前时间进行时间差操作进行处理。监听进入前台、进入后台的消息，在进入后台的时候存一下时间戳，停掉定时器(系统会强制停止定时器)；在再进入前台时，计算时间差。若剩余的时间大于时间差，就减去时间差，否则赋值剩余时间为0。（主流）\n\n方法二：苹果只允许三种情况下的App在后台可以一直执行：音视频、定位更新、下载，若是直播、视频播放、地图类、有下载的应用可以这样使用，但是有些小需求就不需这样做。\n\n方法三：通过向苹果的系统申请，在后台完成一个Task任务。\n\n","slug":"iOS/OC/003-OC方法/019-定时器/后台定时器","published":1,"updated":"2024-08-06T08:41:24.032Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94f003bdgxre82v3ag5","content":"<p>方法一：根据记录开始的时间和获取当前时间进行时间差操作进行处理。监听进入前台、进入后台的消息，在进入后台的时候存一下时间戳，停掉定时器(系统会强制停止定时器)；在再进入前台时，计算时间差。若剩余的时间大于时间差，就减去时间差，否则赋值剩余时间为0。（主流）</p>\n<p>方法二：苹果只允许三种情况下的App在后台可以一直执行：音视频、定位更新、下载，若是直播、视频播放、地图类、有下载的应用可以这样使用，但是有些小需求就不需这样做。</p>\n<p>方法三：通过向苹果的系统申请，在后台完成一个Task任务。</p>\n","excerpt":"","more":"<p>方法一：根据记录开始的时间和获取当前时间进行时间差操作进行处理。监听进入前台、进入后台的消息，在进入后台的时候存一下时间戳，停掉定时器(系统会强制停止定时器)；在再进入前台时，计算时间差。若剩余的时间大于时间差，就减去时间差，否则赋值剩余时间为0。（主流）</p>\n<p>方法二：苹果只允许三种情况下的App在后台可以一直执行：音视频、定位更新、下载，若是直播、视频播放、地图类、有下载的应用可以这样使用，但是有些小需求就不需这样做。</p>\n<p>方法三：通过向苹果的系统申请，在后台完成一个Task任务。</p>\n"},{"title":"iOS定时器循环引用问题","date":"2024-07-30T08:09:55.951Z","_content":"\n循环引用\n\nhttps://juejin.cn/post/6937926586167459870\n","source":"_posts/iOS/OC/003-OC方法/019-定时器/定时器循环引用.md","raw":"---\ntitle: iOS定时器循环引用问题\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- 定时器\n- 循环引用\n---\n\n循环引用\n\nhttps://juejin.cn/post/6937926586167459870\n","slug":"iOS/OC/003-OC方法/019-定时器/定时器循环引用","published":1,"updated":"2024-08-06T08:41:21.291Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94f003ddgxr48037cv0","content":"<p>循环引用</p>\n<p><a class=\"link\"   href=\"https://juejin.cn/post/6937926586167459870\" >https://juejin.cn/post/6937926586167459870 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p>循环引用</p>\n<p><a class=\"link\"   href=\"https://juejin.cn/post/6937926586167459870\" >https://juejin.cn/post/6937926586167459870 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"Controller的生命周期","date":"2024-08-07T08:51:26.478Z","_content":"\n\n\n## UIViewController的生命周期及iOS程序执行顺序\n\n* **当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序**\n1、alloc 创建对象，分配空间\n2、init (initWithNibName) 初始化对象，初始化数据\n3、loadView从nib载入视图，通常这一步不需要去干涉。除非你没有使用xib文件创建视图\n4、viewDidLoad载入完成，可以进行自定义数据以及动态创建其他控件\n5、viewWillAppear视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了\n6、viewDidAppear视图已在屏幕上渲染完成\n\n* **当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反**\n1、viewWillDisappear视图将被从屏幕上移除之前执行\n2、viewDidDisappear视图已经被从屏幕上移除，用户看不到这个视图了\n3、dealloc视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放\n\n\n\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/022-Controller生命周期/Controller的生命周期.md","raw":"---\ntitle: Controller的生命周期\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- Controller\n---\n\n\n\n## UIViewController的生命周期及iOS程序执行顺序\n\n* **当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序**\n1、alloc 创建对象，分配空间\n2、init (initWithNibName) 初始化对象，初始化数据\n3、loadView从nib载入视图，通常这一步不需要去干涉。除非你没有使用xib文件创建视图\n4、viewDidLoad载入完成，可以进行自定义数据以及动态创建其他控件\n5、viewWillAppear视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了\n6、viewDidAppear视图已在屏幕上渲染完成\n\n* **当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反**\n1、viewWillDisappear视图将被从屏幕上移除之前执行\n2、viewDidDisappear视图已经被从屏幕上移除，用户看不到这个视图了\n3、dealloc视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放\n\n\n\n\n\n\n","slug":"iOS/OC/003-OC方法/022-Controller生命周期/Controller的生命周期","published":1,"updated":"2024-08-07T08:53:10.038Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94g003edgxrhfok6b15","content":"<h2 id=\"UIViewController的生命周期及iOS程序执行顺序\"><a href=\"#UIViewController的生命周期及iOS程序执行顺序\" class=\"headerlink\" title=\"UIViewController的生命周期及iOS程序执行顺序\"></a>UIViewController的生命周期及iOS程序执行顺序</h2><ul>\n<li><p><strong>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</strong><br>1、alloc 创建对象，分配空间<br>2、init (initWithNibName) 初始化对象，初始化数据<br>3、loadView从nib载入视图，通常这一步不需要去干涉。除非你没有使用xib文件创建视图<br>4、viewDidLoad载入完成，可以进行自定义数据以及动态创建其他控件<br>5、viewWillAppear视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了<br>6、viewDidAppear视图已在屏幕上渲染完成</p>\n</li>\n<li><p><strong>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</strong><br>1、viewWillDisappear视图将被从屏幕上移除之前执行<br>2、viewDidDisappear视图已经被从屏幕上移除，用户看不到这个视图了<br>3、dealloc视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"UIViewController的生命周期及iOS程序执行顺序\"><a href=\"#UIViewController的生命周期及iOS程序执行顺序\" class=\"headerlink\" title=\"UIViewController的生命周期及iOS程序执行顺序\"></a>UIViewController的生命周期及iOS程序执行顺序</h2><ul>\n<li><p><strong>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</strong><br>1、alloc 创建对象，分配空间<br>2、init (initWithNibName) 初始化对象，初始化数据<br>3、loadView从nib载入视图，通常这一步不需要去干涉。除非你没有使用xib文件创建视图<br>4、viewDidLoad载入完成，可以进行自定义数据以及动态创建其他控件<br>5、viewWillAppear视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了<br>6、viewDidAppear视图已在屏幕上渲染完成</p>\n</li>\n<li><p><strong>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</strong><br>1、viewWillDisappear视图将被从屏幕上移除之前执行<br>2、viewDidDisappear视图已经被从屏幕上移除，用户看不到这个视图了<br>3、dealloc视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放</p>\n</li>\n</ul>\n"},{"title":"loadView介绍","date":"2024-07-30T08:36:45.914Z","_content":"\n在iOS开发中，`loadView`是`UIViewController`类的一个生命周期方法，它负责加载或创建视图控制器的根视图。当视图控制器的视图属性被访问，但视图尚未加载时，系统会调用`loadView`方法。\n\n<!-- more -->\n\n### `loadView`的调用时机\n\n`loadView`方法在以下情况下会被调用：\n\n1. **访问视图控制器的`view`属性**：当视图控制器的`view`属性首次被访问时，如果视图还没有被加载，系统会调用`loadView`方法来加载或创建视图。\n\n2. **系统需要加载视图**：在视图控制器的生命周期过程中，如果视图尚未加载但需要显示，系统会调用`loadView`方法。\n\n### `loadView`的作用\n\n`loadView`方法的主要作用是加载或创建视图控制器的根视图。默认情况下，`UIViewController`会从一个名为与视图控制器相同名称的`xib`文件或故事板中加载视图。如果没有关联的`xib`文件或故事板，系统会创建一个空的`UIView`实例作为根视图。\n\n### 自定义`loadView`\n\n通常不需要重写`loadView`方法，而是通过故事板或`xib`文件来配置视图控制器的视图。但是，如果你需要完全以编程方式创建视图，可以重写`loadView`方法。\n\n#### 示例代码\n\n以下是一个自定义`loadView`方法的示例：\n\n```swift\nimport UIKit\n\nclass CustomViewController: UIViewController {\n    \n    override func loadView() {\n        // 创建一个自定义的根视图\n        let customView = UIView()\n        customView.backgroundColor = .white\n        \n        // 添加子视图\n        let label = UILabel()\n        label.text = \"Hello, World!\"\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        customView.addSubview(label)\n        \n        // 设置约束\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: customView.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: customView.centerYAnchor)\n        ])\n        \n        // 将自定义视图设置为视图控制器的根视图\n        self.view = customView\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // 其他初始化代码\n    }\n}\n```\n\n### `loadView`与其他生命周期方法的关系\n\n- `loadView`：负责创建视图控制器的根视图。只有当视图控制器的视图尚未加载且`view`属性被访问时才会被调用。\n- `viewDidLoad`：在视图控制器的视图已经加载完成后被调用。通常在这里进行视图的额外设置或初始化工作。\n- `viewWillAppear`：在视图即将显示在屏幕上时被调用。\n- `viewDidAppear`：在视图已经显示在屏幕上时被调用。\n- `viewWillDisappear`：在视图即将从屏幕上消失时被调用。\n- `viewDidDisappear`：在视图已经从屏幕上消失时被调用。\n\n### 注意事项\n\n- **不要直接调用**`loadView`：`loadView`方法由系统调用，不应在代码中直接调用。如果需要强制加载视图，可以通过访问`view`属性来触发。\n- **不要调用**`super.loadView()`：如果重写`loadView`方法，不要调用`super.loadView()`，因为默认实现会从`xib`文件或故事板加载视图。如果你是完全以编程方式创建视图，这一步是没有必要的。\n\n### 总结\n\n`loadView`方法在视图控制器的视图属性首次被访问时由系统调用，用于加载或创建根视图。通常通过故事板或`xib`文件配置视图，但在某些情况下可以通过重写`loadView`方法以编程方式创建自定义视图。合理使用`loadView`方法和其他生命周期方法，可以确保视图控制器的视图正确初始化和显示。","source":"_posts/iOS/OC/003-OC方法/022-Controller生命周期/loadView介绍.md","raw":"---\ntitle: loadView介绍\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- loadView\n---\n\n在iOS开发中，`loadView`是`UIViewController`类的一个生命周期方法，它负责加载或创建视图控制器的根视图。当视图控制器的视图属性被访问，但视图尚未加载时，系统会调用`loadView`方法。\n\n<!-- more -->\n\n### `loadView`的调用时机\n\n`loadView`方法在以下情况下会被调用：\n\n1. **访问视图控制器的`view`属性**：当视图控制器的`view`属性首次被访问时，如果视图还没有被加载，系统会调用`loadView`方法来加载或创建视图。\n\n2. **系统需要加载视图**：在视图控制器的生命周期过程中，如果视图尚未加载但需要显示，系统会调用`loadView`方法。\n\n### `loadView`的作用\n\n`loadView`方法的主要作用是加载或创建视图控制器的根视图。默认情况下，`UIViewController`会从一个名为与视图控制器相同名称的`xib`文件或故事板中加载视图。如果没有关联的`xib`文件或故事板，系统会创建一个空的`UIView`实例作为根视图。\n\n### 自定义`loadView`\n\n通常不需要重写`loadView`方法，而是通过故事板或`xib`文件来配置视图控制器的视图。但是，如果你需要完全以编程方式创建视图，可以重写`loadView`方法。\n\n#### 示例代码\n\n以下是一个自定义`loadView`方法的示例：\n\n```swift\nimport UIKit\n\nclass CustomViewController: UIViewController {\n    \n    override func loadView() {\n        // 创建一个自定义的根视图\n        let customView = UIView()\n        customView.backgroundColor = .white\n        \n        // 添加子视图\n        let label = UILabel()\n        label.text = \"Hello, World!\"\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        customView.addSubview(label)\n        \n        // 设置约束\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: customView.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: customView.centerYAnchor)\n        ])\n        \n        // 将自定义视图设置为视图控制器的根视图\n        self.view = customView\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // 其他初始化代码\n    }\n}\n```\n\n### `loadView`与其他生命周期方法的关系\n\n- `loadView`：负责创建视图控制器的根视图。只有当视图控制器的视图尚未加载且`view`属性被访问时才会被调用。\n- `viewDidLoad`：在视图控制器的视图已经加载完成后被调用。通常在这里进行视图的额外设置或初始化工作。\n- `viewWillAppear`：在视图即将显示在屏幕上时被调用。\n- `viewDidAppear`：在视图已经显示在屏幕上时被调用。\n- `viewWillDisappear`：在视图即将从屏幕上消失时被调用。\n- `viewDidDisappear`：在视图已经从屏幕上消失时被调用。\n\n### 注意事项\n\n- **不要直接调用**`loadView`：`loadView`方法由系统调用，不应在代码中直接调用。如果需要强制加载视图，可以通过访问`view`属性来触发。\n- **不要调用**`super.loadView()`：如果重写`loadView`方法，不要调用`super.loadView()`，因为默认实现会从`xib`文件或故事板加载视图。如果你是完全以编程方式创建视图，这一步是没有必要的。\n\n### 总结\n\n`loadView`方法在视图控制器的视图属性首次被访问时由系统调用，用于加载或创建根视图。通常通过故事板或`xib`文件配置视图，但在某些情况下可以通过重写`loadView`方法以编程方式创建自定义视图。合理使用`loadView`方法和其他生命周期方法，可以确保视图控制器的视图正确初始化和显示。","slug":"iOS/OC/003-OC方法/022-Controller生命周期/loadView介绍","published":1,"updated":"2024-08-07T08:51:02.044Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94h003gdgxrhxqo9k3s","content":"<p>在iOS开发中，<code>loadView</code>是<code>UIViewController</code>类的一个生命周期方法，它负责加载或创建视图控制器的根视图。当视图控制器的视图属性被访问，但视图尚未加载时，系统会调用<code>loadView</code>方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"loadView的调用时机\"><a href=\"#loadView的调用时机\" class=\"headerlink\" title=\"loadView的调用时机\"></a><code>loadView</code>的调用时机</h3><p><code>loadView</code>方法在以下情况下会被调用：</p>\n<ol>\n<li><p><strong>访问视图控制器的<code>view</code>属性</strong>：当视图控制器的<code>view</code>属性首次被访问时，如果视图还没有被加载，系统会调用<code>loadView</code>方法来加载或创建视图。</p>\n</li>\n<li><p><strong>系统需要加载视图</strong>：在视图控制器的生命周期过程中，如果视图尚未加载但需要显示，系统会调用<code>loadView</code>方法。</p>\n</li>\n</ol>\n<h3 id=\"loadView的作用\"><a href=\"#loadView的作用\" class=\"headerlink\" title=\"loadView的作用\"></a><code>loadView</code>的作用</h3><p><code>loadView</code>方法的主要作用是加载或创建视图控制器的根视图。默认情况下，<code>UIViewController</code>会从一个名为与视图控制器相同名称的<code>xib</code>文件或故事板中加载视图。如果没有关联的<code>xib</code>文件或故事板，系统会创建一个空的<code>UIView</code>实例作为根视图。</p>\n<h3 id=\"自定义loadView\"><a href=\"#自定义loadView\" class=\"headerlink\" title=\"自定义loadView\"></a>自定义<code>loadView</code></h3><p>通常不需要重写<code>loadView</code>方法，而是通过故事板或<code>xib</code>文件来配置视图控制器的视图。但是，如果你需要完全以编程方式创建视图，可以重写<code>loadView</code>方法。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>以下是一个自定义<code>loadView</code>方法的示例：</p>\n<div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomViewController</span>: <span class=\"title class_ inherited__\">UIViewController</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">loadView</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个自定义的根视图</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> customView <span class=\"operator\">=</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        customView.backgroundColor <span class=\"operator\">=</span> .white</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 添加子视图</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> label <span class=\"operator\">=</span> <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, World!&quot;</span></span><br><span class=\"line\">        label.textAlignment <span class=\"operator\">=</span> .center</span><br><span class=\"line\">        label.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        customView.addSubview(label)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置约束</span></span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>.activate([</span><br><span class=\"line\">            label.centerXAnchor.constraint(equalTo: customView.centerXAnchor),</span><br><span class=\"line\">            label.centerYAnchor.constraint(equalTo: customView.centerYAnchor)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 将自定义视图设置为视图控制器的根视图</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.view <span class=\"operator\">=</span> customView</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        <span class=\"comment\">// 其他初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"loadView与其他生命周期方法的关系\"><a href=\"#loadView与其他生命周期方法的关系\" class=\"headerlink\" title=\"loadView与其他生命周期方法的关系\"></a><code>loadView</code>与其他生命周期方法的关系</h3><ul>\n<li><code>loadView</code>：负责创建视图控制器的根视图。只有当视图控制器的视图尚未加载且<code>view</code>属性被访问时才会被调用。</li>\n<li><code>viewDidLoad</code>：在视图控制器的视图已经加载完成后被调用。通常在这里进行视图的额外设置或初始化工作。</li>\n<li><code>viewWillAppear</code>：在视图即将显示在屏幕上时被调用。</li>\n<li><code>viewDidAppear</code>：在视图已经显示在屏幕上时被调用。</li>\n<li><code>viewWillDisappear</code>：在视图即将从屏幕上消失时被调用。</li>\n<li><code>viewDidDisappear</code>：在视图已经从屏幕上消失时被调用。</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>不要直接调用</strong><code>loadView</code>：<code>loadView</code>方法由系统调用，不应在代码中直接调用。如果需要强制加载视图，可以通过访问<code>view</code>属性来触发。</li>\n<li><strong>不要调用</strong><code>super.loadView()</code>：如果重写<code>loadView</code>方法，不要调用<code>super.loadView()</code>，因为默认实现会从<code>xib</code>文件或故事板加载视图。如果你是完全以编程方式创建视图，这一步是没有必要的。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>loadView</code>方法在视图控制器的视图属性首次被访问时由系统调用，用于加载或创建根视图。通常通过故事板或<code>xib</code>文件配置视图，但在某些情况下可以通过重写<code>loadView</code>方法以编程方式创建自定义视图。合理使用<code>loadView</code>方法和其他生命周期方法，可以确保视图控制器的视图正确初始化和显示。</p>\n","excerpt":"<p>在iOS开发中，<code>loadView</code>是<code>UIViewController</code>类的一个生命周期方法，它负责加载或创建视图控制器的根视图。当视图控制器的视图属性被访问，但视图尚未加载时，系统会调用<code>loadView</code>方法。</p>","more":"<h3 id=\"loadView的调用时机\"><a href=\"#loadView的调用时机\" class=\"headerlink\" title=\"loadView的调用时机\"></a><code>loadView</code>的调用时机</h3><p><code>loadView</code>方法在以下情况下会被调用：</p>\n<ol>\n<li><p><strong>访问视图控制器的<code>view</code>属性</strong>：当视图控制器的<code>view</code>属性首次被访问时，如果视图还没有被加载，系统会调用<code>loadView</code>方法来加载或创建视图。</p>\n</li>\n<li><p><strong>系统需要加载视图</strong>：在视图控制器的生命周期过程中，如果视图尚未加载但需要显示，系统会调用<code>loadView</code>方法。</p>\n</li>\n</ol>\n<h3 id=\"loadView的作用\"><a href=\"#loadView的作用\" class=\"headerlink\" title=\"loadView的作用\"></a><code>loadView</code>的作用</h3><p><code>loadView</code>方法的主要作用是加载或创建视图控制器的根视图。默认情况下，<code>UIViewController</code>会从一个名为与视图控制器相同名称的<code>xib</code>文件或故事板中加载视图。如果没有关联的<code>xib</code>文件或故事板，系统会创建一个空的<code>UIView</code>实例作为根视图。</p>\n<h3 id=\"自定义loadView\"><a href=\"#自定义loadView\" class=\"headerlink\" title=\"自定义loadView\"></a>自定义<code>loadView</code></h3><p>通常不需要重写<code>loadView</code>方法，而是通过故事板或<code>xib</code>文件来配置视图控制器的视图。但是，如果你需要完全以编程方式创建视图，可以重写<code>loadView</code>方法。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>以下是一个自定义<code>loadView</code>方法的示例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomViewController</span>: <span class=\"title class_ inherited__\">UIViewController</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">loadView</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个自定义的根视图</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> customView <span class=\"operator\">=</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        customView.backgroundColor <span class=\"operator\">=</span> .white</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 添加子视图</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> label <span class=\"operator\">=</span> <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, World!&quot;</span></span><br><span class=\"line\">        label.textAlignment <span class=\"operator\">=</span> .center</span><br><span class=\"line\">        label.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        customView.addSubview(label)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置约束</span></span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>.activate([</span><br><span class=\"line\">            label.centerXAnchor.constraint(equalTo: customView.centerXAnchor),</span><br><span class=\"line\">            label.centerYAnchor.constraint(equalTo: customView.centerYAnchor)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 将自定义视图设置为视图控制器的根视图</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.view <span class=\"operator\">=</span> customView</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        <span class=\"comment\">// 其他初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"loadView与其他生命周期方法的关系\"><a href=\"#loadView与其他生命周期方法的关系\" class=\"headerlink\" title=\"loadView与其他生命周期方法的关系\"></a><code>loadView</code>与其他生命周期方法的关系</h3><ul>\n<li><code>loadView</code>：负责创建视图控制器的根视图。只有当视图控制器的视图尚未加载且<code>view</code>属性被访问时才会被调用。</li>\n<li><code>viewDidLoad</code>：在视图控制器的视图已经加载完成后被调用。通常在这里进行视图的额外设置或初始化工作。</li>\n<li><code>viewWillAppear</code>：在视图即将显示在屏幕上时被调用。</li>\n<li><code>viewDidAppear</code>：在视图已经显示在屏幕上时被调用。</li>\n<li><code>viewWillDisappear</code>：在视图即将从屏幕上消失时被调用。</li>\n<li><code>viewDidDisappear</code>：在视图已经从屏幕上消失时被调用。</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>不要直接调用</strong><code>loadView</code>：<code>loadView</code>方法由系统调用，不应在代码中直接调用。如果需要强制加载视图，可以通过访问<code>view</code>属性来触发。</li>\n<li><strong>不要调用</strong><code>super.loadView()</code>：如果重写<code>loadView</code>方法，不要调用<code>super.loadView()</code>，因为默认实现会从<code>xib</code>文件或故事板加载视图。如果你是完全以编程方式创建视图，这一步是没有必要的。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>loadView</code>方法在视图控制器的视图属性首次被访问时由系统调用，用于加载或创建根视图。通常通过故事板或<code>xib</code>文件配置视图，但在某些情况下可以通过重写<code>loadView</code>方法以编程方式创建自定义视图。合理使用<code>loadView</code>方法和其他生命周期方法，可以确保视图控制器的视图正确初始化和显示。</p>"},{"title":"static与extern","date":"2024-07-30T09:08:46.680Z","_content":"\nstatic 和 extern 是两个不同的关键字，在 iOS 中它们有着不同的作用：\n\n<!-- more -->\n\n# static\n\n* static 关键字用于修饰变量、函数或块，以限定其作用域。\n* 在函数内部，static 变量的生命周期将延长到整个程序的生命周期，而不是函数调用结束后销毁。\n* 在文件内部，static 函数或变量只能在该文件内部访问，不能被其他文件访问。\n* 在类内部，static 变量或函数属于类的静态成员，而不是实例成员。\n\n示例：\n\n```objc\n// 在文件内部定义静态变量\nstatic int counter = 0;\n\n// 在函数内部定义静态变量\nvoid foo() {\n    static int x = 0;\n    x++;\n    printf(\"%d\\n\", x);\n}\n\n// 在类内部定义静态变量\n@interface MyClass : NSObject {\n    static int classCounter;\n}\n\n@end\n```\n\n\n# extern\n\nextern 关键字用于声明变量或函数的外部链接性，即该变量或函数可以被其他文件访问。\n使用 extern 声明的变量或函数必须在其他文件中定义。\nextern 可以用于导入其他文件中的变量或函数，以便在当前文件中使用。\n示例：\n\n```objc\n// 在头文件中声明外部变量\nextern int globalCounter;\n\n// 在实现文件中定义外部变量\nint globalCounter = 0;\n\n// 在头文件中声明外部函数\nextern void foo();\n\n// 在实现文件中定义外部函数\nvoid foo() {\n    printf(\"Hello, world!\\n\");\n}\n```\n\n# static extern：\n\nstatic extern 是一个组合关键字，它的作用是将变量或函数同时声明为静态的和外部可访问的。\n使用 static extern 声明的变量或函数只能在当前文件内部访问，但可以被其他文件通过外部链接访问。\n示例：\n\n```objc\n// 在头文件中声明静态外部变量\nstatic extern int fileCounter;\n\n// 在实现文件中定义静态外部变量\nstatic int fileCounter = 0;\n```\n需要注意的是，static extern 的使用场景非常少见，因为它限制了变量或函数的访问范围，同时又需要外部链接性。通常情况下，可以使用 extern 或 static 单独来声明变量或函数。\n\n\n# 自己的理解\n\n（1）extern修饰的全局变量默认是有外部链接的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern全局变量的声明，就可以使用全局变量。\n\n（2）static修饰全局变量，全局变量的作用域仅限于当前文件；\n\n（3）static修饰局部变量，让局部变量只初始化一次，局部变量在程序中只有一份内存，并不会改变局部变量的作用域，仅仅是改变了局部变量的生命周期（只到程序结束，这个局部变量才会销毁）。\n\n```objc\nvoid test() {\n    static int a = 0;\n    a++;\n    NSLog(@\"a = %d\", a);\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        for (int i = 0; i<3; i++) {\n           test();\n       }\n    }\n    return 0;\n}\n\n// 输出 1 2 3\n```\n\n\n# 项目中使用\n\n```\n// .h\nextern NSString *const RCKitDispatchDownloadMediaNotification;\n\n\n// .m\nNSString *const RCKitDispatchDownloadMediaNotification = @\"RCKitDispatchDownloadMediaNotification\";\n```\n\n","source":"_posts/iOS/OC/003-OC方法/024-static与extern/README.md","raw":"---\ntitle: static与extern\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- static\n- extern\n---\n\nstatic 和 extern 是两个不同的关键字，在 iOS 中它们有着不同的作用：\n\n<!-- more -->\n\n# static\n\n* static 关键字用于修饰变量、函数或块，以限定其作用域。\n* 在函数内部，static 变量的生命周期将延长到整个程序的生命周期，而不是函数调用结束后销毁。\n* 在文件内部，static 函数或变量只能在该文件内部访问，不能被其他文件访问。\n* 在类内部，static 变量或函数属于类的静态成员，而不是实例成员。\n\n示例：\n\n```objc\n// 在文件内部定义静态变量\nstatic int counter = 0;\n\n// 在函数内部定义静态变量\nvoid foo() {\n    static int x = 0;\n    x++;\n    printf(\"%d\\n\", x);\n}\n\n// 在类内部定义静态变量\n@interface MyClass : NSObject {\n    static int classCounter;\n}\n\n@end\n```\n\n\n# extern\n\nextern 关键字用于声明变量或函数的外部链接性，即该变量或函数可以被其他文件访问。\n使用 extern 声明的变量或函数必须在其他文件中定义。\nextern 可以用于导入其他文件中的变量或函数，以便在当前文件中使用。\n示例：\n\n```objc\n// 在头文件中声明外部变量\nextern int globalCounter;\n\n// 在实现文件中定义外部变量\nint globalCounter = 0;\n\n// 在头文件中声明外部函数\nextern void foo();\n\n// 在实现文件中定义外部函数\nvoid foo() {\n    printf(\"Hello, world!\\n\");\n}\n```\n\n# static extern：\n\nstatic extern 是一个组合关键字，它的作用是将变量或函数同时声明为静态的和外部可访问的。\n使用 static extern 声明的变量或函数只能在当前文件内部访问，但可以被其他文件通过外部链接访问。\n示例：\n\n```objc\n// 在头文件中声明静态外部变量\nstatic extern int fileCounter;\n\n// 在实现文件中定义静态外部变量\nstatic int fileCounter = 0;\n```\n需要注意的是，static extern 的使用场景非常少见，因为它限制了变量或函数的访问范围，同时又需要外部链接性。通常情况下，可以使用 extern 或 static 单独来声明变量或函数。\n\n\n# 自己的理解\n\n（1）extern修饰的全局变量默认是有外部链接的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern全局变量的声明，就可以使用全局变量。\n\n（2）static修饰全局变量，全局变量的作用域仅限于当前文件；\n\n（3）static修饰局部变量，让局部变量只初始化一次，局部变量在程序中只有一份内存，并不会改变局部变量的作用域，仅仅是改变了局部变量的生命周期（只到程序结束，这个局部变量才会销毁）。\n\n```objc\nvoid test() {\n    static int a = 0;\n    a++;\n    NSLog(@\"a = %d\", a);\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        for (int i = 0; i<3; i++) {\n           test();\n       }\n    }\n    return 0;\n}\n\n// 输出 1 2 3\n```\n\n\n# 项目中使用\n\n```\n// .h\nextern NSString *const RCKitDispatchDownloadMediaNotification;\n\n\n// .m\nNSString *const RCKitDispatchDownloadMediaNotification = @\"RCKitDispatchDownloadMediaNotification\";\n```\n\n","slug":"iOS/OC/003-OC方法/024-static与extern/README","published":1,"updated":"2024-08-06T08:41:49.522Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94h003idgxred7hcul2","content":"<p>static 和 extern 是两个不同的关键字，在 iOS 中它们有着不同的作用：</p>\n<span id=\"more\"></span>\n\n<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><ul>\n<li>static 关键字用于修饰变量、函数或块，以限定其作用域。</li>\n<li>在函数内部，static 变量的生命周期将延长到整个程序的生命周期，而不是函数调用结束后销毁。</li>\n<li>在文件内部，static 函数或变量只能在该文件内部访问，不能被其他文件访问。</li>\n<li>在类内部，static 变量或函数属于类的静态成员，而不是实例成员。</li>\n</ul>\n<p>示例：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在文件内部定义静态变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在函数内部定义静态变量</span></span><br><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类内部定义静态变量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> classCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>extern 关键字用于声明变量或函数的外部链接性，即该变量或函数可以被其他文件访问。<br>使用 extern 声明的变量或函数必须在其他文件中定义。<br>extern 可以用于导入其他文件中的变量或函数，以便在当前文件中使用。<br>示例：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在头文件中声明外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> globalCounter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义外部变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> globalCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在头文件中声明外部函数</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义外部函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;Hello, world!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"static-extern：\"><a href=\"#static-extern：\" class=\"headerlink\" title=\"static extern：\"></a>static extern：</h1><p>static extern 是一个组合关键字，它的作用是将变量或函数同时声明为静态的和外部可访问的。<br>使用 static extern 声明的变量或函数只能在当前文件内部访问，但可以被其他文件通过外部链接访问。<br>示例：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在头文件中声明静态外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> <span class=\"type\">int</span> fileCounter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义静态外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> fileCounter = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是，static extern 的使用场景非常少见，因为它限制了变量或函数的访问范围，同时又需要外部链接性。通常情况下，可以使用 extern 或 static 单独来声明变量或函数。</p>\n<h1 id=\"自己的理解\"><a href=\"#自己的理解\" class=\"headerlink\" title=\"自己的理解\"></a>自己的理解</h1><p>（1）extern修饰的全局变量默认是有外部链接的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern全局变量的声明，就可以使用全局变量。</p>\n<p>（2）static修饰全局变量，全局变量的作用域仅限于当前文件；</p>\n<p>（3）static修饰局部变量，让局部变量只初始化一次，局部变量在程序中只有一份内存，并不会改变局部变量的作用域，仅仅是改变了局部变量的生命周期（只到程序结束，这个局部变量才会销毁）。</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> test() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;a = %d&quot;</span>, a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">           test();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出 1 2 3</span></span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"项目中使用\"><a href=\"#项目中使用\" class=\"headerlink\" title=\"项目中使用\"></a>项目中使用</h1><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .h</span><br><span class=\"line\">extern NSString *const RCKitDispatchDownloadMediaNotification;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// .m</span><br><span class=\"line\">NSString *const RCKitDispatchDownloadMediaNotification = @&quot;RCKitDispatchDownloadMediaNotification&quot;;</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"<p>static 和 extern 是两个不同的关键字，在 iOS 中它们有着不同的作用：</p>","more":"<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><ul>\n<li>static 关键字用于修饰变量、函数或块，以限定其作用域。</li>\n<li>在函数内部，static 变量的生命周期将延长到整个程序的生命周期，而不是函数调用结束后销毁。</li>\n<li>在文件内部，static 函数或变量只能在该文件内部访问，不能被其他文件访问。</li>\n<li>在类内部，static 变量或函数属于类的静态成员，而不是实例成员。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在文件内部定义静态变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在函数内部定义静态变量</span></span><br><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类内部定义静态变量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> classCounter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>extern 关键字用于声明变量或函数的外部链接性，即该变量或函数可以被其他文件访问。<br>使用 extern 声明的变量或函数必须在其他文件中定义。<br>extern 可以用于导入其他文件中的变量或函数，以便在当前文件中使用。<br>示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在头文件中声明外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> globalCounter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义外部变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> globalCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在头文件中声明外部函数</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义外部函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;Hello, world!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"static-extern：\"><a href=\"#static-extern：\" class=\"headerlink\" title=\"static extern：\"></a>static extern：</h1><p>static extern 是一个组合关键字，它的作用是将变量或函数同时声明为静态的和外部可访问的。<br>使用 static extern 声明的变量或函数只能在当前文件内部访问，但可以被其他文件通过外部链接访问。<br>示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在头文件中声明静态外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> <span class=\"type\">int</span> fileCounter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在实现文件中定义静态外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> fileCounter = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，static extern 的使用场景非常少见，因为它限制了变量或函数的访问范围，同时又需要外部链接性。通常情况下，可以使用 extern 或 static 单独来声明变量或函数。</p>\n<h1 id=\"自己的理解\"><a href=\"#自己的理解\" class=\"headerlink\" title=\"自己的理解\"></a>自己的理解</h1><p>（1）extern修饰的全局变量默认是有外部链接的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern全局变量的声明，就可以使用全局变量。</p>\n<p>（2）static修饰全局变量，全局变量的作用域仅限于当前文件；</p>\n<p>（3）static修饰局部变量，让局部变量只初始化一次，局部变量在程序中只有一份内存，并不会改变局部变量的作用域，仅仅是改变了局部变量的生命周期（只到程序结束，这个局部变量才会销毁）。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> test() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;a = %d&quot;</span>, a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">           test();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"项目中使用\"><a href=\"#项目中使用\" class=\"headerlink\" title=\"项目中使用\"></a>项目中使用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .h</span><br><span class=\"line\">extern NSString *const RCKitDispatchDownloadMediaNotification;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// .m</span><br><span class=\"line\">NSString *const RCKitDispatchDownloadMediaNotification = @&quot;RCKitDispatchDownloadMediaNotification&quot;;</span><br></pre></td></tr></table></figure>"},{"title":"判断两个NSString对象的字面量是否相同","date":"2024-07-30T09:21:06.220Z","_content":"\n判断两个NSString的字面量是否相同，为什么要用isEqualToString来判断，而不能用==或isEqual来判断呢？\n\n<!-- more -->\n\n判断两个 NSString 对象的字面量是否相同，使用 isEqualToString: 方法是因为它专门用于比较字符串的字面量，而不是比较对象的地址或其他特征。\n\n使用 == 运算符来判断两个字符串对象的字面量是否相同是不可靠的，因为 == 只比较两个对象的地址是否相同，而不是比较它们的字面量。例如：\n\n```objc\nNSString *str1 = @\"Hello\";\nNSString *str2 = [NSString stringWithFormat:@\"Hello\"];\n\nif (str1 == str2) {\n    NSLog(@\"The strings are equal\"); // 这里不会打印，因为str1和str2是不同的对象\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n\n在上面的例子中，str1 和 str2 的字面量都是 \"Hello\"，但它们是不同的对象，因此 == 运算符返回 NO。\n\n使用 isEqual: 方法也不是一个好选择，因为它比较两个对象的等价性，而不是专门比较字符串的字面量。例如：\n\n```\nNSString *str1 = @\"Hello\";\nNSMutableString *str2 = [NSMutableString stringWithString:@\"Hello\"];\n\nif ([str1 isEqual:str2]) {\n    NSLog(@\"The strings are equal\"); // 这里会打印，因为str1和str2的字面量相同\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n在上面的例子中，str1 和 str2 的字面量都是 \"Hello\"，因此 isEqual: 方法返回 YES。但是，如果你想比较两个字符串对象的字面量是否相同，而不考虑它们的类别或其他特征，那么使用 isEqualToString: 方法是最好的选择。\n\nisEqualToString: 方法专门用于比较两个字符串对象的字面量，它不考虑对象的地址或类别，只比较它们的字面量。例如：\n\n```\nNSString *str1 = @\"Hello\";\nNSString *str2 = [NSString stringWithFormat:@\"Hello\"];\n\nif ([str1 isEqualToString:str2]) {\n    NSLog(@\"The strings are equal\"); // 这里会打印，因为str1和str2的字面量相同\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n因此，在判断两个 NSString 对象的字面量是否相同时，使用 isEqualToString: 方法是最安全和可靠的选择。","source":"_posts/iOS/OC/003-OC方法/025-NSString/判断两个NSString是否相同.md","raw":"---\ntitle: 判断两个NSString对象的字面量是否相同\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- NSString\n---\n\n判断两个NSString的字面量是否相同，为什么要用isEqualToString来判断，而不能用==或isEqual来判断呢？\n\n<!-- more -->\n\n判断两个 NSString 对象的字面量是否相同，使用 isEqualToString: 方法是因为它专门用于比较字符串的字面量，而不是比较对象的地址或其他特征。\n\n使用 == 运算符来判断两个字符串对象的字面量是否相同是不可靠的，因为 == 只比较两个对象的地址是否相同，而不是比较它们的字面量。例如：\n\n```objc\nNSString *str1 = @\"Hello\";\nNSString *str2 = [NSString stringWithFormat:@\"Hello\"];\n\nif (str1 == str2) {\n    NSLog(@\"The strings are equal\"); // 这里不会打印，因为str1和str2是不同的对象\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n\n在上面的例子中，str1 和 str2 的字面量都是 \"Hello\"，但它们是不同的对象，因此 == 运算符返回 NO。\n\n使用 isEqual: 方法也不是一个好选择，因为它比较两个对象的等价性，而不是专门比较字符串的字面量。例如：\n\n```\nNSString *str1 = @\"Hello\";\nNSMutableString *str2 = [NSMutableString stringWithString:@\"Hello\"];\n\nif ([str1 isEqual:str2]) {\n    NSLog(@\"The strings are equal\"); // 这里会打印，因为str1和str2的字面量相同\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n在上面的例子中，str1 和 str2 的字面量都是 \"Hello\"，因此 isEqual: 方法返回 YES。但是，如果你想比较两个字符串对象的字面量是否相同，而不考虑它们的类别或其他特征，那么使用 isEqualToString: 方法是最好的选择。\n\nisEqualToString: 方法专门用于比较两个字符串对象的字面量，它不考虑对象的地址或类别，只比较它们的字面量。例如：\n\n```\nNSString *str1 = @\"Hello\";\nNSString *str2 = [NSString stringWithFormat:@\"Hello\"];\n\nif ([str1 isEqualToString:str2]) {\n    NSLog(@\"The strings are equal\"); // 这里会打印，因为str1和str2的字面量相同\n} else {\n    NSLog(@\"The strings are not equal\");\n}\n```\n因此，在判断两个 NSString 对象的字面量是否相同时，使用 isEqualToString: 方法是最安全和可靠的选择。","slug":"iOS/OC/003-OC方法/025-NSString/判断两个NSString是否相同","published":1,"updated":"2024-08-06T08:41:52.938Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94i003ldgxr34i89ar1","content":"<p>判断两个NSString的字面量是否相同，为什么要用isEqualToString来判断，而不能用&#x3D;&#x3D;或isEqual来判断呢？</p>\n<span id=\"more\"></span>\n\n<p>判断两个 NSString 对象的字面量是否相同，使用 isEqualToString: 方法是因为它专门用于比较字符串的字面量，而不是比较对象的地址或其他特征。</p>\n<p>使用 &#x3D;&#x3D; 运算符来判断两个字符串对象的字面量是否相同是不可靠的，因为 &#x3D;&#x3D; 只比较两个对象的地址是否相同，而不是比较它们的字面量。例如：</p>\n<div class=\"highlight-container\" data-rel=\"Objc\"><figure class=\"iseeu highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *str2 = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;Hello&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (str1 == str2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;The strings are equal&quot;</span>); <span class=\"comment\">// 这里不会打印，因为str1和str2是不同的对象</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;The strings are not equal&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在上面的例子中，str1 和 str2 的字面量都是 “Hello”，但它们是不同的对象，因此 &#x3D;&#x3D; 运算符返回 NO。</p>\n<p>使用 isEqual: 方法也不是一个好选择，因为它比较两个对象的等价性，而不是专门比较字符串的字面量。例如：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;Hello&quot;;</span><br><span class=\"line\">NSMutableString *str2 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([str1 isEqual:str2]) &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are equal&quot;); // 这里会打印，因为str1和str2的字面量相同</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are not equal&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在上面的例子中，str1 和 str2 的字面量都是 “Hello”，因此 isEqual: 方法返回 YES。但是，如果你想比较两个字符串对象的字面量是否相同，而不考虑它们的类别或其他特征，那么使用 isEqualToString: 方法是最好的选择。</p>\n<p>isEqualToString: 方法专门用于比较两个字符串对象的字面量，它不考虑对象的地址或类别，只比较它们的字面量。例如：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;Hello&quot;;</span><br><span class=\"line\">NSString *str2 = [NSString stringWithFormat:@&quot;Hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([str1 isEqualToString:str2]) &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are equal&quot;); // 这里会打印，因为str1和str2的字面量相同</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are not equal&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>因此，在判断两个 NSString 对象的字面量是否相同时，使用 isEqualToString: 方法是最安全和可靠的选择。</p>\n","excerpt":"<p>判断两个NSString的字面量是否相同，为什么要用isEqualToString来判断，而不能用&#x3D;&#x3D;或isEqual来判断呢？</p>","more":"<p>判断两个 NSString 对象的字面量是否相同，使用 isEqualToString: 方法是因为它专门用于比较字符串的字面量，而不是比较对象的地址或其他特征。</p>\n<p>使用 &#x3D;&#x3D; 运算符来判断两个字符串对象的字面量是否相同是不可靠的，因为 &#x3D;&#x3D; 只比较两个对象的地址是否相同，而不是比较它们的字面量。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *str2 = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;Hello&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (str1 == str2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;The strings are equal&quot;</span>); <span class=\"comment\">// 这里不会打印，因为str1和str2是不同的对象</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;The strings are not equal&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，str1 和 str2 的字面量都是 “Hello”，但它们是不同的对象，因此 &#x3D;&#x3D; 运算符返回 NO。</p>\n<p>使用 isEqual: 方法也不是一个好选择，因为它比较两个对象的等价性，而不是专门比较字符串的字面量。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;Hello&quot;;</span><br><span class=\"line\">NSMutableString *str2 = [NSMutableString stringWithString:@&quot;Hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([str1 isEqual:str2]) &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are equal&quot;); // 这里会打印，因为str1和str2的字面量相同</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are not equal&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，str1 和 str2 的字面量都是 “Hello”，因此 isEqual: 方法返回 YES。但是，如果你想比较两个字符串对象的字面量是否相同，而不考虑它们的类别或其他特征，那么使用 isEqualToString: 方法是最好的选择。</p>\n<p>isEqualToString: 方法专门用于比较两个字符串对象的字面量，它不考虑对象的地址或类别，只比较它们的字面量。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;Hello&quot;;</span><br><span class=\"line\">NSString *str2 = [NSString stringWithFormat:@&quot;Hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([str1 isEqualToString:str2]) &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are equal&quot;); // 这里会打印，因为str1和str2的字面量相同</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    NSLog(@&quot;The strings are not equal&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，在判断两个 NSString 对象的字面量是否相同时，使用 isEqualToString: 方法是最安全和可靠的选择。</p>"},{"title":"iOS中float四舍五入+末尾清零","date":"2024-08-08T02:07:25.914Z","_content":"\n### 一、准备\n测试数据\n```\nfloat A = 0.124000;\nfloat B = 0.124200;\nfloat C = 0.125000;   （重点关注）\nfloat D = 0.125001;\nfloat E = 0.126000;\n```\n目的：float保留两位小数显示，四舍五入。\n\n\n### 二、几种尝试\n\n#### 2.1、最简单的方法\n```\nNSString * showA = [NSString stringWithFormat:@\"%0.2f\",X];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.12\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n结果出现了一些偏差。也就是 `float C = 0.125000` 的情况。\n\n\n#### 2.2、NSDecimalNumber\n\n* 进一步探讨，可查看\n[iOS 浮点数的精确计算和四舍五入问题](https://www.jianshu.com/p/946c4c4aff33)\n\n```\n/*\n枚举\n    NSRoundPlain,   // Round up on a tie   貌似取整\n    NSRoundDown,    // Always down == truncate   只舍不入\n    NSRoundUp,      // Always up     只入不舍\n    NSRoundBankers  // on a tie round so last digit is even   貌似四舍五入\n*/\nNSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers\nscale:2\n                                                                                       raiseOnExactness:NO\n                                                                                        raiseOnOverflow:NO\n                                                                                       raiseOnUnderflow:NO\n                                                                                    raiseOnDivideByZero:YES];\nNSDecimalNumber * ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:X];\nNSDecimalNumber * roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];\nNSString * showX = [NSString stringWithFormat:@\"%@\",roundedOunces];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.12    （重点关注）\nC1 = 0.135000; -->  C = 0.14    （重点关注）\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n\n结果同上， `float C = 0.125000` 的情况还不行。\n\n> `NSRoundPlain` 和 `NSRoundBankers` 都不是传统的四舍五入。\n1、`NSRoundPlain` 是四舍六进若五前偶数进位奇数舍去。如：1.25 ~ 1.3；1.15 ~ 1.1\n2、`NSRoundBankers` 是四舍六进若五前偶数舍去奇数进位。如：1.25 ~ 1.2；1.15 ~ 1.2\n\n\n#### 2.3、roundf()\n\n```\nNSString * showX = [NSString stringWithFormat:@\"%0.2f\",roundf(X * 100)/100];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.13\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n\n发现这个方法好像更靠谱点。\n\n**拓展的相关的其他函数**\n```\nround  如果参数是小数  则求本身的四舍五入.\nceil   如果参数是小数  则求最小的整数但不小于本身.\nfloor  如果参数是小数  则求最大的整数但不大于本身. \n```\n\n\n### 三、尾部清零\n\n```\nNSString * floatnum = @\"0.125000\"\nNSString * outNumber1 = [NSString stringWithFormat:@\"%@\",@(floatnum.floatValue)];\n```\n\n### 四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\n\n```\n+ (NSString *)FloatKeepTwoBitsAndRemoveAllZero:(float)floatnum {\n    // 保留2位小数\n    NSString * tempfloat = [NSString stringWithFormat:@\"%0.2f\",roundf(floatnum * 100)/100];\n    // 末尾清零\n    return [NSString stringWithFormat:@\"%@\",@(tempfloat.floatValue)];\n}\n```\n","source":"_posts/iOS/OC/003-OC方法/027-iOS中float四舍五入+末尾清零/README.md","raw":"---\ntitle: iOS中float四舍五入+末尾清零\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n---\n\n### 一、准备\n测试数据\n```\nfloat A = 0.124000;\nfloat B = 0.124200;\nfloat C = 0.125000;   （重点关注）\nfloat D = 0.125001;\nfloat E = 0.126000;\n```\n目的：float保留两位小数显示，四舍五入。\n\n\n### 二、几种尝试\n\n#### 2.1、最简单的方法\n```\nNSString * showA = [NSString stringWithFormat:@\"%0.2f\",X];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.12\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n结果出现了一些偏差。也就是 `float C = 0.125000` 的情况。\n\n\n#### 2.2、NSDecimalNumber\n\n* 进一步探讨，可查看\n[iOS 浮点数的精确计算和四舍五入问题](https://www.jianshu.com/p/946c4c4aff33)\n\n```\n/*\n枚举\n    NSRoundPlain,   // Round up on a tie   貌似取整\n    NSRoundDown,    // Always down == truncate   只舍不入\n    NSRoundUp,      // Always up     只入不舍\n    NSRoundBankers  // on a tie round so last digit is even   貌似四舍五入\n*/\nNSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers\nscale:2\n                                                                                       raiseOnExactness:NO\n                                                                                        raiseOnOverflow:NO\n                                                                                       raiseOnUnderflow:NO\n                                                                                    raiseOnDivideByZero:YES];\nNSDecimalNumber * ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:X];\nNSDecimalNumber * roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];\nNSString * showX = [NSString stringWithFormat:@\"%@\",roundedOunces];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.12    （重点关注）\nC1 = 0.135000; -->  C = 0.14    （重点关注）\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n\n结果同上， `float C = 0.125000` 的情况还不行。\n\n> `NSRoundPlain` 和 `NSRoundBankers` 都不是传统的四舍五入。\n1、`NSRoundPlain` 是四舍六进若五前偶数进位奇数舍去。如：1.25 ~ 1.3；1.15 ~ 1.1\n2、`NSRoundBankers` 是四舍六进若五前偶数舍去奇数进位。如：1.25 ~ 1.2；1.15 ~ 1.2\n\n\n#### 2.3、roundf()\n\n```\nNSString * showX = [NSString stringWithFormat:@\"%0.2f\",roundf(X * 100)/100];\n\n// 输出\nA = 0.124000;  -->  A = 0.12 \nB = 0.124200;  -->  B = 0.12 \nC = 0.125000;  -->  C = 0.13\nD = 0.125001;  -->  D = 0.13\nE = 0.126000;  -->  E = 0.13\n```\n\n发现这个方法好像更靠谱点。\n\n**拓展的相关的其他函数**\n```\nround  如果参数是小数  则求本身的四舍五入.\nceil   如果参数是小数  则求最小的整数但不小于本身.\nfloor  如果参数是小数  则求最大的整数但不大于本身. \n```\n\n\n### 三、尾部清零\n\n```\nNSString * floatnum = @\"0.125000\"\nNSString * outNumber1 = [NSString stringWithFormat:@\"%@\",@(floatnum.floatValue)];\n```\n\n### 四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\n\n```\n+ (NSString *)FloatKeepTwoBitsAndRemoveAllZero:(float)floatnum {\n    // 保留2位小数\n    NSString * tempfloat = [NSString stringWithFormat:@\"%0.2f\",roundf(floatnum * 100)/100];\n    // 末尾清零\n    return [NSString stringWithFormat:@\"%@\",@(tempfloat.floatValue)];\n}\n```\n","slug":"iOS/OC/003-OC方法/027-iOS中float四舍五入+末尾清零/README","published":1,"updated":"2024-08-08T02:08:04.473Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94i003ndgxr5qgy6vue","content":"<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>测试数据</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float A = 0.124000;</span><br><span class=\"line\">float B = 0.124200;</span><br><span class=\"line\">float C = 0.125000;   （重点关注）</span><br><span class=\"line\">float D = 0.125001;</span><br><span class=\"line\">float E = 0.126000;</span><br></pre></td></tr></table></figure></div>\n<p>目的：float保留两位小数显示，四舍五入。</p>\n<h3 id=\"二、几种尝试\"><a href=\"#二、几种尝试\" class=\"headerlink\" title=\"二、几种尝试\"></a>二、几种尝试</h3><h4 id=\"2-1、最简单的方法\"><a href=\"#2-1、最简单的方法\" class=\"headerlink\" title=\"2.1、最简单的方法\"></a>2.1、最简单的方法</h4><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * showA = [NSString stringWithFormat:@&quot;%0.2f&quot;,X];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.12</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure></div>\n<p>结果出现了一些偏差。也就是 <code>float C = 0.125000</code> 的情况。</p>\n<h4 id=\"2-2、NSDecimalNumber\"><a href=\"#2-2、NSDecimalNumber\" class=\"headerlink\" title=\"2.2、NSDecimalNumber\"></a>2.2、NSDecimalNumber</h4><ul>\n<li>进一步探讨，可查看<br><a class=\"link\"   href=\"https://www.jianshu.com/p/946c4c4aff33\" >iOS 浮点数的精确计算和四舍五入问题 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">枚举</span><br><span class=\"line\">    NSRoundPlain,   // Round up on a tie   貌似取整</span><br><span class=\"line\">    NSRoundDown,    // Always down == truncate   只舍不入</span><br><span class=\"line\">    NSRoundUp,      // Always up     只入不舍</span><br><span class=\"line\">    NSRoundBankers  // on a tie round so last digit is even   貌似四舍五入</span><br><span class=\"line\">*/</span><br><span class=\"line\">NSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers</span><br><span class=\"line\">scale:2</span><br><span class=\"line\">                                                                                       raiseOnExactness:NO</span><br><span class=\"line\">                                                                                        raiseOnOverflow:NO</span><br><span class=\"line\">                                                                                       raiseOnUnderflow:NO</span><br><span class=\"line\">                                                                                    raiseOnDivideByZero:YES];</span><br><span class=\"line\">NSDecimalNumber * ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:X];</span><br><span class=\"line\">NSDecimalNumber * roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];</span><br><span class=\"line\">NSString * showX = [NSString stringWithFormat:@&quot;%@&quot;,roundedOunces];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.12    （重点关注）</span><br><span class=\"line\">C1 = 0.135000; --&gt;  C = 0.14    （重点关注）</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure></div>\n\n<p>结果同上， <code>float C = 0.125000</code> 的情况还不行。</p>\n<blockquote>\n<p><code>NSRoundPlain</code> 和 <code>NSRoundBankers</code> 都不是传统的四舍五入。<br>1、<code>NSRoundPlain</code> 是四舍六进若五前偶数进位奇数舍去。如：1.25 ~ 1.3；1.15 ~ 1.1<br>2、<code>NSRoundBankers</code> 是四舍六进若五前偶数舍去奇数进位。如：1.25 ~ 1.2；1.15 ~ 1.2</p>\n</blockquote>\n<h4 id=\"2-3、roundf\"><a href=\"#2-3、roundf\" class=\"headerlink\" title=\"2.3、roundf()\"></a>2.3、roundf()</h4><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * showX = [NSString stringWithFormat:@&quot;%0.2f&quot;,roundf(X * 100)/100];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.13</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure></div>\n\n<p>发现这个方法好像更靠谱点。</p>\n<p><strong>拓展的相关的其他函数</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">round  如果参数是小数  则求本身的四舍五入.</span><br><span class=\"line\">ceil   如果参数是小数  则求最小的整数但不小于本身.</span><br><span class=\"line\">floor  如果参数是小数  则求最大的整数但不大于本身. </span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"三、尾部清零\"><a href=\"#三、尾部清零\" class=\"headerlink\" title=\"三、尾部清零\"></a>三、尾部清零</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * floatnum = @&quot;0.125000&quot;</span><br><span class=\"line\">NSString * outNumber1 = [NSString stringWithFormat:@&quot;%@&quot;,@(floatnum.floatValue)];</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\"><a href=\"#四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\" class=\"headerlink\" title=\"四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\"></a>四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)FloatKeepTwoBitsAndRemoveAllZero:(float)floatnum &#123;</span><br><span class=\"line\">    // 保留2位小数</span><br><span class=\"line\">    NSString * tempfloat = [NSString stringWithFormat:@&quot;%0.2f&quot;,roundf(floatnum * 100)/100];</span><br><span class=\"line\">    // 末尾清零</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;%@&quot;,@(tempfloat.floatValue)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n","excerpt":"","more":"<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>测试数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float A = 0.124000;</span><br><span class=\"line\">float B = 0.124200;</span><br><span class=\"line\">float C = 0.125000;   （重点关注）</span><br><span class=\"line\">float D = 0.125001;</span><br><span class=\"line\">float E = 0.126000;</span><br></pre></td></tr></table></figure>\n<p>目的：float保留两位小数显示，四舍五入。</p>\n<h3 id=\"二、几种尝试\"><a href=\"#二、几种尝试\" class=\"headerlink\" title=\"二、几种尝试\"></a>二、几种尝试</h3><h4 id=\"2-1、最简单的方法\"><a href=\"#2-1、最简单的方法\" class=\"headerlink\" title=\"2.1、最简单的方法\"></a>2.1、最简单的方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * showA = [NSString stringWithFormat:@&quot;%0.2f&quot;,X];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.12</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure>\n<p>结果出现了一些偏差。也就是 <code>float C = 0.125000</code> 的情况。</p>\n<h4 id=\"2-2、NSDecimalNumber\"><a href=\"#2-2、NSDecimalNumber\" class=\"headerlink\" title=\"2.2、NSDecimalNumber\"></a>2.2、NSDecimalNumber</h4><ul>\n<li>进一步探讨，可查看<br><a class=\"link\"   href=\"https://www.jianshu.com/p/946c4c4aff33\" >iOS 浮点数的精确计算和四舍五入问题 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">枚举</span><br><span class=\"line\">    NSRoundPlain,   // Round up on a tie   貌似取整</span><br><span class=\"line\">    NSRoundDown,    // Always down == truncate   只舍不入</span><br><span class=\"line\">    NSRoundUp,      // Always up     只入不舍</span><br><span class=\"line\">    NSRoundBankers  // on a tie round so last digit is even   貌似四舍五入</span><br><span class=\"line\">*/</span><br><span class=\"line\">NSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers</span><br><span class=\"line\">scale:2</span><br><span class=\"line\">                                                                                       raiseOnExactness:NO</span><br><span class=\"line\">                                                                                        raiseOnOverflow:NO</span><br><span class=\"line\">                                                                                       raiseOnUnderflow:NO</span><br><span class=\"line\">                                                                                    raiseOnDivideByZero:YES];</span><br><span class=\"line\">NSDecimalNumber * ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:X];</span><br><span class=\"line\">NSDecimalNumber * roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];</span><br><span class=\"line\">NSString * showX = [NSString stringWithFormat:@&quot;%@&quot;,roundedOunces];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.12    （重点关注）</span><br><span class=\"line\">C1 = 0.135000; --&gt;  C = 0.14    （重点关注）</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure>\n\n<p>结果同上， <code>float C = 0.125000</code> 的情况还不行。</p>\n<blockquote>\n<p><code>NSRoundPlain</code> 和 <code>NSRoundBankers</code> 都不是传统的四舍五入。<br>1、<code>NSRoundPlain</code> 是四舍六进若五前偶数进位奇数舍去。如：1.25 ~ 1.3；1.15 ~ 1.1<br>2、<code>NSRoundBankers</code> 是四舍六进若五前偶数舍去奇数进位。如：1.25 ~ 1.2；1.15 ~ 1.2</p>\n</blockquote>\n<h4 id=\"2-3、roundf\"><a href=\"#2-3、roundf\" class=\"headerlink\" title=\"2.3、roundf()\"></a>2.3、roundf()</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * showX = [NSString stringWithFormat:@&quot;%0.2f&quot;,roundf(X * 100)/100];</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">A = 0.124000;  --&gt;  A = 0.12 </span><br><span class=\"line\">B = 0.124200;  --&gt;  B = 0.12 </span><br><span class=\"line\">C = 0.125000;  --&gt;  C = 0.13</span><br><span class=\"line\">D = 0.125001;  --&gt;  D = 0.13</span><br><span class=\"line\">E = 0.126000;  --&gt;  E = 0.13</span><br></pre></td></tr></table></figure>\n\n<p>发现这个方法好像更靠谱点。</p>\n<p><strong>拓展的相关的其他函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">round  如果参数是小数  则求本身的四舍五入.</span><br><span class=\"line\">ceil   如果参数是小数  则求最小的整数但不小于本身.</span><br><span class=\"line\">floor  如果参数是小数  则求最大的整数但不大于本身. </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"三、尾部清零\"><a href=\"#三、尾部清零\" class=\"headerlink\" title=\"三、尾部清零\"></a>三、尾部清零</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * floatnum = @&quot;0.125000&quot;</span><br><span class=\"line\">NSString * outNumber1 = [NSString stringWithFormat:@&quot;%@&quot;,@(floatnum.floatValue)];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\"><a href=\"#四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\" class=\"headerlink\" title=\"四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。\"></a>四、项目需求：保留2位小数（四舍五入），末尾如果是零，则不要。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)FloatKeepTwoBitsAndRemoveAllZero:(float)floatnum &#123;</span><br><span class=\"line\">    // 保留2位小数</span><br><span class=\"line\">    NSString * tempfloat = [NSString stringWithFormat:@&quot;%0.2f&quot;,roundf(floatnum * 100)/100];</span><br><span class=\"line\">    // 末尾清零</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;%@&quot;,@(tempfloat.floatValue)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS随机数生成","date":"2024-08-08T01:53:38.273Z","_content":"\n# 一、26个字母随机生成32位字符串\n```\n// 此方法随机产生32位字符串， 修改代码红色数字可以改变 随机产生的位数。\n+(NSString *)ret32bitString\n{\n    char data[32];\n    for (int x=0;x<32;data[x++] = (char)('A' + (arc4random_uniform(26))));\n    return [[NSStringalloc] initWithBytes:data length:32 encoding:NSUTF8StringEncoding];\n}\n```\n\n# 二、产生随机数\n- 获取一个随机整数范围在：[0,100)包括0，不包括100\n```\nint x = arc4random() % 100;\n```\n- 获取一个随机数范围在：[500,1000），包括500，不包括1000\n```\nint y = (arc4random() % 501) + 500;\n```\n- 获取一个随机整数，范围在[from,to），包括from，不包括to\n```\n-(int)getRandomNumber:(int)from to:(int)to\n{\n    return (int)(from + (arc4random() % (to – from +1)));\n}\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/026-iOS随机数/README.md","raw":"---\ntitle: iOS随机数生成\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n---\n\n# 一、26个字母随机生成32位字符串\n```\n// 此方法随机产生32位字符串， 修改代码红色数字可以改变 随机产生的位数。\n+(NSString *)ret32bitString\n{\n    char data[32];\n    for (int x=0;x<32;data[x++] = (char)('A' + (arc4random_uniform(26))));\n    return [[NSStringalloc] initWithBytes:data length:32 encoding:NSUTF8StringEncoding];\n}\n```\n\n# 二、产生随机数\n- 获取一个随机整数范围在：[0,100)包括0，不包括100\n```\nint x = arc4random() % 100;\n```\n- 获取一个随机数范围在：[500,1000），包括500，不包括1000\n```\nint y = (arc4random() % 501) + 500;\n```\n- 获取一个随机整数，范围在[from,to），包括from，不包括to\n```\n-(int)getRandomNumber:(int)from to:(int)to\n{\n    return (int)(from + (arc4random() % (to – from +1)));\n}\n```\n\n\n\n\n\n\n\n\n\n","slug":"iOS/OC/003-OC方法/026-iOS随机数/README","published":1,"updated":"2024-08-08T01:56:26.450Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94j003pdgxr963mb0sx","content":"<h1 id=\"一、26个字母随机生成32位字符串\"><a href=\"#一、26个字母随机生成32位字符串\" class=\"headerlink\" title=\"一、26个字母随机生成32位字符串\"></a>一、26个字母随机生成32位字符串</h1><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此方法随机产生32位字符串， 修改代码红色数字可以改变 随机产生的位数。</span><br><span class=\"line\">+(NSString *)ret32bitString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data[32];</span><br><span class=\"line\">    for (int x=0;x&lt;32;data[x++] = (char)(&#x27;A&#x27; + (arc4random_uniform(26))));</span><br><span class=\"line\">    return [[NSStringalloc] initWithBytes:data length:32 encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"二、产生随机数\"><a href=\"#二、产生随机数\" class=\"headerlink\" title=\"二、产生随机数\"></a>二、产生随机数</h1><ul>\n<li>获取一个随机整数范围在：[0,100)包括0，不包括100<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x = arc4random() % 100;</span><br></pre></td></tr></table></figure></div></li>\n<li>获取一个随机数范围在：[500,1000），包括500，不包括1000<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int y = (arc4random() % 501) + 500;</span><br></pre></td></tr></table></figure></div></li>\n<li>获取一个随机整数，范围在[from,to），包括from，不包括to<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(int)getRandomNumber:(int)from to:(int)to</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (int)(from + (arc4random() % (to – from +1)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"一、26个字母随机生成32位字符串\"><a href=\"#一、26个字母随机生成32位字符串\" class=\"headerlink\" title=\"一、26个字母随机生成32位字符串\"></a>一、26个字母随机生成32位字符串</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此方法随机产生32位字符串， 修改代码红色数字可以改变 随机产生的位数。</span><br><span class=\"line\">+(NSString *)ret32bitString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char data[32];</span><br><span class=\"line\">    for (int x=0;x&lt;32;data[x++] = (char)(&#x27;A&#x27; + (arc4random_uniform(26))));</span><br><span class=\"line\">    return [[NSStringalloc] initWithBytes:data length:32 encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、产生随机数\"><a href=\"#二、产生随机数\" class=\"headerlink\" title=\"二、产生随机数\"></a>二、产生随机数</h1><ul>\n<li>获取一个随机整数范围在：[0,100)包括0，不包括100<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x = arc4random() % 100;</span><br></pre></td></tr></table></figure></li>\n<li>获取一个随机数范围在：[500,1000），包括500，不包括1000<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int y = (arc4random() % 501) + 500;</span><br></pre></td></tr></table></figure></li>\n<li>获取一个随机整数，范围在[from,to），包括from，不包括to<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(int)getRandomNumber:(int)from to:(int)to</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (int)(from + (arc4random() % (to – from +1)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"iOS中浮点数精度丢失","date":"2024-08-08T02:50:29.204Z","_content":"\n## 参考\n\n[深入浅出iOS浮点数精度问题 (上)](https://blog.csdn.net/yangxiaohei1234/article/details/77870749)\n\n[iOS 关于网络数据解析小数位精度丢失问题的修正](https://blog.csdn.net/txz_gray/article/details/53303918)\n\n[iOS - Json解析精度丢失处理(NSString, Double, Float)](https://www.jianshu.com/p/83d4bc28cc7c)\n\n[124.浮点型数据精度不准确的探究](https://blog.csdn.net/wangyanchang21/article/details/71036031)\n\n\n## 一、引入\n\n```\ndouble firstD = 11111.7;\ndouble secondD = 22222.6;\n\nNSString * firstDStr = [NSString stringWithFormat:@\"%0.2f\",firstD];\nNSString * secondDStr = [NSString stringWithFormat:@\"%0.2f\",secondD];\n\nLXLog(@\"EE = %@ == %@\",firstDStr,secondDStr);\n\ndouble f = [firstDStr doubleValue];\ndouble s = [secondDStr doubleValue];\n\nLXLog(@\"FF = %f == %f\",f,s);\n\nLXLog(@\"GG = %.12f == %.12f\",f,s);\n```\n```\n************** Log *****************\nEE = 11111.70 == 22222.60\nFF = 11111.700000 == 22222.600000\nGG = 11111.700000000001 == 22222.599999999999\n```\n### 总结\n第一步：保留两位小数字符串，是正确的！！\n第二步：`字符串@\"11111.70\"`转换为`浮点数`，却多了几位小数。因为 C 语言中，格式化字符串默认 “%f” 默认保留到小数点后第6位。\n第三步：通过限制小数点保留具体位数，可以看到浮点数真是面目。\n\n\n## 二、查看内部存储\n\n[计算机字符编码系统（ASCII，Unicode和UTF）梳理](https://www.jianshu.com/p/d3e3eaa62731)\n[编码:隐匿在计算机软硬件背后的语言 笔记](https://www.jianshu.com/p/046c3557f3e4)\n[简单理解编码](https://www.jianshu.com/p/da7cc80237f8)\n[\"unicode\" 和 \"utf-8\"](https://www.jianshu.com/p/92f6d4294504)\n[计算机程序的思维逻辑 (6) - 如何从乱码中恢复 (上)？](https://mp.weixin.qq.com/s?__biz=MzIxOTI1NTk5Nw==&mid=2650047044&idx=1&sn=92c6a3472baaa70fa542a47c60f76b5d#rd)\n\n\n在计算机内部，所有数据类型均是以二进制的方式存储。\n\n\n二进制数的每一个位表示一个计算机位（bit，简称位），8个位组成一个字节(byte)。那么一个字节可以表示256种含义（2^8=256）。 \n\n虽然机器是基于二进制的，但对人类来说，因为二进制数太长了，需要做精简。因此需要将其转换成十六进制（hexadecimal，简称hex）。转换方式很简单，使用“8421法”将四位二进制数转换成十六进制数的一位，比如：1010（binary）会转为A（hex）。在 C 语言中，十六进制数以”0x”或“0X”开头，A表示10，F表示16。 \n\n此后，00000000~11111111就可以用0x00~0xFF来表示了。\n\n\n\n|  字符集  | 字符编码 | 简单介绍 |\n| - | :--------- | :-------- |\n| ASCII | ASCII |单字节，使用了7位 |\n| ISO-8859-1 | ISO-8859-1 |也叫Latin-1，单字节，扩展了ASCII，可解码ASCII |\n| GB2312 | GB2312 |小于0XFF用单字节，否则用双字节|\n| GBK | GBK |扩展GB2312，规则同上，可解码GB2312|\n| Unicode | UTF-8 |变长1-6字节|\n| Unicode | UTF-16 |双字节|\n| Unicode | UTF-32 |定长四字节|\n\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/028-浮点数精度丢失/README.md","raw":"---\ntitle: iOS中浮点数精度丢失\ndate: {{ date }}\ntags:\n- iOS\n- float\n---\n\n## 参考\n\n[深入浅出iOS浮点数精度问题 (上)](https://blog.csdn.net/yangxiaohei1234/article/details/77870749)\n\n[iOS 关于网络数据解析小数位精度丢失问题的修正](https://blog.csdn.net/txz_gray/article/details/53303918)\n\n[iOS - Json解析精度丢失处理(NSString, Double, Float)](https://www.jianshu.com/p/83d4bc28cc7c)\n\n[124.浮点型数据精度不准确的探究](https://blog.csdn.net/wangyanchang21/article/details/71036031)\n\n\n## 一、引入\n\n```\ndouble firstD = 11111.7;\ndouble secondD = 22222.6;\n\nNSString * firstDStr = [NSString stringWithFormat:@\"%0.2f\",firstD];\nNSString * secondDStr = [NSString stringWithFormat:@\"%0.2f\",secondD];\n\nLXLog(@\"EE = %@ == %@\",firstDStr,secondDStr);\n\ndouble f = [firstDStr doubleValue];\ndouble s = [secondDStr doubleValue];\n\nLXLog(@\"FF = %f == %f\",f,s);\n\nLXLog(@\"GG = %.12f == %.12f\",f,s);\n```\n```\n************** Log *****************\nEE = 11111.70 == 22222.60\nFF = 11111.700000 == 22222.600000\nGG = 11111.700000000001 == 22222.599999999999\n```\n### 总结\n第一步：保留两位小数字符串，是正确的！！\n第二步：`字符串@\"11111.70\"`转换为`浮点数`，却多了几位小数。因为 C 语言中，格式化字符串默认 “%f” 默认保留到小数点后第6位。\n第三步：通过限制小数点保留具体位数，可以看到浮点数真是面目。\n\n\n## 二、查看内部存储\n\n[计算机字符编码系统（ASCII，Unicode和UTF）梳理](https://www.jianshu.com/p/d3e3eaa62731)\n[编码:隐匿在计算机软硬件背后的语言 笔记](https://www.jianshu.com/p/046c3557f3e4)\n[简单理解编码](https://www.jianshu.com/p/da7cc80237f8)\n[\"unicode\" 和 \"utf-8\"](https://www.jianshu.com/p/92f6d4294504)\n[计算机程序的思维逻辑 (6) - 如何从乱码中恢复 (上)？](https://mp.weixin.qq.com/s?__biz=MzIxOTI1NTk5Nw==&mid=2650047044&idx=1&sn=92c6a3472baaa70fa542a47c60f76b5d#rd)\n\n\n在计算机内部，所有数据类型均是以二进制的方式存储。\n\n\n二进制数的每一个位表示一个计算机位（bit，简称位），8个位组成一个字节(byte)。那么一个字节可以表示256种含义（2^8=256）。 \n\n虽然机器是基于二进制的，但对人类来说，因为二进制数太长了，需要做精简。因此需要将其转换成十六进制（hexadecimal，简称hex）。转换方式很简单，使用“8421法”将四位二进制数转换成十六进制数的一位，比如：1010（binary）会转为A（hex）。在 C 语言中，十六进制数以”0x”或“0X”开头，A表示10，F表示16。 \n\n此后，00000000~11111111就可以用0x00~0xFF来表示了。\n\n\n\n|  字符集  | 字符编码 | 简单介绍 |\n| - | :--------- | :-------- |\n| ASCII | ASCII |单字节，使用了7位 |\n| ISO-8859-1 | ISO-8859-1 |也叫Latin-1，单字节，扩展了ASCII，可解码ASCII |\n| GB2312 | GB2312 |小于0XFF用单字节，否则用双字节|\n| GBK | GBK |扩展GB2312，规则同上，可解码GB2312|\n| Unicode | UTF-8 |变长1-6字节|\n| Unicode | UTF-16 |双字节|\n| Unicode | UTF-32 |定长四字节|\n\n\n\n\n","slug":"iOS/OC/003-OC方法/028-浮点数精度丢失/README","published":1,"updated":"2024-08-08T06:27:29.854Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94j003qdgxr26ij1itt","content":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a class=\"link\"   href=\"https://blog.csdn.net/yangxiaohei1234/article/details/77870749\" >深入浅出iOS浮点数精度问题 (上) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/txz_gray/article/details/53303918\" >iOS 关于网络数据解析小数位精度丢失问题的修正 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/83d4bc28cc7c\" >iOS - Json解析精度丢失处理(NSString, Double, Float) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/wangyanchang21/article/details/71036031\" >124.浮点型数据精度不准确的探究 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"一、引入\"><a href=\"#一、引入\" class=\"headerlink\" title=\"一、引入\"></a>一、引入</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double firstD = 11111.7;</span><br><span class=\"line\">double secondD = 22222.6;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * firstDStr = [NSString stringWithFormat:@&quot;%0.2f&quot;,firstD];</span><br><span class=\"line\">NSString * secondDStr = [NSString stringWithFormat:@&quot;%0.2f&quot;,secondD];</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;EE = %@ == %@&quot;,firstDStr,secondDStr);</span><br><span class=\"line\"></span><br><span class=\"line\">double f = [firstDStr doubleValue];</span><br><span class=\"line\">double s = [secondDStr doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;FF = %f == %f&quot;,f,s);</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;GG = %.12f == %.12f&quot;,f,s);</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">************** Log *****************</span><br><span class=\"line\">EE = 11111.70 == 22222.60</span><br><span class=\"line\">FF = 11111.700000 == 22222.600000</span><br><span class=\"line\">GG = 11111.700000000001 == 22222.599999999999</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>第一步：保留两位小数字符串，是正确的！！<br>第二步：<code>字符串@&quot;11111.70&quot;</code>转换为<code>浮点数</code>，却多了几位小数。因为 C 语言中，格式化字符串默认 “%f” 默认保留到小数点后第6位。<br>第三步：通过限制小数点保留具体位数，可以看到浮点数真是面目。</p>\n<h2 id=\"二、查看内部存储\"><a href=\"#二、查看内部存储\" class=\"headerlink\" title=\"二、查看内部存储\"></a>二、查看内部存储</h2><p><a class=\"link\"   href=\"https://www.jianshu.com/p/d3e3eaa62731\" >计算机字符编码系统（ASCII，Unicode和UTF）梳理 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/046c3557f3e4\" >编码:隐匿在计算机软硬件背后的语言 笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/da7cc80237f8\" >简单理解编码 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/92f6d4294504\" >“unicode” 和 “utf-8” <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://mp.weixin.qq.com/s?__biz=MzIxOTI1NTk5Nw==&mid=2650047044&idx=1&sn=92c6a3472baaa70fa542a47c60f76b5d#rd\" >计算机程序的思维逻辑 (6) - 如何从乱码中恢复 (上)？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>在计算机内部，所有数据类型均是以二进制的方式存储。</p>\n<p>二进制数的每一个位表示一个计算机位（bit，简称位），8个位组成一个字节(byte)。那么一个字节可以表示256种含义（2^8&#x3D;256）。 </p>\n<p>虽然机器是基于二进制的，但对人类来说，因为二进制数太长了，需要做精简。因此需要将其转换成十六进制（hexadecimal，简称hex）。转换方式很简单，使用“8421法”将四位二进制数转换成十六进制数的一位，比如：1010（binary）会转为A（hex）。在 C 语言中，十六进制数以”0x”或“0X”开头，A表示10，F表示16。 </p>\n<p>此后，00000000<del>11111111就可以用0x00</del>0xFF来表示了。</p>\n<table>\n<thead>\n<tr>\n<th>字符集</th>\n<th align=\"left\">字符编码</th>\n<th align=\"left\">简单介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASCII</td>\n<td align=\"left\">ASCII</td>\n<td align=\"left\">单字节，使用了7位</td>\n</tr>\n<tr>\n<td>ISO-8859-1</td>\n<td align=\"left\">ISO-8859-1</td>\n<td align=\"left\">也叫Latin-1，单字节，扩展了ASCII，可解码ASCII</td>\n</tr>\n<tr>\n<td>GB2312</td>\n<td align=\"left\">GB2312</td>\n<td align=\"left\">小于0XFF用单字节，否则用双字节</td>\n</tr>\n<tr>\n<td>GBK</td>\n<td align=\"left\">GBK</td>\n<td align=\"left\">扩展GB2312，规则同上，可解码GB2312</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-8</td>\n<td align=\"left\">变长1-6字节</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-16</td>\n<td align=\"left\">双字节</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-32</td>\n<td align=\"left\">定长四字节</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a class=\"link\"   href=\"https://blog.csdn.net/yangxiaohei1234/article/details/77870749\" >深入浅出iOS浮点数精度问题 (上) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/txz_gray/article/details/53303918\" >iOS 关于网络数据解析小数位精度丢失问题的修正 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/83d4bc28cc7c\" >iOS - Json解析精度丢失处理(NSString, Double, Float) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/wangyanchang21/article/details/71036031\" >124.浮点型数据精度不准确的探究 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"一、引入\"><a href=\"#一、引入\" class=\"headerlink\" title=\"一、引入\"></a>一、引入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double firstD = 11111.7;</span><br><span class=\"line\">double secondD = 22222.6;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * firstDStr = [NSString stringWithFormat:@&quot;%0.2f&quot;,firstD];</span><br><span class=\"line\">NSString * secondDStr = [NSString stringWithFormat:@&quot;%0.2f&quot;,secondD];</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;EE = %@ == %@&quot;,firstDStr,secondDStr);</span><br><span class=\"line\"></span><br><span class=\"line\">double f = [firstDStr doubleValue];</span><br><span class=\"line\">double s = [secondDStr doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;FF = %f == %f&quot;,f,s);</span><br><span class=\"line\"></span><br><span class=\"line\">LXLog(@&quot;GG = %.12f == %.12f&quot;,f,s);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">************** Log *****************</span><br><span class=\"line\">EE = 11111.70 == 22222.60</span><br><span class=\"line\">FF = 11111.700000 == 22222.600000</span><br><span class=\"line\">GG = 11111.700000000001 == 22222.599999999999</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>第一步：保留两位小数字符串，是正确的！！<br>第二步：<code>字符串@&quot;11111.70&quot;</code>转换为<code>浮点数</code>，却多了几位小数。因为 C 语言中，格式化字符串默认 “%f” 默认保留到小数点后第6位。<br>第三步：通过限制小数点保留具体位数，可以看到浮点数真是面目。</p>\n<h2 id=\"二、查看内部存储\"><a href=\"#二、查看内部存储\" class=\"headerlink\" title=\"二、查看内部存储\"></a>二、查看内部存储</h2><p><a class=\"link\"   href=\"https://www.jianshu.com/p/d3e3eaa62731\" >计算机字符编码系统（ASCII，Unicode和UTF）梳理 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/046c3557f3e4\" >编码:隐匿在计算机软硬件背后的语言 笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/da7cc80237f8\" >简单理解编码 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/92f6d4294504\" >“unicode” 和 “utf-8” <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://mp.weixin.qq.com/s?__biz=MzIxOTI1NTk5Nw==&mid=2650047044&idx=1&sn=92c6a3472baaa70fa542a47c60f76b5d#rd\" >计算机程序的思维逻辑 (6) - 如何从乱码中恢复 (上)？ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>在计算机内部，所有数据类型均是以二进制的方式存储。</p>\n<p>二进制数的每一个位表示一个计算机位（bit，简称位），8个位组成一个字节(byte)。那么一个字节可以表示256种含义（2^8&#x3D;256）。 </p>\n<p>虽然机器是基于二进制的，但对人类来说，因为二进制数太长了，需要做精简。因此需要将其转换成十六进制（hexadecimal，简称hex）。转换方式很简单，使用“8421法”将四位二进制数转换成十六进制数的一位，比如：1010（binary）会转为A（hex）。在 C 语言中，十六进制数以”0x”或“0X”开头，A表示10，F表示16。 </p>\n<p>此后，00000000<del>11111111就可以用0x00</del>0xFF来表示了。</p>\n<table>\n<thead>\n<tr>\n<th>字符集</th>\n<th align=\"left\">字符编码</th>\n<th align=\"left\">简单介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ASCII</td>\n<td align=\"left\">ASCII</td>\n<td align=\"left\">单字节，使用了7位</td>\n</tr>\n<tr>\n<td>ISO-8859-1</td>\n<td align=\"left\">ISO-8859-1</td>\n<td align=\"left\">也叫Latin-1，单字节，扩展了ASCII，可解码ASCII</td>\n</tr>\n<tr>\n<td>GB2312</td>\n<td align=\"left\">GB2312</td>\n<td align=\"left\">小于0XFF用单字节，否则用双字节</td>\n</tr>\n<tr>\n<td>GBK</td>\n<td align=\"left\">GBK</td>\n<td align=\"left\">扩展GB2312，规则同上，可解码GB2312</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-8</td>\n<td align=\"left\">变长1-6字节</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-16</td>\n<td align=\"left\">双字节</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td align=\"left\">UTF-32</td>\n<td align=\"left\">定长四字节</td>\n</tr>\n</tbody></table>\n"},{"title":"iOS宏(define)与常量(const)","date":"2024-08-08T02:23:15.862Z","_content":"\n\n\n### 参考文档\n* [iOS 宏(define)与常量(const)的正确使用](https://www.jianshu.com/p/f83335e036b5)\n* [15分钟弄懂 const 和 #define](http://www.cocoachina.com/ios/20160519/16342.html)\n\n>注：配合我的文档[《static、const、extern简介与使用》](https://www.jianshu.com/p/2b0750a77284)一起看更佳！！！\n\n-----\n# Part 1 - 理解部分\n\n-----\n## 一、什么是const ?\n>const是C/C++中的一个关键字(修饰符), const一般用来定义一个常量, 既然叫做常量, 即以后再也不能修改其值.\n\n![const定义常量](003.png)\n\n## 二、什么是#define?\n>define, 宏定义, 则是一条预编译指令, 编译器在编译阶段会将所有使用到宏的地方简单地进行替换. 如下图所示 :\n\n![宏定义的替换](004.png)\n\n## 三、他们有什么用?\n\n* const 和 define 都能定义一个常量, 都能实现修改值修改一次, 则所有用上该常量的地方都同步改值, 一句代码都不用改.\n\n* 使代码更易维护\n\n* 提高代码的效率\n\n## 四、他们有什么区别?\n\n* 相同点\n  * 都能定义常量\n\n* 不同点\n   * **const有修饰功能** ：除了定义常量外，const 还有强大的修饰功能。#define 能增加程序的可读性，有些复杂的功能只需一条宏显示。\n  * **类型检查**：const 对数据进行类型检查。#define 无需进行类型检查。定义宏参数时需将参数（）起来。而且调用时参数不应在宏中再做运算。\n  * **内存消耗**：const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干个拷贝，所以宏在程序运行过程中所消耗的内存要比const变量的大得多。\n\n![分配内存](005.png)\n\n   * 编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率比宏定义要高\n\n* 宏能做到const不能办到的事.\n  * 宏能定义函数\n  * OC的单例模式用到宏\n  * 宏还能根据传入的参数生成字符串, 如下\n\n![image](006.png)\n\n\n\n\n-----\n# Part 2 - 实战部分\n\n-----\n\n## 五、define与const使用\n你能区分下面的吗？知道什么时候用吗？\n\n```\n#define HSCoder @\"AAAAAA\"\nNSString *HSCoder = @\"AAAAAA\";\nextern NSString *HSCoder;\nextern const NSString *HSCoder;\n\nstatic const NSString *HSCoder = @\"AAAAAA\";\n\nconst NSString *HSCoder = @\"AAAAAA\";\nNSString const *HSCoder = @\"AAAAAA\";\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n### 宏：\n```\n#define HSCoder @\"AAAAAA\"\n```\n### 变量：\n```\nNSString *HSCoder = @\"AAAAAA\";\n```\n### 常量：\n四种写法：\n```\nstatic const NSString *HSCoder = @\"AAAAAA\";\nconst NSString *HSCoder = @\"AAAAAA\";\nNSString const *HSCoder = @\"AAAAAA\";\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n\n### 常量区分\n* 全局常量：不管你定义在任何文件夹，外部都能访问\n```\nconst NSString *HSCoder = @\"AAAAAA\";\n```\n* 局部常量：用static修饰后，不能提供外界访问\n```\nstatic const NSString *HSCoder = @\"AAAAAA\";\n```\n\n### const修饰位置不同，代表什么？\n```\n1.const NSString *HSCoder = @\"AAAAAA\";\n\"*HSCoder\"不能被修改， \"HSCoder\"能被修改\n2.NSString const *HSCoder = @\"AAAAAA\";\n\"*HSCoder\"不能被修改， \"HSCoder\"能被修改\n3.NSString * const HSCoder = @\"AAAAAA\";\n\"HSCoder\"不能被修改，\"*HSCoder\"能被修改\n```\n\n**注意：1和2其实没什么区别**\n\n**结论：const右边的总不能被修改**\n\n**所以一般我们定义一个常量又不想被修改应该这样：**\n```\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n## 我的使用\n\n\n![h文件](001.png)\n\n\n![m文件](002.png)\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README.md","raw":"---\ntitle: iOS宏(define)与常量(const)\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- define\n- const\n---\n\n\n\n### 参考文档\n* [iOS 宏(define)与常量(const)的正确使用](https://www.jianshu.com/p/f83335e036b5)\n* [15分钟弄懂 const 和 #define](http://www.cocoachina.com/ios/20160519/16342.html)\n\n>注：配合我的文档[《static、const、extern简介与使用》](https://www.jianshu.com/p/2b0750a77284)一起看更佳！！！\n\n-----\n# Part 1 - 理解部分\n\n-----\n## 一、什么是const ?\n>const是C/C++中的一个关键字(修饰符), const一般用来定义一个常量, 既然叫做常量, 即以后再也不能修改其值.\n\n![const定义常量](003.png)\n\n## 二、什么是#define?\n>define, 宏定义, 则是一条预编译指令, 编译器在编译阶段会将所有使用到宏的地方简单地进行替换. 如下图所示 :\n\n![宏定义的替换](004.png)\n\n## 三、他们有什么用?\n\n* const 和 define 都能定义一个常量, 都能实现修改值修改一次, 则所有用上该常量的地方都同步改值, 一句代码都不用改.\n\n* 使代码更易维护\n\n* 提高代码的效率\n\n## 四、他们有什么区别?\n\n* 相同点\n  * 都能定义常量\n\n* 不同点\n   * **const有修饰功能** ：除了定义常量外，const 还有强大的修饰功能。#define 能增加程序的可读性，有些复杂的功能只需一条宏显示。\n  * **类型检查**：const 对数据进行类型检查。#define 无需进行类型检查。定义宏参数时需将参数（）起来。而且调用时参数不应在宏中再做运算。\n  * **内存消耗**：const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干个拷贝，所以宏在程序运行过程中所消耗的内存要比const变量的大得多。\n\n![分配内存](005.png)\n\n   * 编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率比宏定义要高\n\n* 宏能做到const不能办到的事.\n  * 宏能定义函数\n  * OC的单例模式用到宏\n  * 宏还能根据传入的参数生成字符串, 如下\n\n![image](006.png)\n\n\n\n\n-----\n# Part 2 - 实战部分\n\n-----\n\n## 五、define与const使用\n你能区分下面的吗？知道什么时候用吗？\n\n```\n#define HSCoder @\"AAAAAA\"\nNSString *HSCoder = @\"AAAAAA\";\nextern NSString *HSCoder;\nextern const NSString *HSCoder;\n\nstatic const NSString *HSCoder = @\"AAAAAA\";\n\nconst NSString *HSCoder = @\"AAAAAA\";\nNSString const *HSCoder = @\"AAAAAA\";\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n### 宏：\n```\n#define HSCoder @\"AAAAAA\"\n```\n### 变量：\n```\nNSString *HSCoder = @\"AAAAAA\";\n```\n### 常量：\n四种写法：\n```\nstatic const NSString *HSCoder = @\"AAAAAA\";\nconst NSString *HSCoder = @\"AAAAAA\";\nNSString const *HSCoder = @\"AAAAAA\";\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n\n### 常量区分\n* 全局常量：不管你定义在任何文件夹，外部都能访问\n```\nconst NSString *HSCoder = @\"AAAAAA\";\n```\n* 局部常量：用static修饰后，不能提供外界访问\n```\nstatic const NSString *HSCoder = @\"AAAAAA\";\n```\n\n### const修饰位置不同，代表什么？\n```\n1.const NSString *HSCoder = @\"AAAAAA\";\n\"*HSCoder\"不能被修改， \"HSCoder\"能被修改\n2.NSString const *HSCoder = @\"AAAAAA\";\n\"*HSCoder\"不能被修改， \"HSCoder\"能被修改\n3.NSString * const HSCoder = @\"AAAAAA\";\n\"HSCoder\"不能被修改，\"*HSCoder\"能被修改\n```\n\n**注意：1和2其实没什么区别**\n\n**结论：const右边的总不能被修改**\n\n**所以一般我们定义一个常量又不想被修改应该这样：**\n```\nNSString * const HSCoder = @\"AAAAAA\";\n```\n\n## 我的使用\n\n\n![h文件](001.png)\n\n\n![m文件](002.png)\n\n\n\n","slug":"iOS/OC/003-OC方法/029-宏(define)与常量(const)/README","published":1,"updated":"2024-08-08T02:31:50.777Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94k003rdgxrc1hjezay","content":"<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/f83335e036b5\" >iOS 宏(define)与常量(const)的正确使用 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"http://www.cocoachina.com/ios/20160519/16342.html\" >15分钟弄懂 const 和 #define <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<blockquote>\n<p>注：配合我的文档<a class=\"link\"   href=\"https://www.jianshu.com/p/2b0750a77284\" >《static、const、extern简介与使用》 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>一起看更佳！！！</p>\n</blockquote>\n<hr>\n<h1 id=\"Part-1-理解部分\"><a href=\"#Part-1-理解部分\" class=\"headerlink\" title=\"Part 1 - 理解部分\"></a>Part 1 - 理解部分</h1><hr>\n<h2 id=\"一、什么是const\"><a href=\"#一、什么是const\" class=\"headerlink\" title=\"一、什么是const ?\"></a>一、什么是const ?</h2><blockquote>\n<p>const是C&#x2F;C++中的一个关键字(修饰符), const一般用来定义一个常量, 既然叫做常量, 即以后再也不能修改其值.</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/003.png\"\n                      alt=\"const定义常量\"\n                ></p>\n<h2 id=\"二、什么是-define\"><a href=\"#二、什么是-define\" class=\"headerlink\" title=\"二、什么是#define?\"></a>二、什么是#define?</h2><blockquote>\n<p>define, 宏定义, 则是一条预编译指令, 编译器在编译阶段会将所有使用到宏的地方简单地进行替换. 如下图所示 :</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/004.png\"\n                      alt=\"宏定义的替换\"\n                ></p>\n<h2 id=\"三、他们有什么用\"><a href=\"#三、他们有什么用\" class=\"headerlink\" title=\"三、他们有什么用?\"></a>三、他们有什么用?</h2><ul>\n<li><p>const 和 define 都能定义一个常量, 都能实现修改值修改一次, 则所有用上该常量的地方都同步改值, 一句代码都不用改.</p>\n</li>\n<li><p>使代码更易维护</p>\n</li>\n<li><p>提高代码的效率</p>\n</li>\n</ul>\n<h2 id=\"四、他们有什么区别\"><a href=\"#四、他们有什么区别\" class=\"headerlink\" title=\"四、他们有什么区别?\"></a>四、他们有什么区别?</h2><ul>\n<li><p>相同点</p>\n<ul>\n<li>都能定义常量</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li><strong>const有修饰功能</strong> ：除了定义常量外，const 还有强大的修饰功能。#define 能增加程序的可读性，有些复杂的功能只需一条宏显示。</li>\n<li><strong>类型检查</strong>：const 对数据进行类型检查。#define 无需进行类型检查。定义宏参数时需将参数（）起来。而且调用时参数不应在宏中再做运算。</li>\n<li><strong>内存消耗</strong>：const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干个拷贝，所以宏在程序运行过程中所消耗的内存要比const变量的大得多。</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/005.png\"\n                      alt=\"分配内存\"\n                ></p>\n<ul>\n<li><p>编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率比宏定义要高</p>\n</li>\n<li><p>宏能做到const不能办到的事.</p>\n<ul>\n<li>宏能定义函数</li>\n<li>OC的单例模式用到宏</li>\n<li>宏还能根据传入的参数生成字符串, 如下</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/006.png\"\n                      alt=\"image\"\n                ></p>\n<hr>\n<h1 id=\"Part-2-实战部分\"><a href=\"#Part-2-实战部分\" class=\"headerlink\" title=\"Part 2 - 实战部分\"></a>Part 2 - 实战部分</h1><hr>\n<h2 id=\"五、define与const使用\"><a href=\"#五、define与const使用\" class=\"headerlink\" title=\"五、define与const使用\"></a>五、define与const使用</h2><p>你能区分下面的吗？知道什么时候用吗？</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define HSCoder @&quot;AAAAAA&quot;</span><br><span class=\"line\">NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">extern NSString *HSCoder;</span><br><span class=\"line\">extern const NSString *HSCoder;</span><br><span class=\"line\"></span><br><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"宏：\"><a href=\"#宏：\" class=\"headerlink\" title=\"宏：\"></a>宏：</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define HSCoder @&quot;AAAAAA&quot;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"变量：\"><a href=\"#变量：\" class=\"headerlink\" title=\"变量：\"></a>变量：</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常量：\"><a href=\"#常量：\" class=\"headerlink\" title=\"常量：\"></a>常量：</h3><p>四种写法：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"常量区分\"><a href=\"#常量区分\" class=\"headerlink\" title=\"常量区分\"></a>常量区分</h3><ul>\n<li>全局常量：不管你定义在任何文件夹，外部都能访问<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div></li>\n<li>局部常量：用static修饰后，不能提供外界访问<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"const修饰位置不同，代表什么？\"><a href=\"#const修饰位置不同，代表什么？\" class=\"headerlink\" title=\"const修饰位置不同，代表什么？\"></a>const修饰位置不同，代表什么？</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class=\"line\">2.NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class=\"line\">3.NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;HSCoder&quot;不能被修改，&quot;*HSCoder&quot;能被修改</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：1和2其实没什么区别</strong></p>\n<p><strong>结论：const右边的总不能被修改</strong></p>\n<p><strong>所以一般我们定义一个常量又不想被修改应该这样：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"我的使用\"><a href=\"#我的使用\" class=\"headerlink\" title=\"我的使用\"></a>我的使用</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/001.png\"\n                      alt=\"h文件\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/002.png\"\n                      alt=\"m文件\"\n                ></p>\n","excerpt":"","more":"<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a class=\"link\"   href=\"https://www.jianshu.com/p/f83335e036b5\" >iOS 宏(define)与常量(const)的正确使用 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"http://www.cocoachina.com/ios/20160519/16342.html\" >15分钟弄懂 const 和 #define <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<blockquote>\n<p>注：配合我的文档<a class=\"link\"   href=\"https://www.jianshu.com/p/2b0750a77284\" >《static、const、extern简介与使用》 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>一起看更佳！！！</p>\n</blockquote>\n<hr>\n<h1 id=\"Part-1-理解部分\"><a href=\"#Part-1-理解部分\" class=\"headerlink\" title=\"Part 1 - 理解部分\"></a>Part 1 - 理解部分</h1><hr>\n<h2 id=\"一、什么是const\"><a href=\"#一、什么是const\" class=\"headerlink\" title=\"一、什么是const ?\"></a>一、什么是const ?</h2><blockquote>\n<p>const是C&#x2F;C++中的一个关键字(修饰符), const一般用来定义一个常量, 既然叫做常量, 即以后再也不能修改其值.</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/003.png\"\n                      alt=\"const定义常量\"\n                ></p>\n<h2 id=\"二、什么是-define\"><a href=\"#二、什么是-define\" class=\"headerlink\" title=\"二、什么是#define?\"></a>二、什么是#define?</h2><blockquote>\n<p>define, 宏定义, 则是一条预编译指令, 编译器在编译阶段会将所有使用到宏的地方简单地进行替换. 如下图所示 :</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/004.png\"\n                      alt=\"宏定义的替换\"\n                ></p>\n<h2 id=\"三、他们有什么用\"><a href=\"#三、他们有什么用\" class=\"headerlink\" title=\"三、他们有什么用?\"></a>三、他们有什么用?</h2><ul>\n<li><p>const 和 define 都能定义一个常量, 都能实现修改值修改一次, 则所有用上该常量的地方都同步改值, 一句代码都不用改.</p>\n</li>\n<li><p>使代码更易维护</p>\n</li>\n<li><p>提高代码的效率</p>\n</li>\n</ul>\n<h2 id=\"四、他们有什么区别\"><a href=\"#四、他们有什么区别\" class=\"headerlink\" title=\"四、他们有什么区别?\"></a>四、他们有什么区别?</h2><ul>\n<li><p>相同点</p>\n<ul>\n<li>都能定义常量</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li><strong>const有修饰功能</strong> ：除了定义常量外，const 还有强大的修饰功能。#define 能增加程序的可读性，有些复杂的功能只需一条宏显示。</li>\n<li><strong>类型检查</strong>：const 对数据进行类型检查。#define 无需进行类型检查。定义宏参数时需将参数（）起来。而且调用时参数不应在宏中再做运算。</li>\n<li><strong>内存消耗</strong>：const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干个拷贝，所以宏在程序运行过程中所消耗的内存要比const变量的大得多。</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/005.png\"\n                      alt=\"分配内存\"\n                ></p>\n<ul>\n<li><p>编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率比宏定义要高</p>\n</li>\n<li><p>宏能做到const不能办到的事.</p>\n<ul>\n<li>宏能定义函数</li>\n<li>OC的单例模式用到宏</li>\n<li>宏还能根据传入的参数生成字符串, 如下</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/006.png\"\n                      alt=\"image\"\n                ></p>\n<hr>\n<h1 id=\"Part-2-实战部分\"><a href=\"#Part-2-实战部分\" class=\"headerlink\" title=\"Part 2 - 实战部分\"></a>Part 2 - 实战部分</h1><hr>\n<h2 id=\"五、define与const使用\"><a href=\"#五、define与const使用\" class=\"headerlink\" title=\"五、define与const使用\"></a>五、define与const使用</h2><p>你能区分下面的吗？知道什么时候用吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define HSCoder @&quot;AAAAAA&quot;</span><br><span class=\"line\">NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">extern NSString *HSCoder;</span><br><span class=\"line\">extern const NSString *HSCoder;</span><br><span class=\"line\"></span><br><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"宏：\"><a href=\"#宏：\" class=\"headerlink\" title=\"宏：\"></a>宏：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define HSCoder @&quot;AAAAAA&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量：\"><a href=\"#变量：\" class=\"headerlink\" title=\"变量：\"></a>变量：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量：\"><a href=\"#常量：\" class=\"headerlink\" title=\"常量：\"></a>常量：</h3><p>四种写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"常量区分\"><a href=\"#常量区分\" class=\"headerlink\" title=\"常量区分\"></a>常量区分</h3><ul>\n<li>全局常量：不管你定义在任何文件夹，外部都能访问<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></li>\n<li>局部常量：用static修饰后，不能提供外界访问<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"const修饰位置不同，代表什么？\"><a href=\"#const修饰位置不同，代表什么？\" class=\"headerlink\" title=\"const修饰位置不同，代表什么？\"></a>const修饰位置不同，代表什么？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.const NSString *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class=\"line\">2.NSString const *HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class=\"line\">3.NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br><span class=\"line\">&quot;HSCoder&quot;不能被修改，&quot;*HSCoder&quot;能被修改</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：1和2其实没什么区别</strong></p>\n<p><strong>结论：const右边的总不能被修改</strong></p>\n<p><strong>所以一般我们定义一个常量又不想被修改应该这样：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * const HSCoder = @&quot;AAAAAA&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我的使用\"><a href=\"#我的使用\" class=\"headerlink\" title=\"我的使用\"></a>我的使用</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/001.png\"\n                      alt=\"h文件\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2024/08/08/iOS/OC/003-OC%E6%96%B9%E6%B3%95/029-%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)/README/002.png\"\n                      alt=\"m文件\"\n                ></p>\n"},{"title":"iOS开发常用宏(define)","date":"2024-08-08T08:44:48.801Z","_content":"\n[iOS 日常工作之常用宏定义大全](https://www.jianshu.com/p/213b3b96cafe)\n[iOS-OC中常见的一些宏](https://www.jianshu.com/p/7e657365d2e6)\n[YYCategories](https://github.com/ibireme/YYCategories)\n\n\n## 目录\n\n- **1、长、宽、高**\n- **2、判断设备、系统版本**\n- **3、dispatch_main_async_safe**\n- **4、WeakSelf、StrongSelf**\n- **5、View 圆角、边框**\n- **6、获取沙盒路径**\n- **7、随机数**\n- **8、颜色设置相关**\n- **9、NSLog**\n\n**后续再更新...**\n\n\n### 1、长、宽、高\n```\n// W H\n#define kSCREEN_SIZE [UIScreen mainScreen].bounds.size\n#define kSCREEN_WIDTH [UIScreen mainScreen].bounds.size.width\n#define kSCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height\n\n#define kSTATUS_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?44:20) // 适配刘海屏状态栏\n#define kTABBAR_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?83:49) // 适配刘海屏底栏高度\n#define kBOTTOM_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?34:0)  // 适配刘海屏底部多出来的高度\n```\n\n### 2、判断设备、系统版本\n```\n//----------------判断当前的iPhone设备/系统版本---------------\n// 判断是否为iPhone\n#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n// 判断是否为iPad\n#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)\n// 判断是否为ipod\n#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@\"iPod touch\"])\n\n//----------------判断系统版本---------------\n// 获取系统版本\n#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]\n// 判断 iOS 8 或更高的系统版本\n#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=8.0)? (YES):(NO))\n// 判断 iOS 10 或更高的系统版本\n#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=10.0)? (YES):(NO))\n\n//----------------判断机型 根据尺寸---------------\n// 判断是否为 iPhone 4/4S - 3.5 inch\n#define iPhone4_4S [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 480.0f\n// 判断是否为 iPhone 5/5SE - 4.0 inch\n#define iPhone5_5SE [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 568.0f\n// 判断是否为iPhone 6/6S/7/8 - 4.7 inch\n#define iPhone6_6S [[UIScreen mainScreen] bounds].size.width == 375.0f && [[UIScreen mainScreen] bounds].size.height == 667.0f\n// 判断是否为iPhone 6Plus/6SPlus/7P/8P - 5.5 inch\n#define iPhone6Plus_8Plus [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f\n// 判断是否为iPhoneX - 5.8 inch\n#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXS - 5.8 inch\n#define iPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXR - 6.1 inch\n#define iPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXS MAX - 6.5 inch\n#define iPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) : NO)\n\n// 主要是用于区分是否是 刘海屏\n#define LiuHaiPhone \\\n({BOOL isLiuHaiPhone = NO;\\\nif (@available(iOS 11.0, *)) {\\\nisLiuHaiPhone = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom > 0.0;\\\n}\\\n(isLiuHaiPhone);})\n```\n\n\n\n\n\n\n### 3、dispatch_main_async_safe\n```\n#ifndef dispatch_main_async_safe\n#define dispatch_main_async_safe(block)\\\nif (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {\\\nblock();\\\n} else {\\\ndispatch_async(dispatch_get_main_queue(), block);\\\n}\n#endif\n```\n\nHow to use?\n \n```\n dispatch_main_async_safe(^{\n     // UI in Main Thread\n });\n```\n详情\n> 参考与 `SDWebimage` 源码中，更详细的可参考 [SDWebImage4.0源码探究（一）面试题\n](https://www.jianshu.com/p/b8517dc833c7) 中 **第七条 SDWebImage 如何保证UI操作放在主线程中执行？**\n\n\n### 4、WeakSelf、StrongSelf\n\n```\n#define WeakSelf(type)    __weak typeof(type) weak##type = type;\n#define StrongSelf(type)  __strong typeof(type) type = weak##type;\n```\n\n```\n__weak __typeof(self)weakSelf = self;\nAFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n    __strong __typeof(weakSelf)strongSelf = weakSelf;\n\n    strongSelf.networkReachabilityStatus = status;\n    if (strongSelf.networkReachabilityStatusBlock) {\n        strongSelf.networkReachabilityStatusBlock(status);\n    }\n};\n```\n\n\n```\n// 使用一：\n    WeakSelf(self);\n    [btn mas_makeConstraints:^(MASConstraintMaker *make) {\n        StrongSelf(self);\n        make.left.equalTo(self.view);\n    }];\n   \n// 使用二： \n    WeakSelf(self);\n    [btn mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(weakself.view);\n    }];\n```\n\n\n### 5、View 圆角、边框\n```\n#define LXViewBorderRadius(View, Radius, Width, UIColor)\\\n\\\n[View.layer setCornerRadius:(Radius)];\\\n[View.layer setMasksToBounds:YES];\\\n[View.layer setBorderWidth:(Width)];\\\n[View.layer setBorderColor:[Color CGColor]]\n```\n\n\n\n### 6、获取沙盒路径\n```\n//--------------沙盒目录文件路径---------------\n// 获取沙盒主目录路径\n#define LXSBPath_Home = NSHomeDirectory();\n//获取沙盒 Document\n#define LXSBPath_Document [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]\n//获取沙盒 Library\n#define LXSBPath_Library [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject];\n//获取沙盒 Cache\n#define LXSBPath_Cache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]\n//获取temp\n#define LXSBPath_Temp NSTemporaryDirectory()\n```\n\n### 7、随机数\n```\n//--------------生成随机数---------------\n#define LXRandNum(i) arc4random()%i   // [0,i) 范围内随机数\n#define LXRandNum_FromTo(i,j) (i + (arc4random() % (j – i + 1)))\n```\n\n\n### 8、颜色设置相关\n```\n//---------------Colour-------------------\n// 设置随机颜色\n#define LXRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]\n// 设置RGB颜色/设置RGBA颜色\n#define LXRGBAColor(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]\n#define LXRGBColor(r, g, b)      LXRGBAColor(r,g,b,1.0f)\n// 十六进制数值 eg:@\"#3499DB\"\n#define LXCOLOR_WITH_HEX [UIColor colorFromHexString: hexValue]\n#define LXCOLOR_WITH_HEX_1(hexValue) [UIColor colorWithRed:((float)((hexValue & 0xFF0000) >> 16)) / 255.0 green:((float)((hexValue & 0xFF00) >> 8)) / 255.0 blue:((float)(hexValue & 0xFF)) / 255.0 alpha:1.0f]\n```\n\n### 9、NSLog\n```\n//-------------- NSLog在release下不输出 ---------------\n#ifndef __OPTIMIZE__\n#define NSLog(...) NSLog(__VA_ARGS__)\n#else\n# define NSLog(...) {}\n#endif\n```\n\n\n\n","source":"_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/iOS开发常用宏.md","raw":"---\ntitle: iOS开发常用宏(define)\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- define\n---\n\n[iOS 日常工作之常用宏定义大全](https://www.jianshu.com/p/213b3b96cafe)\n[iOS-OC中常见的一些宏](https://www.jianshu.com/p/7e657365d2e6)\n[YYCategories](https://github.com/ibireme/YYCategories)\n\n\n## 目录\n\n- **1、长、宽、高**\n- **2、判断设备、系统版本**\n- **3、dispatch_main_async_safe**\n- **4、WeakSelf、StrongSelf**\n- **5、View 圆角、边框**\n- **6、获取沙盒路径**\n- **7、随机数**\n- **8、颜色设置相关**\n- **9、NSLog**\n\n**后续再更新...**\n\n\n### 1、长、宽、高\n```\n// W H\n#define kSCREEN_SIZE [UIScreen mainScreen].bounds.size\n#define kSCREEN_WIDTH [UIScreen mainScreen].bounds.size.width\n#define kSCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height\n\n#define kSTATUS_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?44:20) // 适配刘海屏状态栏\n#define kTABBAR_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?83:49) // 适配刘海屏底栏高度\n#define kBOTTOM_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?34:0)  // 适配刘海屏底部多出来的高度\n```\n\n### 2、判断设备、系统版本\n```\n//----------------判断当前的iPhone设备/系统版本---------------\n// 判断是否为iPhone\n#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n// 判断是否为iPad\n#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)\n// 判断是否为ipod\n#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@\"iPod touch\"])\n\n//----------------判断系统版本---------------\n// 获取系统版本\n#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]\n// 判断 iOS 8 或更高的系统版本\n#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=8.0)? (YES):(NO))\n// 判断 iOS 10 或更高的系统版本\n#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=10.0)? (YES):(NO))\n\n//----------------判断机型 根据尺寸---------------\n// 判断是否为 iPhone 4/4S - 3.5 inch\n#define iPhone4_4S [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 480.0f\n// 判断是否为 iPhone 5/5SE - 4.0 inch\n#define iPhone5_5SE [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 568.0f\n// 判断是否为iPhone 6/6S/7/8 - 4.7 inch\n#define iPhone6_6S [[UIScreen mainScreen] bounds].size.width == 375.0f && [[UIScreen mainScreen] bounds].size.height == 667.0f\n// 判断是否为iPhone 6Plus/6SPlus/7P/8P - 5.5 inch\n#define iPhone6Plus_8Plus [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f\n// 判断是否为iPhoneX - 5.8 inch\n#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXS - 5.8 inch\n#define iPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXR - 6.1 inch\n#define iPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) : NO)\n// 判断是否为iPhoneXS MAX - 6.5 inch\n#define iPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) : NO)\n\n// 主要是用于区分是否是 刘海屏\n#define LiuHaiPhone \\\n({BOOL isLiuHaiPhone = NO;\\\nif (@available(iOS 11.0, *)) {\\\nisLiuHaiPhone = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom > 0.0;\\\n}\\\n(isLiuHaiPhone);})\n```\n\n\n\n\n\n\n### 3、dispatch_main_async_safe\n```\n#ifndef dispatch_main_async_safe\n#define dispatch_main_async_safe(block)\\\nif (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {\\\nblock();\\\n} else {\\\ndispatch_async(dispatch_get_main_queue(), block);\\\n}\n#endif\n```\n\nHow to use?\n \n```\n dispatch_main_async_safe(^{\n     // UI in Main Thread\n });\n```\n详情\n> 参考与 `SDWebimage` 源码中，更详细的可参考 [SDWebImage4.0源码探究（一）面试题\n](https://www.jianshu.com/p/b8517dc833c7) 中 **第七条 SDWebImage 如何保证UI操作放在主线程中执行？**\n\n\n### 4、WeakSelf、StrongSelf\n\n```\n#define WeakSelf(type)    __weak typeof(type) weak##type = type;\n#define StrongSelf(type)  __strong typeof(type) type = weak##type;\n```\n\n```\n__weak __typeof(self)weakSelf = self;\nAFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {\n    __strong __typeof(weakSelf)strongSelf = weakSelf;\n\n    strongSelf.networkReachabilityStatus = status;\n    if (strongSelf.networkReachabilityStatusBlock) {\n        strongSelf.networkReachabilityStatusBlock(status);\n    }\n};\n```\n\n\n```\n// 使用一：\n    WeakSelf(self);\n    [btn mas_makeConstraints:^(MASConstraintMaker *make) {\n        StrongSelf(self);\n        make.left.equalTo(self.view);\n    }];\n   \n// 使用二： \n    WeakSelf(self);\n    [btn mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(weakself.view);\n    }];\n```\n\n\n### 5、View 圆角、边框\n```\n#define LXViewBorderRadius(View, Radius, Width, UIColor)\\\n\\\n[View.layer setCornerRadius:(Radius)];\\\n[View.layer setMasksToBounds:YES];\\\n[View.layer setBorderWidth:(Width)];\\\n[View.layer setBorderColor:[Color CGColor]]\n```\n\n\n\n### 6、获取沙盒路径\n```\n//--------------沙盒目录文件路径---------------\n// 获取沙盒主目录路径\n#define LXSBPath_Home = NSHomeDirectory();\n//获取沙盒 Document\n#define LXSBPath_Document [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]\n//获取沙盒 Library\n#define LXSBPath_Library [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject];\n//获取沙盒 Cache\n#define LXSBPath_Cache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]\n//获取temp\n#define LXSBPath_Temp NSTemporaryDirectory()\n```\n\n### 7、随机数\n```\n//--------------生成随机数---------------\n#define LXRandNum(i) arc4random()%i   // [0,i) 范围内随机数\n#define LXRandNum_FromTo(i,j) (i + (arc4random() % (j – i + 1)))\n```\n\n\n### 8、颜色设置相关\n```\n//---------------Colour-------------------\n// 设置随机颜色\n#define LXRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]\n// 设置RGB颜色/设置RGBA颜色\n#define LXRGBAColor(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]\n#define LXRGBColor(r, g, b)      LXRGBAColor(r,g,b,1.0f)\n// 十六进制数值 eg:@\"#3499DB\"\n#define LXCOLOR_WITH_HEX [UIColor colorFromHexString: hexValue]\n#define LXCOLOR_WITH_HEX_1(hexValue) [UIColor colorWithRed:((float)((hexValue & 0xFF0000) >> 16)) / 255.0 green:((float)((hexValue & 0xFF00) >> 8)) / 255.0 blue:((float)(hexValue & 0xFF)) / 255.0 alpha:1.0f]\n```\n\n### 9、NSLog\n```\n//-------------- NSLog在release下不输出 ---------------\n#ifndef __OPTIMIZE__\n#define NSLog(...) NSLog(__VA_ARGS__)\n#else\n# define NSLog(...) {}\n#endif\n```\n\n\n\n","slug":"iOS/OC/003-OC方法/029-宏(define)与常量(const)/iOS开发常用宏","published":1,"updated":"2024-08-08T08:57:09.556Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94k003tdgxr4spn0y1x","content":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/213b3b96cafe\" >iOS 日常工作之常用宏定义大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/7e657365d2e6\" >iOS-OC中常见的一些宏 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://github.com/ibireme/YYCategories\" >YYCategories <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><strong>1、长、宽、高</strong></li>\n<li><strong>2、判断设备、系统版本</strong></li>\n<li><strong>3、dispatch_main_async_safe</strong></li>\n<li><strong>4、WeakSelf、StrongSelf</strong></li>\n<li><strong>5、View 圆角、边框</strong></li>\n<li><strong>6、获取沙盒路径</strong></li>\n<li><strong>7、随机数</strong></li>\n<li><strong>8、颜色设置相关</strong></li>\n<li><strong>9、NSLog</strong></li>\n</ul>\n<p><strong>后续再更新…</strong></p>\n<h3 id=\"1、长、宽、高\"><a href=\"#1、长、宽、高\" class=\"headerlink\" title=\"1、长、宽、高\"></a>1、长、宽、高</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// W H</span><br><span class=\"line\">#define kSCREEN_SIZE [UIScreen mainScreen].bounds.size</span><br><span class=\"line\">#define kSCREEN_WIDTH [UIScreen mainScreen].bounds.size.width</span><br><span class=\"line\">#define kSCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">#define kSTATUS_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?44:20) // 适配刘海屏状态栏</span><br><span class=\"line\">#define kTABBAR_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?83:49) // 适配刘海屏底栏高度</span><br><span class=\"line\">#define kBOTTOM_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?34:0)  // 适配刘海屏底部多出来的高度</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2、判断设备、系统版本\"><a href=\"#2、判断设备、系统版本\" class=\"headerlink\" title=\"2、判断设备、系统版本\"></a>2、判断设备、系统版本</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//----------------判断当前的iPhone设备/系统版本---------------</span><br><span class=\"line\">// 判断是否为iPhone</span><br><span class=\"line\">#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)</span><br><span class=\"line\">// 判断是否为iPad</span><br><span class=\"line\">#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</span><br><span class=\"line\">// 判断是否为ipod</span><br><span class=\"line\">#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@&quot;iPod touch&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">//----------------判断系统版本---------------</span><br><span class=\"line\">// 获取系统版本</span><br><span class=\"line\">#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</span><br><span class=\"line\">// 判断 iOS 8 或更高的系统版本</span><br><span class=\"line\">#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] &gt;=8.0)? (YES):(NO))</span><br><span class=\"line\">// 判断 iOS 10 或更高的系统版本</span><br><span class=\"line\">#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] &gt;=10.0)? (YES):(NO))</span><br><span class=\"line\"></span><br><span class=\"line\">//----------------判断机型 根据尺寸---------------</span><br><span class=\"line\">// 判断是否为 iPhone 4/4S - 3.5 inch</span><br><span class=\"line\">#define iPhone4_4S [[UIScreen mainScreen] bounds].size.width == 320.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 480.0f</span><br><span class=\"line\">// 判断是否为 iPhone 5/5SE - 4.0 inch</span><br><span class=\"line\">#define iPhone5_5SE [[UIScreen mainScreen] bounds].size.width == 320.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 568.0f</span><br><span class=\"line\">// 判断是否为iPhone 6/6S/7/8 - 4.7 inch</span><br><span class=\"line\">#define iPhone6_6S [[UIScreen mainScreen] bounds].size.width == 375.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 667.0f</span><br><span class=\"line\">// 判断是否为iPhone 6Plus/6SPlus/7P/8P - 5.5 inch</span><br><span class=\"line\">#define iPhone6Plus_8Plus [[UIScreen mainScreen] bounds].size.width == 414.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 736.0f</span><br><span class=\"line\">// 判断是否为iPhoneX - 5.8 inch</span><br><span class=\"line\">#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXS - 5.8 inch</span><br><span class=\"line\">#define iPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXR - 6.1 inch</span><br><span class=\"line\">#define iPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXS MAX - 6.5 inch</span><br><span class=\"line\">#define iPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\"></span><br><span class=\"line\">// 主要是用于区分是否是 刘海屏</span><br><span class=\"line\">#define LiuHaiPhone \\</span><br><span class=\"line\">(&#123;BOOL isLiuHaiPhone = NO;\\</span><br><span class=\"line\">if (@available(iOS 11.0, *)) &#123;\\</span><br><span class=\"line\">isLiuHaiPhone = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom &gt; 0.0;\\</span><br><span class=\"line\">&#125;\\</span><br><span class=\"line\">(isLiuHaiPhone);&#125;)</span><br></pre></td></tr></table></figure></div>\n\n\n\n\n\n\n<h3 id=\"3、dispatch-main-async-safe\"><a href=\"#3、dispatch-main-async-safe\" class=\"headerlink\" title=\"3、dispatch_main_async_safe\"></a>3、dispatch_main_async_safe</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef dispatch_main_async_safe</span><br><span class=\"line\">#define dispatch_main_async_safe(block)\\</span><br><span class=\"line\">if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) &#123;\\</span><br><span class=\"line\">block();\\</span><br><span class=\"line\">&#125; else &#123;\\</span><br><span class=\"line\">dispatch_async(dispatch_get_main_queue(), block);\\</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></div>\n\n<p>How to use?</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_main_async_safe(^&#123;</span><br><span class=\"line\">    // UI in Main Thread</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n<p>详情</p>\n<blockquote>\n<p>参考与 <code>SDWebimage</code> 源码中，更详细的可参考 <a class=\"link\"   href=\"https://www.jianshu.com/p/b8517dc833c7\" >SDWebImage4.0源码探究（一）面试题\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 中 <strong>第七条 SDWebImage 如何保证UI操作放在主线程中执行？</strong></p>\n</blockquote>\n<h3 id=\"4、WeakSelf、StrongSelf\"><a href=\"#4、WeakSelf、StrongSelf\" class=\"headerlink\" title=\"4、WeakSelf、StrongSelf\"></a>4、WeakSelf、StrongSelf</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define WeakSelf(type)    __weak typeof(type) weak##type = type;</span><br><span class=\"line\">#define StrongSelf(type)  __strong typeof(type) type = weak##type;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self)weakSelf = self;</span><br><span class=\"line\">AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) &#123;</span><br><span class=\"line\">    __strong __typeof(weakSelf)strongSelf = weakSelf;</span><br><span class=\"line\"></span><br><span class=\"line\">    strongSelf.networkReachabilityStatus = status;</span><br><span class=\"line\">    if (strongSelf.networkReachabilityStatusBlock) &#123;</span><br><span class=\"line\">        strongSelf.networkReachabilityStatusBlock(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用一：</span><br><span class=\"line\">    WeakSelf(self);</span><br><span class=\"line\">    [btn mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        StrongSelf(self);</span><br><span class=\"line\">        make.left.equalTo(self.view);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">   </span><br><span class=\"line\">// 使用二： </span><br><span class=\"line\">    WeakSelf(self);</span><br><span class=\"line\">    [btn mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.right.equalTo(weakself.view);</span><br><span class=\"line\">    &#125;];</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"5、View-圆角、边框\"><a href=\"#5、View-圆角、边框\" class=\"headerlink\" title=\"5、View 圆角、边框\"></a>5、View 圆角、边框</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define LXViewBorderRadius(View, Radius, Width, UIColor)\\</span><br><span class=\"line\">\\</span><br><span class=\"line\">[View.layer setCornerRadius:(Radius)];\\</span><br><span class=\"line\">[View.layer setMasksToBounds:YES];\\</span><br><span class=\"line\">[View.layer setBorderWidth:(Width)];\\</span><br><span class=\"line\">[View.layer setBorderColor:[Color CGColor]]</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"6、获取沙盒路径\"><a href=\"#6、获取沙盒路径\" class=\"headerlink\" title=\"6、获取沙盒路径\"></a>6、获取沙盒路径</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------沙盒目录文件路径---------------</span><br><span class=\"line\">// 获取沙盒主目录路径</span><br><span class=\"line\">#define LXSBPath_Home = NSHomeDirectory();</span><br><span class=\"line\">//获取沙盒 Document</span><br><span class=\"line\">#define LXSBPath_Document [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]</span><br><span class=\"line\">//获取沙盒 Library</span><br><span class=\"line\">#define LXSBPath_Library [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class=\"line\">//获取沙盒 Cache</span><br><span class=\"line\">#define LXSBPath_Cache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]</span><br><span class=\"line\">//获取temp</span><br><span class=\"line\">#define LXSBPath_Temp NSTemporaryDirectory()</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"7、随机数\"><a href=\"#7、随机数\" class=\"headerlink\" title=\"7、随机数\"></a>7、随机数</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------生成随机数---------------</span><br><span class=\"line\">#define LXRandNum(i) arc4random()%i   // [0,i) 范围内随机数</span><br><span class=\"line\">#define LXRandNum_FromTo(i,j) (i + (arc4random() % (j – i + 1)))</span><br></pre></td></tr></table></figure></div>\n\n\n<h3 id=\"8、颜色设置相关\"><a href=\"#8、颜色设置相关\" class=\"headerlink\" title=\"8、颜色设置相关\"></a>8、颜色设置相关</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//---------------Colour-------------------</span><br><span class=\"line\">// 设置随机颜色</span><br><span class=\"line\">#define LXRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]</span><br><span class=\"line\">// 设置RGB颜色/设置RGBA颜色</span><br><span class=\"line\">#define LXRGBAColor(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</span><br><span class=\"line\">#define LXRGBColor(r, g, b)      LXRGBAColor(r,g,b,1.0f)</span><br><span class=\"line\">// 十六进制数值 eg:@&quot;#3499DB&quot;</span><br><span class=\"line\">#define LXCOLOR_WITH_HEX [UIColor colorFromHexString: hexValue]</span><br><span class=\"line\">#define LXCOLOR_WITH_HEX_1(hexValue) [UIColor colorWithRed:((float)((hexValue &amp; 0xFF0000) &gt;&gt; 16)) / 255.0 green:((float)((hexValue &amp; 0xFF00) &gt;&gt; 8)) / 255.0 blue:((float)(hexValue &amp; 0xFF)) / 255.0 alpha:1.0f]</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"9、NSLog\"><a href=\"#9、NSLog\" class=\"headerlink\" title=\"9、NSLog\"></a>9、NSLog</h3><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-------------- NSLog在release下不输出 ---------------</span><br><span class=\"line\">#ifndef __OPTIMIZE__</span><br><span class=\"line\">#define NSLog(...) NSLog(__VA_ARGS__)</span><br><span class=\"line\">#else</span><br><span class=\"line\"># define NSLog(...) &#123;&#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></div>\n\n\n\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://www.jianshu.com/p/213b3b96cafe\" >iOS 日常工作之常用宏定义大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/7e657365d2e6\" >iOS-OC中常见的一些宏 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a><br><a class=\"link\"   href=\"https://github.com/ibireme/YYCategories\" >YYCategories <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><strong>1、长、宽、高</strong></li>\n<li><strong>2、判断设备、系统版本</strong></li>\n<li><strong>3、dispatch_main_async_safe</strong></li>\n<li><strong>4、WeakSelf、StrongSelf</strong></li>\n<li><strong>5、View 圆角、边框</strong></li>\n<li><strong>6、获取沙盒路径</strong></li>\n<li><strong>7、随机数</strong></li>\n<li><strong>8、颜色设置相关</strong></li>\n<li><strong>9、NSLog</strong></li>\n</ul>\n<p><strong>后续再更新…</strong></p>\n<h3 id=\"1、长、宽、高\"><a href=\"#1、长、宽、高\" class=\"headerlink\" title=\"1、长、宽、高\"></a>1、长、宽、高</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// W H</span><br><span class=\"line\">#define kSCREEN_SIZE [UIScreen mainScreen].bounds.size</span><br><span class=\"line\">#define kSCREEN_WIDTH [UIScreen mainScreen].bounds.size.width</span><br><span class=\"line\">#define kSCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">#define kSTATUS_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?44:20) // 适配刘海屏状态栏</span><br><span class=\"line\">#define kTABBAR_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?83:49) // 适配刘海屏底栏高度</span><br><span class=\"line\">#define kBOTTOM_H    ([[UIApplication sharedApplication] statusBarFrame].size.height&gt;20?34:0)  // 适配刘海屏底部多出来的高度</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、判断设备、系统版本\"><a href=\"#2、判断设备、系统版本\" class=\"headerlink\" title=\"2、判断设备、系统版本\"></a>2、判断设备、系统版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//----------------判断当前的iPhone设备/系统版本---------------</span><br><span class=\"line\">// 判断是否为iPhone</span><br><span class=\"line\">#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)</span><br><span class=\"line\">// 判断是否为iPad</span><br><span class=\"line\">#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</span><br><span class=\"line\">// 判断是否为ipod</span><br><span class=\"line\">#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@&quot;iPod touch&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">//----------------判断系统版本---------------</span><br><span class=\"line\">// 获取系统版本</span><br><span class=\"line\">#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</span><br><span class=\"line\">// 判断 iOS 8 或更高的系统版本</span><br><span class=\"line\">#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] &gt;=8.0)? (YES):(NO))</span><br><span class=\"line\">// 判断 iOS 10 或更高的系统版本</span><br><span class=\"line\">#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] &gt;=10.0)? (YES):(NO))</span><br><span class=\"line\"></span><br><span class=\"line\">//----------------判断机型 根据尺寸---------------</span><br><span class=\"line\">// 判断是否为 iPhone 4/4S - 3.5 inch</span><br><span class=\"line\">#define iPhone4_4S [[UIScreen mainScreen] bounds].size.width == 320.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 480.0f</span><br><span class=\"line\">// 判断是否为 iPhone 5/5SE - 4.0 inch</span><br><span class=\"line\">#define iPhone5_5SE [[UIScreen mainScreen] bounds].size.width == 320.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 568.0f</span><br><span class=\"line\">// 判断是否为iPhone 6/6S/7/8 - 4.7 inch</span><br><span class=\"line\">#define iPhone6_6S [[UIScreen mainScreen] bounds].size.width == 375.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 667.0f</span><br><span class=\"line\">// 判断是否为iPhone 6Plus/6SPlus/7P/8P - 5.5 inch</span><br><span class=\"line\">#define iPhone6Plus_8Plus [[UIScreen mainScreen] bounds].size.width == 414.0f &amp;&amp; [[UIScreen mainScreen] bounds].size.height == 736.0f</span><br><span class=\"line\">// 判断是否为iPhoneX - 5.8 inch</span><br><span class=\"line\">#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXS - 5.8 inch</span><br><span class=\"line\">#define iPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXR - 6.1 inch</span><br><span class=\"line\">#define iPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\">// 判断是否为iPhoneXS MAX - 6.5 inch</span><br><span class=\"line\">#define iPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class=\"line\"></span><br><span class=\"line\">// 主要是用于区分是否是 刘海屏</span><br><span class=\"line\">#define LiuHaiPhone \\</span><br><span class=\"line\">(&#123;BOOL isLiuHaiPhone = NO;\\</span><br><span class=\"line\">if (@available(iOS 11.0, *)) &#123;\\</span><br><span class=\"line\">isLiuHaiPhone = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom &gt; 0.0;\\</span><br><span class=\"line\">&#125;\\</span><br><span class=\"line\">(isLiuHaiPhone);&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"3、dispatch-main-async-safe\"><a href=\"#3、dispatch-main-async-safe\" class=\"headerlink\" title=\"3、dispatch_main_async_safe\"></a>3、dispatch_main_async_safe</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef dispatch_main_async_safe</span><br><span class=\"line\">#define dispatch_main_async_safe(block)\\</span><br><span class=\"line\">if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) &#123;\\</span><br><span class=\"line\">block();\\</span><br><span class=\"line\">&#125; else &#123;\\</span><br><span class=\"line\">dispatch_async(dispatch_get_main_queue(), block);\\</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>How to use?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_main_async_safe(^&#123;</span><br><span class=\"line\">    // UI in Main Thread</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>详情</p>\n<blockquote>\n<p>参考与 <code>SDWebimage</code> 源码中，更详细的可参考 <a class=\"link\"   href=\"https://www.jianshu.com/p/b8517dc833c7\" >SDWebImage4.0源码探究（一）面试题\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 中 <strong>第七条 SDWebImage 如何保证UI操作放在主线程中执行？</strong></p>\n</blockquote>\n<h3 id=\"4、WeakSelf、StrongSelf\"><a href=\"#4、WeakSelf、StrongSelf\" class=\"headerlink\" title=\"4、WeakSelf、StrongSelf\"></a>4、WeakSelf、StrongSelf</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define WeakSelf(type)    __weak typeof(type) weak##type = type;</span><br><span class=\"line\">#define StrongSelf(type)  __strong typeof(type) type = weak##type;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self)weakSelf = self;</span><br><span class=\"line\">AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) &#123;</span><br><span class=\"line\">    __strong __typeof(weakSelf)strongSelf = weakSelf;</span><br><span class=\"line\"></span><br><span class=\"line\">    strongSelf.networkReachabilityStatus = status;</span><br><span class=\"line\">    if (strongSelf.networkReachabilityStatusBlock) &#123;</span><br><span class=\"line\">        strongSelf.networkReachabilityStatusBlock(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用一：</span><br><span class=\"line\">    WeakSelf(self);</span><br><span class=\"line\">    [btn mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        StrongSelf(self);</span><br><span class=\"line\">        make.left.equalTo(self.view);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">   </span><br><span class=\"line\">// 使用二： </span><br><span class=\"line\">    WeakSelf(self);</span><br><span class=\"line\">    [btn mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.right.equalTo(weakself.view);</span><br><span class=\"line\">    &#125;];</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5、View-圆角、边框\"><a href=\"#5、View-圆角、边框\" class=\"headerlink\" title=\"5、View 圆角、边框\"></a>5、View 圆角、边框</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define LXViewBorderRadius(View, Radius, Width, UIColor)\\</span><br><span class=\"line\">\\</span><br><span class=\"line\">[View.layer setCornerRadius:(Radius)];\\</span><br><span class=\"line\">[View.layer setMasksToBounds:YES];\\</span><br><span class=\"line\">[View.layer setBorderWidth:(Width)];\\</span><br><span class=\"line\">[View.layer setBorderColor:[Color CGColor]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6、获取沙盒路径\"><a href=\"#6、获取沙盒路径\" class=\"headerlink\" title=\"6、获取沙盒路径\"></a>6、获取沙盒路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------沙盒目录文件路径---------------</span><br><span class=\"line\">// 获取沙盒主目录路径</span><br><span class=\"line\">#define LXSBPath_Home = NSHomeDirectory();</span><br><span class=\"line\">//获取沙盒 Document</span><br><span class=\"line\">#define LXSBPath_Document [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]</span><br><span class=\"line\">//获取沙盒 Library</span><br><span class=\"line\">#define LXSBPath_Library [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class=\"line\">//获取沙盒 Cache</span><br><span class=\"line\">#define LXSBPath_Cache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]</span><br><span class=\"line\">//获取temp</span><br><span class=\"line\">#define LXSBPath_Temp NSTemporaryDirectory()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、随机数\"><a href=\"#7、随机数\" class=\"headerlink\" title=\"7、随机数\"></a>7、随机数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------生成随机数---------------</span><br><span class=\"line\">#define LXRandNum(i) arc4random()%i   // [0,i) 范围内随机数</span><br><span class=\"line\">#define LXRandNum_FromTo(i,j) (i + (arc4random() % (j – i + 1)))</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8、颜色设置相关\"><a href=\"#8、颜色设置相关\" class=\"headerlink\" title=\"8、颜色设置相关\"></a>8、颜色设置相关</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//---------------Colour-------------------</span><br><span class=\"line\">// 设置随机颜色</span><br><span class=\"line\">#define LXRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]</span><br><span class=\"line\">// 设置RGB颜色/设置RGBA颜色</span><br><span class=\"line\">#define LXRGBAColor(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</span><br><span class=\"line\">#define LXRGBColor(r, g, b)      LXRGBAColor(r,g,b,1.0f)</span><br><span class=\"line\">// 十六进制数值 eg:@&quot;#3499DB&quot;</span><br><span class=\"line\">#define LXCOLOR_WITH_HEX [UIColor colorFromHexString: hexValue]</span><br><span class=\"line\">#define LXCOLOR_WITH_HEX_1(hexValue) [UIColor colorWithRed:((float)((hexValue &amp; 0xFF0000) &gt;&gt; 16)) / 255.0 green:((float)((hexValue &amp; 0xFF00) &gt;&gt; 8)) / 255.0 blue:((float)(hexValue &amp; 0xFF)) / 255.0 alpha:1.0f]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、NSLog\"><a href=\"#9、NSLog\" class=\"headerlink\" title=\"9、NSLog\"></a>9、NSLog</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-------------- NSLog在release下不输出 ---------------</span><br><span class=\"line\">#ifndef __OPTIMIZE__</span><br><span class=\"line\">#define NSLog(...) NSLog(__VA_ARGS__)</span><br><span class=\"line\">#else</span><br><span class=\"line\"># define NSLog(...) &#123;&#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"iOS中Runloop应用场景","date":"2024-08-09T01:50:29.516Z","_content":"\n# 参考\n\n[Runloop-实际开发你想用的应用场景](https://juejin.cn/post/6889769418541252615#heading-2)\n\n\n# 正文\n\n- 控制线程的生命周期【线程保活】\n- 解决NSTimer在滑动过程中停止工作的问题及衍生问题\n- 监控应用卡顿\n- 性能优化\n\n\n\n","source":"_posts/iOS/OC/005-Runloop/01-Runloop应用场景/index.md","raw":"---\ntitle: iOS中Runloop应用场景\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- Runloop\n---\n\n# 参考\n\n[Runloop-实际开发你想用的应用场景](https://juejin.cn/post/6889769418541252615#heading-2)\n\n\n# 正文\n\n- 控制线程的生命周期【线程保活】\n- 解决NSTimer在滑动过程中停止工作的问题及衍生问题\n- 监控应用卡顿\n- 性能优化\n\n\n\n","slug":"iOS/OC/005-Runloop/01-Runloop应用场景/index","published":1,"updated":"2024-08-09T01:52:12.105Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94l003udgxrcv1d8p1n","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a class=\"link\"   href=\"https://juejin.cn/post/6889769418541252615#heading-2\" >Runloop-实际开发你想用的应用场景 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><ul>\n<li>控制线程的生命周期【线程保活】</li>\n<li>解决NSTimer在滑动过程中停止工作的问题及衍生问题</li>\n<li>监控应用卡顿</li>\n<li>性能优化</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a class=\"link\"   href=\"https://juejin.cn/post/6889769418541252615#heading-2\" >Runloop-实际开发你想用的应用场景 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><ul>\n<li>控制线程的生命周期【线程保活】</li>\n<li>解决NSTimer在滑动过程中停止工作的问题及衍生问题</li>\n<li>监控应用卡顿</li>\n<li>性能优化</li>\n</ul>\n"},{"title":"iOS同步机制","date":"2024-07-22T08:01:21.514Z","thumbnail":"https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538172.jpeg","_content":"\n<!-- # iOS同步机制 -->\n\niOS 提供了多种同步机制来确保多线程环境中的数据安全和操作一致性。以下是一些常用的同步机制：\n\n <!-- more -->\n \n### 1. @synchronized\n`synchronized` 是 Objective-C 中的一种便捷方式，用于确保代码块的执行是互斥的。它会创建一个隐式的锁对象，确保同一时间只有一个线程可以执行代码块内的代码。\n\n```objective-c\n@synchronized (self) {\n    // 需要同步执行的代码\n}\n```\n\n**优点**：简单易用，适合小范围的临界区保护。\n\n**缺点**：性能开销较大，不适合高频率调用。\n\n### 2. NSLock\n`NSLock` 是一种基础的锁机制，提供了互斥锁的功能。使用时，需要显式地调用 `lock` 和 `unlock` 方法。\n\n```objective-c\nNSLock *lock = [[NSLock alloc] init];\n[lock lock];\n// 需要同步执行的代码\n[lock unlock];\n```\n\n**优点**：相对于 `@synchronized`，性能稍好一些，使用灵活。\n\n**缺点**：需要显式调用锁和解锁，容易导致死锁。\n\n### 3. NSRecursiveLock\n`NSRecursiveLock` 是一种递归锁，允许同一线程多次获得锁而不会引发死锁。\n\n```objective-c\nNSRecursiveLock *recursiveLock = [[NSRecursiveLock alloc] init];\n[recursiveLock lock];\n// 需要同步执行的代码\n[recursiveLock unlock];\n```\n\n**优点**：适合递归调用的场景。\n\n**缺点**：相对于普通锁，性能略低。\n\n### 4. NSCondition\n`NSCondition` 提供了一种更复杂的锁机制，支持线程等待和唤醒的功能。\n\n```objective-c\nNSCondition *condition = [[NSCondition alloc] init];\n[condition lock];\n// 需要同步执行的代码\n[condition wait]; // 等待某个条件\n[condition signal]; // 唤醒等待的线程\n[condition unlock];\n```\n\n**优点**：适合需要线程等待和唤醒的复杂场景。\n\n**缺点**：使用复杂，性能较低。\n\n### 5. NSConditionLock\n`NSConditionLock` 是 `NSCondition` 的变种，增加了条件变量的支持，可以更方便地实现复杂的同步场景。\n\n```objective-c\nNSConditionLock *conditionLock = [[NSConditionLock alloc] initWithCondition:0];\n[conditionLock lockWhenCondition:1];\n// 需要同步执行的代码\n[conditionLock unlockWithCondition:2];\n```\n\n**优点**：适合有条件变量的复杂场景。\n\n**缺点**：使用复杂，性能较低。\n\n### 6. GCD (Grand Central Dispatch)\nGCD 提供了非常强大的多线程支持，特别是同步机制。常用的同步方法包括 `dispatch_sync` 和同步队列。\n\n#### 串行队列\n创建一个串行队列，确保任务按顺序执行。\n\n```objective-c\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.example.serialQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_sync(serialQueue, ^{\n    // 需要同步执行的代码\n});\n```\n\n#### dispatch_barrier\n在并行队列中使用 `dispatch_barrier_async` 或 `dispatch_barrier_sync` 确保读写操作的互斥性。\n\n```objective-c\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.example.concurrentQueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_barrier_async(concurrentQueue, ^{\n    // 需要同步执行的写操作\n});\n```\n\n**优点**：性能高，使用灵活，适合各种场景。\n\n**缺点**：API 较多，学习曲线稍高。\n\n### 7. Atomic Properties\n在 Objective-C 中，可以使用 `atomic` 修饰符来声明线程安全的属性。尽管不适合所有情况，但在简单的读写操作中可以提供一定程度的线程安全保障。\n\n```objective-c\n@property (atomic, strong) NSString *atomicString;\n```\n\n**优点**：简单易用，适合简单的读写操作。\n\n**缺点**：性能较低，无法解决复杂的同步问题。\n\n### 总结\niOS 提供了多种同步机制，从简单易用的 `@synchronized` 到强大灵活的 GCD，不同的机制适用于不同的场景。在选择同步机制时，需要根据具体需求和性能要求进行权衡。","source":"_posts/iOS/OC/006-多线程/002-iOS同步机制/README.md","raw":"---\ntitle: iOS同步机制\ndate: {{ date }}\ntags: [iOS, 面试题, 同步]\nthumbnail: 'https://raw.githubusercontent.com/lionsom/imagesRepo/hexo/hexo-common-img/202407291538172.jpeg'\n---\n\n<!-- # iOS同步机制 -->\n\niOS 提供了多种同步机制来确保多线程环境中的数据安全和操作一致性。以下是一些常用的同步机制：\n\n <!-- more -->\n \n### 1. @synchronized\n`synchronized` 是 Objective-C 中的一种便捷方式，用于确保代码块的执行是互斥的。它会创建一个隐式的锁对象，确保同一时间只有一个线程可以执行代码块内的代码。\n\n```objective-c\n@synchronized (self) {\n    // 需要同步执行的代码\n}\n```\n\n**优点**：简单易用，适合小范围的临界区保护。\n\n**缺点**：性能开销较大，不适合高频率调用。\n\n### 2. NSLock\n`NSLock` 是一种基础的锁机制，提供了互斥锁的功能。使用时，需要显式地调用 `lock` 和 `unlock` 方法。\n\n```objective-c\nNSLock *lock = [[NSLock alloc] init];\n[lock lock];\n// 需要同步执行的代码\n[lock unlock];\n```\n\n**优点**：相对于 `@synchronized`，性能稍好一些，使用灵活。\n\n**缺点**：需要显式调用锁和解锁，容易导致死锁。\n\n### 3. NSRecursiveLock\n`NSRecursiveLock` 是一种递归锁，允许同一线程多次获得锁而不会引发死锁。\n\n```objective-c\nNSRecursiveLock *recursiveLock = [[NSRecursiveLock alloc] init];\n[recursiveLock lock];\n// 需要同步执行的代码\n[recursiveLock unlock];\n```\n\n**优点**：适合递归调用的场景。\n\n**缺点**：相对于普通锁，性能略低。\n\n### 4. NSCondition\n`NSCondition` 提供了一种更复杂的锁机制，支持线程等待和唤醒的功能。\n\n```objective-c\nNSCondition *condition = [[NSCondition alloc] init];\n[condition lock];\n// 需要同步执行的代码\n[condition wait]; // 等待某个条件\n[condition signal]; // 唤醒等待的线程\n[condition unlock];\n```\n\n**优点**：适合需要线程等待和唤醒的复杂场景。\n\n**缺点**：使用复杂，性能较低。\n\n### 5. NSConditionLock\n`NSConditionLock` 是 `NSCondition` 的变种，增加了条件变量的支持，可以更方便地实现复杂的同步场景。\n\n```objective-c\nNSConditionLock *conditionLock = [[NSConditionLock alloc] initWithCondition:0];\n[conditionLock lockWhenCondition:1];\n// 需要同步执行的代码\n[conditionLock unlockWithCondition:2];\n```\n\n**优点**：适合有条件变量的复杂场景。\n\n**缺点**：使用复杂，性能较低。\n\n### 6. GCD (Grand Central Dispatch)\nGCD 提供了非常强大的多线程支持，特别是同步机制。常用的同步方法包括 `dispatch_sync` 和同步队列。\n\n#### 串行队列\n创建一个串行队列，确保任务按顺序执行。\n\n```objective-c\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.example.serialQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_sync(serialQueue, ^{\n    // 需要同步执行的代码\n});\n```\n\n#### dispatch_barrier\n在并行队列中使用 `dispatch_barrier_async` 或 `dispatch_barrier_sync` 确保读写操作的互斥性。\n\n```objective-c\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.example.concurrentQueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_barrier_async(concurrentQueue, ^{\n    // 需要同步执行的写操作\n});\n```\n\n**优点**：性能高，使用灵活，适合各种场景。\n\n**缺点**：API 较多，学习曲线稍高。\n\n### 7. Atomic Properties\n在 Objective-C 中，可以使用 `atomic` 修饰符来声明线程安全的属性。尽管不适合所有情况，但在简单的读写操作中可以提供一定程度的线程安全保障。\n\n```objective-c\n@property (atomic, strong) NSString *atomicString;\n```\n\n**优点**：简单易用，适合简单的读写操作。\n\n**缺点**：性能较低，无法解决复杂的同步问题。\n\n### 总结\niOS 提供了多种同步机制，从简单易用的 `@synchronized` 到强大灵活的 GCD，不同的机制适用于不同的场景。在选择同步机制时，需要根据具体需求和性能要求进行权衡。","slug":"iOS/OC/006-多线程/002-iOS同步机制/README","published":1,"updated":"2024-08-06T08:39:23.626Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94m003wdgxrfqsq5gkw","content":"<!-- # iOS同步机制 -->\n\n<p>iOS 提供了多种同步机制来确保多线程环境中的数据安全和操作一致性。以下是一些常用的同步机制：</p>\n <span id=\"more\"></span>\n<h3 id=\"1-synchronized\"><a href=\"#1-synchronized\" class=\"headerlink\" title=\"1. @synchronized\"></a>1. @synchronized</h3><p><code>synchronized</code> 是 Objective-C 中的一种便捷方式，用于确保代码块的执行是互斥的。它会创建一个隐式的锁对象，确保同一时间只有一个线程可以执行代码块内的代码。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synchronized (self) &#123;</span><br><span class=\"line\">    // 需要同步执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：简单易用，适合小范围的临界区保护。</p>\n<p><strong>缺点</strong>：性能开销较大，不适合高频率调用。</p>\n<h3 id=\"2-NSLock\"><a href=\"#2-NSLock\" class=\"headerlink\" title=\"2. NSLock\"></a>2. NSLock</h3><p><code>NSLock</code> 是一种基础的锁机制，提供了互斥锁的功能。使用时，需要显式地调用 <code>lock</code> 和 <code>unlock</code> 方法。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLock *lock = [[NSLock alloc] init];</span><br><span class=\"line\">[lock lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[lock unlock];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：相对于 <code>@synchronized</code>，性能稍好一些，使用灵活。</p>\n<p><strong>缺点</strong>：需要显式调用锁和解锁，容易导致死锁。</p>\n<h3 id=\"3-NSRecursiveLock\"><a href=\"#3-NSRecursiveLock\" class=\"headerlink\" title=\"3. NSRecursiveLock\"></a>3. NSRecursiveLock</h3><p><code>NSRecursiveLock</code> 是一种递归锁，允许同一线程多次获得锁而不会引发死锁。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSRecursiveLock *recursiveLock = [[NSRecursiveLock alloc] init];</span><br><span class=\"line\">[recursiveLock lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[recursiveLock unlock];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：适合递归调用的场景。</p>\n<p><strong>缺点</strong>：相对于普通锁，性能略低。</p>\n<h3 id=\"4-NSCondition\"><a href=\"#4-NSCondition\" class=\"headerlink\" title=\"4. NSCondition\"></a>4. NSCondition</h3><p><code>NSCondition</code> 提供了一种更复杂的锁机制，支持线程等待和唤醒的功能。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSCondition *condition = [[NSCondition alloc] init];</span><br><span class=\"line\">[condition lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[condition wait]; // 等待某个条件</span><br><span class=\"line\">[condition signal]; // 唤醒等待的线程</span><br><span class=\"line\">[condition unlock];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：适合需要线程等待和唤醒的复杂场景。</p>\n<p><strong>缺点</strong>：使用复杂，性能较低。</p>\n<h3 id=\"5-NSConditionLock\"><a href=\"#5-NSConditionLock\" class=\"headerlink\" title=\"5. NSConditionLock\"></a>5. NSConditionLock</h3><p><code>NSConditionLock</code> 是 <code>NSCondition</code> 的变种，增加了条件变量的支持，可以更方便地实现复杂的同步场景。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSConditionLock *conditionLock = [[NSConditionLock alloc] initWithCondition:0];</span><br><span class=\"line\">[conditionLock lockWhenCondition:1];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[conditionLock unlockWithCondition:2];</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：适合有条件变量的复杂场景。</p>\n<p><strong>缺点</strong>：使用复杂，性能较低。</p>\n<h3 id=\"6-GCD-Grand-Central-Dispatch\"><a href=\"#6-GCD-Grand-Central-Dispatch\" class=\"headerlink\" title=\"6. GCD (Grand Central Dispatch)\"></a>6. GCD (Grand Central Dispatch)</h3><p>GCD 提供了非常强大的多线程支持，特别是同步机制。常用的同步方法包括 <code>dispatch_sync</code> 和同步队列。</p>\n<h4 id=\"串行队列\"><a href=\"#串行队列\" class=\"headerlink\" title=\"串行队列\"></a>串行队列</h4><p>创建一个串行队列，确保任务按顺序执行。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.example.serialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">dispatch_sync(serialQueue, ^&#123;</span><br><span class=\"line\">    // 需要同步执行的代码</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"dispatch-barrier\"><a href=\"#dispatch-barrier\" class=\"headerlink\" title=\"dispatch_barrier\"></a>dispatch_barrier</h4><p>在并行队列中使用 <code>dispatch_barrier_async</code> 或 <code>dispatch_barrier_sync</code> 确保读写操作的互斥性。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.example.concurrentQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_barrier_async(concurrentQueue, ^&#123;</span><br><span class=\"line\">    // 需要同步执行的写操作</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：性能高，使用灵活，适合各种场景。</p>\n<p><strong>缺点</strong>：API 较多，学习曲线稍高。</p>\n<h3 id=\"7-Atomic-Properties\"><a href=\"#7-Atomic-Properties\" class=\"headerlink\" title=\"7. Atomic Properties\"></a>7. Atomic Properties</h3><p>在 Objective-C 中，可以使用 <code>atomic</code> 修饰符来声明线程安全的属性。尽管不适合所有情况，但在简单的读写操作中可以提供一定程度的线程安全保障。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (atomic, strong) NSString *atomicString;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>优点</strong>：简单易用，适合简单的读写操作。</p>\n<p><strong>缺点</strong>：性能较低，无法解决复杂的同步问题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>iOS 提供了多种同步机制，从简单易用的 <code>@synchronized</code> 到强大灵活的 GCD，不同的机制适用于不同的场景。在选择同步机制时，需要根据具体需求和性能要求进行权衡。</p>\n","excerpt":"<!-- # iOS同步机制 -->\n\n<p>iOS 提供了多种同步机制来确保多线程环境中的数据安全和操作一致性。以下是一些常用的同步机制：</p>","more":"<h3 id=\"1-synchronized\"><a href=\"#1-synchronized\" class=\"headerlink\" title=\"1. @synchronized\"></a>1. @synchronized</h3><p><code>synchronized</code> 是 Objective-C 中的一种便捷方式，用于确保代码块的执行是互斥的。它会创建一个隐式的锁对象，确保同一时间只有一个线程可以执行代码块内的代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synchronized (self) &#123;</span><br><span class=\"line\">    // 需要同步执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：简单易用，适合小范围的临界区保护。</p>\n<p><strong>缺点</strong>：性能开销较大，不适合高频率调用。</p>\n<h3 id=\"2-NSLock\"><a href=\"#2-NSLock\" class=\"headerlink\" title=\"2. NSLock\"></a>2. NSLock</h3><p><code>NSLock</code> 是一种基础的锁机制，提供了互斥锁的功能。使用时，需要显式地调用 <code>lock</code> 和 <code>unlock</code> 方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLock *lock = [[NSLock alloc] init];</span><br><span class=\"line\">[lock lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[lock unlock];</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：相对于 <code>@synchronized</code>，性能稍好一些，使用灵活。</p>\n<p><strong>缺点</strong>：需要显式调用锁和解锁，容易导致死锁。</p>\n<h3 id=\"3-NSRecursiveLock\"><a href=\"#3-NSRecursiveLock\" class=\"headerlink\" title=\"3. NSRecursiveLock\"></a>3. NSRecursiveLock</h3><p><code>NSRecursiveLock</code> 是一种递归锁，允许同一线程多次获得锁而不会引发死锁。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSRecursiveLock *recursiveLock = [[NSRecursiveLock alloc] init];</span><br><span class=\"line\">[recursiveLock lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[recursiveLock unlock];</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：适合递归调用的场景。</p>\n<p><strong>缺点</strong>：相对于普通锁，性能略低。</p>\n<h3 id=\"4-NSCondition\"><a href=\"#4-NSCondition\" class=\"headerlink\" title=\"4. NSCondition\"></a>4. NSCondition</h3><p><code>NSCondition</code> 提供了一种更复杂的锁机制，支持线程等待和唤醒的功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSCondition *condition = [[NSCondition alloc] init];</span><br><span class=\"line\">[condition lock];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[condition wait]; // 等待某个条件</span><br><span class=\"line\">[condition signal]; // 唤醒等待的线程</span><br><span class=\"line\">[condition unlock];</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：适合需要线程等待和唤醒的复杂场景。</p>\n<p><strong>缺点</strong>：使用复杂，性能较低。</p>\n<h3 id=\"5-NSConditionLock\"><a href=\"#5-NSConditionLock\" class=\"headerlink\" title=\"5. NSConditionLock\"></a>5. NSConditionLock</h3><p><code>NSConditionLock</code> 是 <code>NSCondition</code> 的变种，增加了条件变量的支持，可以更方便地实现复杂的同步场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSConditionLock *conditionLock = [[NSConditionLock alloc] initWithCondition:0];</span><br><span class=\"line\">[conditionLock lockWhenCondition:1];</span><br><span class=\"line\">// 需要同步执行的代码</span><br><span class=\"line\">[conditionLock unlockWithCondition:2];</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：适合有条件变量的复杂场景。</p>\n<p><strong>缺点</strong>：使用复杂，性能较低。</p>\n<h3 id=\"6-GCD-Grand-Central-Dispatch\"><a href=\"#6-GCD-Grand-Central-Dispatch\" class=\"headerlink\" title=\"6. GCD (Grand Central Dispatch)\"></a>6. GCD (Grand Central Dispatch)</h3><p>GCD 提供了非常强大的多线程支持，特别是同步机制。常用的同步方法包括 <code>dispatch_sync</code> 和同步队列。</p>\n<h4 id=\"串行队列\"><a href=\"#串行队列\" class=\"headerlink\" title=\"串行队列\"></a>串行队列</h4><p>创建一个串行队列，确保任务按顺序执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.example.serialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">dispatch_sync(serialQueue, ^&#123;</span><br><span class=\"line\">    // 需要同步执行的代码</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dispatch-barrier\"><a href=\"#dispatch-barrier\" class=\"headerlink\" title=\"dispatch_barrier\"></a>dispatch_barrier</h4><p>在并行队列中使用 <code>dispatch_barrier_async</code> 或 <code>dispatch_barrier_sync</code> 确保读写操作的互斥性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.example.concurrentQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_barrier_async(concurrentQueue, ^&#123;</span><br><span class=\"line\">    // 需要同步执行的写操作</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：性能高，使用灵活，适合各种场景。</p>\n<p><strong>缺点</strong>：API 较多，学习曲线稍高。</p>\n<h3 id=\"7-Atomic-Properties\"><a href=\"#7-Atomic-Properties\" class=\"headerlink\" title=\"7. Atomic Properties\"></a>7. Atomic Properties</h3><p>在 Objective-C 中，可以使用 <code>atomic</code> 修饰符来声明线程安全的属性。尽管不适合所有情况，但在简单的读写操作中可以提供一定程度的线程安全保障。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (atomic, strong) NSString *atomicString;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：简单易用，适合简单的读写操作。</p>\n<p><strong>缺点</strong>：性能较低，无法解决复杂的同步问题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>iOS 提供了多种同步机制，从简单易用的 <code>@synchronized</code> 到强大灵活的 GCD，不同的机制适用于不同的场景。在选择同步机制时，需要根据具体需求和性能要求进行权衡。</p>"},{"title":"iOS 中的并发编程：GCD与Operation的对比与实践","date":"2024-07-30T07:12:20.370Z","_content":"\niOS平台上，有两种主流的并发编程技术：GCD（Grand Central Dispatch）和NSOperation。\n\n<!-- more -->\n\n# GCD\n如何使用GCD创建一个并行队列并在其中执行一个耗时操作：\n```\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    // 执行耗时操作\n    for (int i = 0; i < 100000; i++) {\n        // ...\n    }\n    // 更新UI\n    dispatch_async(dispatch_get_main_queue(), ^{\n        // UI更新操作\n    });\n});\n```\n在这个例子中，我们首先获取了一个全局的并行队列，然后在该队列中异步执行了一个循环操作。注意，当我们需要更新UI时，必须回到主线程进行操作。\n\n\n# NSOperation\nNSOperation是一个更为重量级的解决方案，它提供了更多的控制和灵活性。NSOperation对象可以被添加到NSOperationQueue中，后者负责管理这些操作的执行。与GCD不同，NSOperation允许设置依赖关系、取消操作以及观察操作的状态变化。\n\n下面是一个使用NSOperation的简单示例：\n```\nNSOperationQueue *queue = [[NSOperationQueue alloc] init];\nNSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{\n    for (int i = 0; i < 100000; i++) {\n        // ...\n    }\n}];\n[queue addOperation:operation];\n```\n在这个例子中，我们创建了一个NSOperationQueue实例，并添加了一个NSBlockOperation对象。NSBlockOperation类似于GCD中的block，但它提供了更丰富的特性，如能够取消操作或设置最大并发操作数。\n\n\n# GPT\n\nGCD（Grand Central Dispatch）和NSOperationQueue是iOS和macOS中用于并发编程的两个主要工具。它们都能帮助你管理和执行多线程任务，但在使用方式和特性上有一些关键区别。\n\n### GCD（Grand Central Dispatch）\n\n**特点：**\n\n1. **底层API**：GCD是一个底层的C API，提供了强大的并发功能。\n2. **简单直接**：GCD使用dispatch queues来管理任务，通过block语法，使代码简洁易读。\n3. **轻量级**：GCD更轻量，性能开销更低，适合需要高效执行的大量小任务。\n4. **自动管理线程**：GCD会根据系统资源自动管理线程池，动态调整线程数量。\n5. **适合简单并发任务**：对于简单的任务提交和管理，GCD是一个很好的选择。\n\n**使用场景：**\n\n- 需要执行大量简单的并发任务，如网络请求、数据处理等。\n- 需要轻量级的并发处理，不需要复杂的任务管理。\n- 需要高性能和低开销。\n\n**示例代码：**\n\n```swift\nlet queue = DispatchQueue.global(qos: .background)\nqueue.async {\n    // 在后台线程执行任务\n    print(\"任务执行\")\n}\n```\n\n### NSOperationQueue\n\n**特点：**\n\n1. **更高级的抽象**：NSOperationQueue是基于面向对象的高级抽象，提供了更丰富的功能。\n2. **依赖管理**：可以设置任务之间的依赖关系，确保按顺序执行。\n3. **任务取消**：可以取消任务，适合需要精细控制的场景。\n4. **任务状态管理**：可以方便地追踪任务的执行状态（准备、执行、完成等）。\n5. **键值观察**：支持KVO（键值观察），可以观察任务的状态变化。\n\n**使用场景：**\n\n- 需要管理复杂的任务依赖关系。\n- 需要取消任务或追踪任务状态。\n- 需要在任务执行过程中进行KVO监控。\n\n**示例代码：**\n\n```swift\nlet queue = OperationQueue()\n\nlet operation1 = BlockOperation {\n    print(\"任务1执行\")\n}\n\nlet operation2 = BlockOperation {\n    print(\"任务2执行\")\n}\n\n// 设置依赖关系，确保任务1在任务2之前执行\noperation2.addDependency(operation1)\n\nqueue.addOperation(operation1)\nqueue.addOperation(operation2)\n```\n\n### 总结\n\n- **GCD**：适合需要高性能、低开销、简单并发任务的场景。\n- **NSOperationQueue**：适合需要复杂任务管理、依赖关系、任务取消和状态监控的场景。\n\n根据具体需求选择合适的工具，可以更好地优化应用的并发性能和任务管理。","source":"_posts/iOS/OC/006-多线程/018-GCD与Operation的对比与实践/README.md","raw":"---\ntitle: iOS 中的并发编程：GCD与Operation的对比与实践\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- GCD\n- Operation\n---\n\niOS平台上，有两种主流的并发编程技术：GCD（Grand Central Dispatch）和NSOperation。\n\n<!-- more -->\n\n# GCD\n如何使用GCD创建一个并行队列并在其中执行一个耗时操作：\n```\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    // 执行耗时操作\n    for (int i = 0; i < 100000; i++) {\n        // ...\n    }\n    // 更新UI\n    dispatch_async(dispatch_get_main_queue(), ^{\n        // UI更新操作\n    });\n});\n```\n在这个例子中，我们首先获取了一个全局的并行队列，然后在该队列中异步执行了一个循环操作。注意，当我们需要更新UI时，必须回到主线程进行操作。\n\n\n# NSOperation\nNSOperation是一个更为重量级的解决方案，它提供了更多的控制和灵活性。NSOperation对象可以被添加到NSOperationQueue中，后者负责管理这些操作的执行。与GCD不同，NSOperation允许设置依赖关系、取消操作以及观察操作的状态变化。\n\n下面是一个使用NSOperation的简单示例：\n```\nNSOperationQueue *queue = [[NSOperationQueue alloc] init];\nNSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{\n    for (int i = 0; i < 100000; i++) {\n        // ...\n    }\n}];\n[queue addOperation:operation];\n```\n在这个例子中，我们创建了一个NSOperationQueue实例，并添加了一个NSBlockOperation对象。NSBlockOperation类似于GCD中的block，但它提供了更丰富的特性，如能够取消操作或设置最大并发操作数。\n\n\n# GPT\n\nGCD（Grand Central Dispatch）和NSOperationQueue是iOS和macOS中用于并发编程的两个主要工具。它们都能帮助你管理和执行多线程任务，但在使用方式和特性上有一些关键区别。\n\n### GCD（Grand Central Dispatch）\n\n**特点：**\n\n1. **底层API**：GCD是一个底层的C API，提供了强大的并发功能。\n2. **简单直接**：GCD使用dispatch queues来管理任务，通过block语法，使代码简洁易读。\n3. **轻量级**：GCD更轻量，性能开销更低，适合需要高效执行的大量小任务。\n4. **自动管理线程**：GCD会根据系统资源自动管理线程池，动态调整线程数量。\n5. **适合简单并发任务**：对于简单的任务提交和管理，GCD是一个很好的选择。\n\n**使用场景：**\n\n- 需要执行大量简单的并发任务，如网络请求、数据处理等。\n- 需要轻量级的并发处理，不需要复杂的任务管理。\n- 需要高性能和低开销。\n\n**示例代码：**\n\n```swift\nlet queue = DispatchQueue.global(qos: .background)\nqueue.async {\n    // 在后台线程执行任务\n    print(\"任务执行\")\n}\n```\n\n### NSOperationQueue\n\n**特点：**\n\n1. **更高级的抽象**：NSOperationQueue是基于面向对象的高级抽象，提供了更丰富的功能。\n2. **依赖管理**：可以设置任务之间的依赖关系，确保按顺序执行。\n3. **任务取消**：可以取消任务，适合需要精细控制的场景。\n4. **任务状态管理**：可以方便地追踪任务的执行状态（准备、执行、完成等）。\n5. **键值观察**：支持KVO（键值观察），可以观察任务的状态变化。\n\n**使用场景：**\n\n- 需要管理复杂的任务依赖关系。\n- 需要取消任务或追踪任务状态。\n- 需要在任务执行过程中进行KVO监控。\n\n**示例代码：**\n\n```swift\nlet queue = OperationQueue()\n\nlet operation1 = BlockOperation {\n    print(\"任务1执行\")\n}\n\nlet operation2 = BlockOperation {\n    print(\"任务2执行\")\n}\n\n// 设置依赖关系，确保任务1在任务2之前执行\noperation2.addDependency(operation1)\n\nqueue.addOperation(operation1)\nqueue.addOperation(operation2)\n```\n\n### 总结\n\n- **GCD**：适合需要高性能、低开销、简单并发任务的场景。\n- **NSOperationQueue**：适合需要复杂任务管理、依赖关系、任务取消和状态监控的场景。\n\n根据具体需求选择合适的工具，可以更好地优化应用的并发性能和任务管理。","slug":"iOS/OC/006-多线程/018-GCD与Operation的对比与实践/README","published":1,"updated":"2024-08-06T08:41:16.060Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94m003ydgxr2ec7grso","content":"<p>iOS平台上，有两种主流的并发编程技术：GCD（Grand Central Dispatch）和NSOperation。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h1><p>如何使用GCD创建一个并行队列并在其中执行一个耗时操作：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class=\"line\">dispatch_async(queue, ^&#123;</span><br><span class=\"line\">    // 执行耗时操作</span><br><span class=\"line\">    for (int i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 更新UI</span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        // UI更新操作</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n<p>在这个例子中，我们首先获取了一个全局的并行队列，然后在该队列中异步执行了一个循环操作。注意，当我们需要更新UI时，必须回到主线程进行操作。</p>\n<h1 id=\"NSOperation\"><a href=\"#NSOperation\" class=\"headerlink\" title=\"NSOperation\"></a>NSOperation</h1><p>NSOperation是一个更为重量级的解决方案，它提供了更多的控制和灵活性。NSOperation对象可以被添加到NSOperationQueue中，后者负责管理这些操作的执行。与GCD不同，NSOperation允许设置依赖关系、取消操作以及观察操作的状态变化。</p>\n<p>下面是一个使用NSOperation的简单示例：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class=\"line\">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[queue addOperation:operation];</span><br></pre></td></tr></table></figure></div>\n<p>在这个例子中，我们创建了一个NSOperationQueue实例，并添加了一个NSBlockOperation对象。NSBlockOperation类似于GCD中的block，但它提供了更丰富的特性，如能够取消操作或设置最大并发操作数。</p>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>GCD（Grand Central Dispatch）和NSOperationQueue是iOS和macOS中用于并发编程的两个主要工具。它们都能帮助你管理和执行多线程任务，但在使用方式和特性上有一些关键区别。</p>\n<h3 id=\"GCD（Grand-Central-Dispatch）\"><a href=\"#GCD（Grand-Central-Dispatch）\" class=\"headerlink\" title=\"GCD（Grand Central Dispatch）\"></a>GCD（Grand Central Dispatch）</h3><p><strong>特点：</strong></p>\n<ol>\n<li><strong>底层API</strong>：GCD是一个底层的C API，提供了强大的并发功能。</li>\n<li><strong>简单直接</strong>：GCD使用dispatch queues来管理任务，通过block语法，使代码简洁易读。</li>\n<li><strong>轻量级</strong>：GCD更轻量，性能开销更低，适合需要高效执行的大量小任务。</li>\n<li><strong>自动管理线程</strong>：GCD会根据系统资源自动管理线程池，动态调整线程数量。</li>\n<li><strong>适合简单并发任务</strong>：对于简单的任务提交和管理，GCD是一个很好的选择。</li>\n</ol>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>需要执行大量简单的并发任务，如网络请求、数据处理等。</li>\n<li>需要轻量级的并发处理，不需要复杂的任务管理。</li>\n<li>需要高性能和低开销。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>.global(qos: .background)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在后台线程执行任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><p><strong>特点：</strong></p>\n<ol>\n<li><strong>更高级的抽象</strong>：NSOperationQueue是基于面向对象的高级抽象，提供了更丰富的功能。</li>\n<li><strong>依赖管理</strong>：可以设置任务之间的依赖关系，确保按顺序执行。</li>\n<li><strong>任务取消</strong>：可以取消任务，适合需要精细控制的场景。</li>\n<li><strong>任务状态管理</strong>：可以方便地追踪任务的执行状态（准备、执行、完成等）。</li>\n<li><strong>键值观察</strong>：支持KVO（键值观察），可以观察任务的状态变化。</li>\n</ol>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>需要管理复杂的任务依赖关系。</li>\n<li>需要取消任务或追踪任务状态。</li>\n<li>需要在任务执行过程中进行KVO监控。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Swift\"><figure class=\"iseeu highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">OperationQueue</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation1 <span class=\"operator\">=</span> <span class=\"type\">BlockOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务1执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation2 <span class=\"operator\">=</span> <span class=\"type\">BlockOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务2执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置依赖关系，确保任务1在任务2之前执行</span></span><br><span class=\"line\">operation2.addDependency(operation1)</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation(operation1)</span><br><span class=\"line\">queue.addOperation(operation2)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>GCD</strong>：适合需要高性能、低开销、简单并发任务的场景。</li>\n<li><strong>NSOperationQueue</strong>：适合需要复杂任务管理、依赖关系、任务取消和状态监控的场景。</li>\n</ul>\n<p>根据具体需求选择合适的工具，可以更好地优化应用的并发性能和任务管理。</p>\n","excerpt":"<p>iOS平台上，有两种主流的并发编程技术：GCD（Grand Central Dispatch）和NSOperation。</p>","more":"<h1 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h1><p>如何使用GCD创建一个并行队列并在其中执行一个耗时操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class=\"line\">dispatch_async(queue, ^&#123;</span><br><span class=\"line\">    // 执行耗时操作</span><br><span class=\"line\">    for (int i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 更新UI</span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        // UI更新操作</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们首先获取了一个全局的并行队列，然后在该队列中异步执行了一个循环操作。注意，当我们需要更新UI时，必须回到主线程进行操作。</p>\n<h1 id=\"NSOperation\"><a href=\"#NSOperation\" class=\"headerlink\" title=\"NSOperation\"></a>NSOperation</h1><p>NSOperation是一个更为重量级的解决方案，它提供了更多的控制和灵活性。NSOperation对象可以被添加到NSOperationQueue中，后者负责管理这些操作的执行。与GCD不同，NSOperation允许设置依赖关系、取消操作以及观察操作的状态变化。</p>\n<p>下面是一个使用NSOperation的简单示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class=\"line\">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[queue addOperation:operation];</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们创建了一个NSOperationQueue实例，并添加了一个NSBlockOperation对象。NSBlockOperation类似于GCD中的block，但它提供了更丰富的特性，如能够取消操作或设置最大并发操作数。</p>\n<h1 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h1><p>GCD（Grand Central Dispatch）和NSOperationQueue是iOS和macOS中用于并发编程的两个主要工具。它们都能帮助你管理和执行多线程任务，但在使用方式和特性上有一些关键区别。</p>\n<h3 id=\"GCD（Grand-Central-Dispatch）\"><a href=\"#GCD（Grand-Central-Dispatch）\" class=\"headerlink\" title=\"GCD（Grand Central Dispatch）\"></a>GCD（Grand Central Dispatch）</h3><p><strong>特点：</strong></p>\n<ol>\n<li><strong>底层API</strong>：GCD是一个底层的C API，提供了强大的并发功能。</li>\n<li><strong>简单直接</strong>：GCD使用dispatch queues来管理任务，通过block语法，使代码简洁易读。</li>\n<li><strong>轻量级</strong>：GCD更轻量，性能开销更低，适合需要高效执行的大量小任务。</li>\n<li><strong>自动管理线程</strong>：GCD会根据系统资源自动管理线程池，动态调整线程数量。</li>\n<li><strong>适合简单并发任务</strong>：对于简单的任务提交和管理，GCD是一个很好的选择。</li>\n</ol>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>需要执行大量简单的并发任务，如网络请求、数据处理等。</li>\n<li>需要轻量级的并发处理，不需要复杂的任务管理。</li>\n<li>需要高性能和低开销。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>.global(qos: .background)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在后台线程执行任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><p><strong>特点：</strong></p>\n<ol>\n<li><strong>更高级的抽象</strong>：NSOperationQueue是基于面向对象的高级抽象，提供了更丰富的功能。</li>\n<li><strong>依赖管理</strong>：可以设置任务之间的依赖关系，确保按顺序执行。</li>\n<li><strong>任务取消</strong>：可以取消任务，适合需要精细控制的场景。</li>\n<li><strong>任务状态管理</strong>：可以方便地追踪任务的执行状态（准备、执行、完成等）。</li>\n<li><strong>键值观察</strong>：支持KVO（键值观察），可以观察任务的状态变化。</li>\n</ol>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>需要管理复杂的任务依赖关系。</li>\n<li>需要取消任务或追踪任务状态。</li>\n<li>需要在任务执行过程中进行KVO监控。</li>\n</ul>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">OperationQueue</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation1 <span class=\"operator\">=</span> <span class=\"type\">BlockOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务1执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation2 <span class=\"operator\">=</span> <span class=\"type\">BlockOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;任务2执行&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置依赖关系，确保任务1在任务2之前执行</span></span><br><span class=\"line\">operation2.addDependency(operation1)</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation(operation1)</span><br><span class=\"line\">queue.addOperation(operation2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>GCD</strong>：适合需要高性能、低开销、简单并发任务的场景。</li>\n<li><strong>NSOperationQueue</strong>：适合需要复杂任务管理、依赖关系、任务取消和状态监控的场景。</li>\n</ul>\n<p>根据具体需求选择合适的工具，可以更好地优化应用的并发性能和任务管理。</p>"},{"title":"iOS中WKWebView秒开","date":"2024-08-09T02:05:48.784Z","_content":"\n[WKWebview秒开实践分享及问题解决方案](https://juejin.cn/post/6887161842406260744)","source":"_posts/iOS/OC/009-混编/001-WKWebView秒开/index.md","raw":"---\ntitle: iOS中WKWebView秒开\ndate: {{ date }}\ntags:\n- iOS\n- 面试题\n- WKWebView\n---\n\n[WKWebview秒开实践分享及问题解决方案](https://juejin.cn/post/6887161842406260744)","slug":"iOS/OC/009-混编/001-WKWebView秒开/index","published":1,"updated":"2024-08-09T02:07:58.766Z","comments":1,"layout":"post","photos":[],"_id":"clzmfp94n0041dgxr5upqesdr","content":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6887161842406260744\" >WKWebview秒开实践分享及问题解决方案 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<p><a class=\"link\"   href=\"https://juejin.cn/post/6887161842406260744\" >WKWebview秒开实践分享及问题解决方案 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo-usage/hexo-usage-2024/hexo2024/myhead.jpg","post":"clzmfp93n000gdgxr0k3j1ncz","slug":"myhead.jpg","modified":1,"renderable":0},{"_id":"source/_posts/hexo-usage/hexo本地图片/hexo本地图片/myhead.jpg","post":"clzmfp93o000kdgxr0o413yn7","slug":"myhead.jpg","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/021-APNS/README/001.webp","post":"clzmfp93w001fdgxrdrtu3tw7","slug":"001.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/021-APNS/README/002.webp","post":"clzmfp93w001fdgxrdrtu3tw7","slug":"002.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/021-APNS/README/003.webp","post":"clzmfp93w001fdgxrdrtu3tw7","slug":"003.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/001.png","post":"clzmfp9430023dgxrabgvh9c8","slug":"001.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/002.png","post":"clzmfp9430023dgxrabgvh9c8","slug":"002.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/003.png","post":"clzmfp9430023dgxrabgvh9c8","slug":"003.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/README/004.png","post":"clzmfp9430023dgxrabgvh9c8","slug":"004.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/005.webp","post":"clzmfp9440028dgxrerka49cp","slug":"005.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/006.png","post":"clzmfp9440028dgxrerka49cp","slug":"006.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/001-OC属性、关键字/012-copy关键字/copy与mutableCopy/007.png","post":"clzmfp9440028dgxrerka49cp","slug":"007.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/002-内存管理/001-简述OC内存管理/README/duck.jpeg","post":"clzmfp947002kdgxrff7cbe86","slug":"duck.jpeg","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/005.png","post":"clzmfp949002sdgxrdta9137h","slug":"005.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/006.png","post":"clzmfp949002sdgxrdta9137h","slug":"006.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/002-内存管理/011-空指针、野指针/README/007.png","post":"clzmfp949002sdgxrdta9137h","slug":"007.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/001-UIView与CALayer/index/001.png","post":"clzmfp94b002zdgxre55eeiem","slug":"001.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/001.webp","post":"clzmfp94c0030dgxrdyyt7g91","slug":"001.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/002.webp","post":"clzmfp94c0030dgxrdyyt7g91","slug":"002.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/003.webp","post":"clzmfp94c0030dgxrdyyt7g91","slug":"003.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/017-frame和bounds/README/004.webp","post":"clzmfp94c0030dgxrdyyt7g91","slug":"004.webp","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/001.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"001.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/002.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"002.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/003.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"003.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/004.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"004.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/005.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"005.png","modified":1,"renderable":0},{"_id":"source/_posts/iOS/OC/003-OC方法/029-宏(define)与常量(const)/README/006.png","post":"clzmfp94k003rdgxrc1hjezay","slug":"006.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"clzmfp93j0009dgxr89fwaxam","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93n000hdgxr94ofee4r"},{"post_id":"clzmfp93c0001dgxr350c7s3c","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93p000ldgxr07a47kk8"},{"post_id":"clzmfp93f0003dgxr0dhibqe2","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93q000pdgxraj2i6t63"},{"post_id":"clzmfp93n000gdgxr0k3j1ncz","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93r000tdgxrawi08dhv"},{"post_id":"clzmfp93o000kdgxr0o413yn7","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93s000wdgxrcafx731m"},{"post_id":"clzmfp93i0007dgxr1g3fazqh","category_id":"clzmfp93g0004dgxr58x0967a","_id":"clzmfp93t0011dgxr9wsdervd"},{"post_id":"clzmfp93k000bdgxr81fwg9r8","category_id":"clzmfp93p000odgxr45t57to2","_id":"clzmfp93u0015dgxraor84xl3"},{"post_id":"clzmfp93m000fdgxrc1r3bsv3","category_id":"clzmfp93p000odgxr45t57to2","_id":"clzmfp93v001adgxrf0ur9ryu"},{"post_id":"clzmfp93p000ndgxrg4mk0vgx","category_id":"clzmfp93t0014dgxr35uffbq1","_id":"clzmfp93x001gdgxrbbzu7xhg"},{"post_id":"clzmfp93q000sdgxr4jpefyoz","category_id":"clzmfp93v001cdgxr77osat1r","_id":"clzmfp93y001ndgxrdxar3oxi"},{"post_id":"clzmfp93r000vdgxr1zpd92qc","category_id":"clzmfp93v001cdgxr77osat1r","_id":"clzmfp940001sdgxrf8ds166d"},{"post_id":"clzmfp93s0010dgxr16h11sk6","category_id":"clzmfp93y001mdgxrf9tg5z9y","_id":"clzmfp942001zdgxrdxpsgvzx"},{"post_id":"clzmfp93t0013dgxr08jr27qf","category_id":"clzmfp93y001mdgxrf9tg5z9y","_id":"clzmfp9430024dgxr5rh739eh"},{"post_id":"clzmfp93u0017dgxrh3pv95nm","category_id":"clzmfp942001ydgxr0tio47v7","_id":"clzmfp945002cdgxr0wbv4vw3"},{"post_id":"clzmfp93v0019dgxr6dgxg7xr","category_id":"clzmfp942001ydgxr0tio47v7","_id":"clzmfp946002hdgxrgcbag09r"},{"post_id":"clzmfp93w001edgxr5o0baa4g","category_id":"clzmfp945002bdgxr0akj5r0o","_id":"clzmfp948002pdgxrg5ny6ulr"},{"post_id":"clzmfp93y001ldgxr01n0b4vl","category_id":"clzmfp942001ydgxr0tio47v7","_id":"clzmfp94a002udgxr0wtbd850"},{"post_id":"clzmfp9440028dgxrerka49cp","category_id":"clzmfp945002bdgxr0akj5r0o","_id":"clzmfp94b002ydgxrai1c4uhx"},{"post_id":"clzmfp946002gdgxr868wcvuk","category_id":"clzmfp94a002tdgxr0p672137","_id":"clzmfp94d0032dgxr7rrlefg7"}],"PostTag":[{"post_id":"clzmfp93c0001dgxr350c7s3c","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp93p000mdgxra5q05h70"},{"post_id":"clzmfp93c0001dgxr350c7s3c","tag_id":"clzmfp93l000ddgxrhhs44lz6","_id":"clzmfp93q000qdgxr6690fn9p"},{"post_id":"clzmfp93o000kdgxr0o413yn7","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp93r000udgxr6ld02h1k"},{"post_id":"clzmfp93f0003dgxr0dhibqe2","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp93s000xdgxrc3cka2kn"},{"post_id":"clzmfp93i0007dgxr1g3fazqh","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp93t0012dgxr8rwnfoiu"},{"post_id":"clzmfp93j0009dgxr89fwaxam","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp93u0018dgxrf3tuez3m"},{"post_id":"clzmfp93j0009dgxr89fwaxam","tag_id":"clzmfp93s000zdgxrhmxigeab","_id":"clzmfp93v001bdgxr0ry26zm9"},{"post_id":"clzmfp93k000bdgxr81fwg9r8","tag_id":"clzmfp93u0016dgxrgp7254s6","_id":"clzmfp93y001kdgxr77mderqu"},{"post_id":"clzmfp93k000bdgxr81fwg9r8","tag_id":"clzmfp93v001ddgxr3zracqin","_id":"clzmfp93y001odgxr1wgjb89j"},{"post_id":"clzmfp93m000fdgxrc1r3bsv3","tag_id":"clzmfp93u0016dgxrgp7254s6","_id":"clzmfp9430022dgxr4hwch6wa"},{"post_id":"clzmfp93m000fdgxrc1r3bsv3","tag_id":"clzmfp93z001qdgxra18m0r1w","_id":"clzmfp9430026dgxrgqpd5rfv"},{"post_id":"clzmfp93m000fdgxrc1r3bsv3","tag_id":"clzmfp940001vdgxrcwup6ub9","_id":"clzmfp9440029dgxrepm8ft3l"},{"post_id":"clzmfp93n000gdgxr0k3j1ncz","tag_id":"clzmfp93h0005dgxraju5hnr9","_id":"clzmfp946002fdgxrcvsc3mmr"},{"post_id":"clzmfp93n000gdgxr0k3j1ncz","tag_id":"clzmfp9420020dgxr5kpja275","_id":"clzmfp947002jdgxrd5z7ejur"},{"post_id":"clzmfp93n000gdgxr0k3j1ncz","tag_id":"clzmfp9430027dgxrezj90b3n","_id":"clzmfp947002mdgxrbu065hsc"},{"post_id":"clzmfp93p000ndgxrg4mk0vgx","tag_id":"clzmfp945002edgxr647p324x","_id":"clzmfp94d0033dgxr8rw6gfc5"},{"post_id":"clzmfp93p000ndgxrg4mk0vgx","tag_id":"clzmfp947002ldgxrgnog1q47","_id":"clzmfp94d0035dgxr78nh1qjs"},{"post_id":"clzmfp93p000ndgxrg4mk0vgx","tag_id":"clzmfp949002rdgxrbrv0hadf","_id":"clzmfp94e0038dgxr72515e53"},{"post_id":"clzmfp93p000ndgxrg4mk0vgx","tag_id":"clzmfp94a002wdgxr8rqghzzp","_id":"clzmfp94e003adgxr47bbgg3o"},{"post_id":"clzmfp93q000sdgxr4jpefyoz","tag_id":"clzmfp945002edgxr647p324x","_id":"clzmfp94h003hdgxr1y65c6xc"},{"post_id":"clzmfp93q000sdgxr4jpefyoz","tag_id":"clzmfp94e0037dgxr1xdpex6n","_id":"clzmfp94i003jdgxr71t91jh1"},{"post_id":"clzmfp93q000sdgxr4jpefyoz","tag_id":"clzmfp94f003cdgxrepxxh1y1","_id":"clzmfp94i003mdgxrb3up33lm"},{"post_id":"clzmfp93r000vdgxr1zpd92qc","tag_id":"clzmfp945002edgxr647p324x","_id":"clzmfp94m003xdgxrforzh4bg"},{"post_id":"clzmfp93r000vdgxr1zpd92qc","tag_id":"clzmfp94i003kdgxr559s3a2j","_id":"clzmfp94n003zdgxrewsx5d1f"},{"post_id":"clzmfp93r000vdgxr1zpd92qc","tag_id":"clzmfp94j003odgxrhhmt1i9a","_id":"clzmfp94n0042dgxrbkkh9m5o"},{"post_id":"clzmfp93r000vdgxr1zpd92qc","tag_id":"clzmfp94k003sdgxrhup25lkc","_id":"clzmfp94n0043dgxrbo7z0t4g"},{"post_id":"clzmfp93s0010dgxr16h11sk6","tag_id":"clzmfp945002edgxr647p324x","_id":"clzmfp94o0047dgxr7kbxat8y"},{"post_id":"clzmfp93s0010dgxr16h11sk6","tag_id":"clzmfp94n0040dgxre8mmf3j5","_id":"clzmfp94o0048dgxr9ogbd7ro"},{"post_id":"clzmfp93s0010dgxr16h11sk6","tag_id":"clzmfp94n0044dgxr5hmf3o8h","_id":"clzmfp94o004adgxr7mp63m0n"},{"post_id":"clzmfp93s0010dgxr16h11sk6","tag_id":"clzmfp94o0045dgxrctijaw75","_id":"clzmfp94o004bdgxr30b503zu"},{"post_id":"clzmfp93t0013dgxr08jr27qf","tag_id":"clzmfp945002edgxr647p324x","_id":"clzmfp94p004ddgxremdkfu98"},{"post_id":"clzmfp93t0013dgxr08jr27qf","tag_id":"clzmfp94n0040dgxre8mmf3j5","_id":"clzmfp94p004edgxr0uo4c4ea"},{"post_id":"clzmfp93u0017dgxrh3pv95nm","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94p004idgxr3obvfpat"},{"post_id":"clzmfp93u0017dgxrh3pv95nm","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94p004jdgxr8b958701"},{"post_id":"clzmfp93u0017dgxrh3pv95nm","tag_id":"clzmfp94p004gdgxr9m621r7w","_id":"clzmfp94q004ldgxrhgn7aqj1"},{"post_id":"clzmfp93v0019dgxr6dgxg7xr","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94q004odgxr6gvtb7mv"},{"post_id":"clzmfp93v0019dgxr6dgxg7xr","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94q004pdgxr0g5l0jiv"},{"post_id":"clzmfp93v0019dgxr6dgxg7xr","tag_id":"clzmfp94p004gdgxr9m621r7w","_id":"clzmfp94q004rdgxrbud90vu5"},{"post_id":"clzmfp93w001edgxr5o0baa4g","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94r004tdgxr0gzl1r1p"},{"post_id":"clzmfp93w001edgxr5o0baa4g","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94r004udgxrf0zg7j5j"},{"post_id":"clzmfp93w001fdgxrdrtu3tw7","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94s004zdgxr2y5zcl5u"},{"post_id":"clzmfp93w001fdgxrdrtu3tw7","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94s0050dgxrgmtohztk"},{"post_id":"clzmfp93w001fdgxrdrtu3tw7","tag_id":"clzmfp94r004wdgxr4u1a79j0","_id":"clzmfp94s0052dgxre60o4fx1"},{"post_id":"clzmfp93w001fdgxrdrtu3tw7","tag_id":"clzmfp94r004xdgxr32dr9akf","_id":"clzmfp94s0053dgxr41cgh4bb"},{"post_id":"clzmfp93x001idgxrd3ma8s2k","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94s0057dgxr3sjp5aly"},{"post_id":"clzmfp93x001idgxrd3ma8s2k","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94t0058dgxrd8fkahqn"},{"post_id":"clzmfp93x001idgxrd3ma8s2k","tag_id":"clzmfp94s0054dgxr1wbz5b9a","_id":"clzmfp94t005adgxr5o8a2j2x"},{"post_id":"clzmfp93x001idgxrd3ma8s2k","tag_id":"clzmfp94s0055dgxrgzsxebf5","_id":"clzmfp94t005bdgxrdfopcryx"},{"post_id":"clzmfp93y001ldgxr01n0b4vl","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94t005edgxr6r6v0xue"},{"post_id":"clzmfp93y001ldgxr01n0b4vl","tag_id":"clzmfp94p004gdgxr9m621r7w","_id":"clzmfp94t005fdgxr1d972xx6"},{"post_id":"clzmfp93y001ldgxr01n0b4vl","tag_id":"clzmfp94t005cdgxr3yec14qu","_id":"clzmfp94t005hdgxrgrcs6sf4"},{"post_id":"clzmfp93y001pdgxr32v0fv06","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94u005kdgxr5kdlbl4x"},{"post_id":"clzmfp93y001pdgxr32v0fv06","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94u005ldgxr1i90d15m"},{"post_id":"clzmfp93y001pdgxr32v0fv06","tag_id":"clzmfp94u005idgxr0dlvbl8o","_id":"clzmfp94u005ndgxratzx8254"},{"post_id":"clzmfp93z001rdgxregr34vhq","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94v005qdgxr7fva1y1h"},{"post_id":"clzmfp93z001rdgxregr34vhq","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94v005rdgxrb1iierqb"},{"post_id":"clzmfp93z001rdgxregr34vhq","tag_id":"clzmfp94u005odgxr4fvt0mgn","_id":"clzmfp94v005tdgxrd2rw8pny"},{"post_id":"clzmfp940001tdgxrc1g9bkf3","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94w005wdgxr7ooee523"},{"post_id":"clzmfp940001tdgxrc1g9bkf3","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94w005xdgxr4thh6qs9"},{"post_id":"clzmfp940001tdgxrc1g9bkf3","tag_id":"clzmfp94v005udgxrfcqxh4sc","_id":"clzmfp94w005zdgxrfy79elkb"},{"post_id":"clzmfp941001wdgxr4lo81tsl","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94x0064dgxr438q19w2"},{"post_id":"clzmfp941001wdgxr4lo81tsl","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94x0065dgxr8ppbheb3"},{"post_id":"clzmfp941001wdgxr4lo81tsl","tag_id":"clzmfp94w0060dgxr3wja6zkl","_id":"clzmfp94x0067dgxrfce71nbe"},{"post_id":"clzmfp941001wdgxr4lo81tsl","tag_id":"clzmfp94w0061dgxr7h3l566i","_id":"clzmfp94x0068dgxrbelsck8r"},{"post_id":"clzmfp941001wdgxr4lo81tsl","tag_id":"clzmfp94w0062dgxrga8zf6ha","_id":"clzmfp94x006adgxr5zyv5y6c"},{"post_id":"clzmfp941001xdgxr2jm13nbd","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94y006ddgxrde622awg"},{"post_id":"clzmfp941001xdgxr2jm13nbd","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94y006edgxr1x4whiwg"},{"post_id":"clzmfp941001xdgxr2jm13nbd","tag_id":"clzmfp94x0069dgxray7yhhau","_id":"clzmfp94y006gdgxr13rz4yo0"},{"post_id":"clzmfp941001xdgxr2jm13nbd","tag_id":"clzmfp94x006bdgxr6wps4bgb","_id":"clzmfp94y006hdgxr66p04o0c"},{"post_id":"clzmfp9420021dgxr24qeg8ec","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp94z006kdgxr54jog5tv"},{"post_id":"clzmfp9420021dgxr24qeg8ec","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp94z006ldgxra9gd4fto"},{"post_id":"clzmfp9420021dgxr24qeg8ec","tag_id":"clzmfp94y006idgxr6i5o15eb","_id":"clzmfp94z006ndgxrcpci5hw8"},{"post_id":"clzmfp9430023dgxrabgvh9c8","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp950006qdgxr31qz2qjg"},{"post_id":"clzmfp9430023dgxrabgvh9c8","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp950006rdgxr2ywsgh2i"},{"post_id":"clzmfp9430023dgxrabgvh9c8","tag_id":"clzmfp94z006odgxr79mvgw83","_id":"clzmfp950006tdgxr26q069s0"},{"post_id":"clzmfp9440028dgxrerka49cp","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp950006wdgxr80y7hf9y"},{"post_id":"clzmfp9440028dgxrerka49cp","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp950006xdgxrfpwlg5au"},{"post_id":"clzmfp9440028dgxrerka49cp","tag_id":"clzmfp94z006odgxr79mvgw83","_id":"clzmfp951006zdgxrbttret84"},{"post_id":"clzmfp944002adgxr7vy7fbpc","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp9510074dgxr0uqy766h"},{"post_id":"clzmfp944002adgxr7vy7fbpc","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp9510075dgxrg63m6fvc"},{"post_id":"clzmfp944002adgxr7vy7fbpc","tag_id":"clzmfp9510070dgxra2gf7j2k","_id":"clzmfp9520077dgxr1a4qci65"},{"post_id":"clzmfp944002adgxr7vy7fbpc","tag_id":"clzmfp9510071dgxrcabu61ei","_id":"clzmfp9520078dgxr68uwc18x"},{"post_id":"clzmfp944002adgxr7vy7fbpc","tag_id":"clzmfp9510072dgxr5n1ehxbe","_id":"clzmfp952007adgxre3xg28ec"},{"post_id":"clzmfp945002ddgxr55zcdq89","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp952007cdgxr3pvj5gq4"},{"post_id":"clzmfp945002ddgxr55zcdq89","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp952007ddgxragve7amc"},{"post_id":"clzmfp945002ddgxr55zcdq89","tag_id":"clzmfp9520079dgxrhjn6affr","_id":"clzmfp952007fdgxrdy1wd68a"},{"post_id":"clzmfp946002gdgxr868wcvuk","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp953007idgxrcaub0sxe"},{"post_id":"clzmfp946002gdgxr868wcvuk","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp953007jdgxrdovbcb0f"},{"post_id":"clzmfp946002gdgxr868wcvuk","tag_id":"clzmfp952007gdgxrfnjz6nf5","_id":"clzmfp953007ldgxr99m56asr"},{"post_id":"clzmfp947002kdgxrff7cbe86","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp954007odgxrcpok01bz"},{"post_id":"clzmfp947002kdgxrff7cbe86","tag_id":"clzmfp953007kdgxrd3p8f1ye","_id":"clzmfp954007pdgxr46ln484j"},{"post_id":"clzmfp947002kdgxrff7cbe86","tag_id":"clzmfp953007mdgxrgj7p348n","_id":"clzmfp954007rdgxrd0j4gs2j"},{"post_id":"clzmfp948002ndgxr085zflxj","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp955007udgxrhpvz7tve"},{"post_id":"clzmfp948002ndgxr085zflxj","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp955007vdgxr5fgq1m22"},{"post_id":"clzmfp948002ndgxr085zflxj","tag_id":"clzmfp954007sdgxrbzq2bg0w","_id":"clzmfp955007xdgxrhyp4ek6k"},{"post_id":"clzmfp948002qdgxrglnq36l1","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp9550080dgxrhaf179sn"},{"post_id":"clzmfp948002qdgxrglnq36l1","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp9550081dgxremsq1xbc"},{"post_id":"clzmfp948002qdgxrglnq36l1","tag_id":"clzmfp955007ydgxr3q0xhsto","_id":"clzmfp9560083dgxr0neq630a"},{"post_id":"clzmfp949002sdgxrdta9137h","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp9560087dgxr1e8t319v"},{"post_id":"clzmfp949002sdgxrdta9137h","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp9560088dgxr6526e894"},{"post_id":"clzmfp949002sdgxrdta9137h","tag_id":"clzmfp9560084dgxr8jfl717v","_id":"clzmfp956008adgxrepevdvay"},{"post_id":"clzmfp949002sdgxrdta9137h","tag_id":"clzmfp9560085dgxrfvuc4pwr","_id":"clzmfp957008bdgxrgulifr1r"},{"post_id":"clzmfp94a002vdgxr3iqwapsd","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp957008edgxraoup6ysp"},{"post_id":"clzmfp94a002vdgxr3iqwapsd","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp957008fdgxrbxg56n4z"},{"post_id":"clzmfp94a002vdgxr3iqwapsd","tag_id":"clzmfp957008cdgxr0ffdgxu1","_id":"clzmfp957008hdgxrf18s8408"},{"post_id":"clzmfp94b002xdgxret8r11io","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp958008kdgxr7w0l8kwa"},{"post_id":"clzmfp94b002xdgxret8r11io","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp958008ldgxr1gr15yq7"},{"post_id":"clzmfp94b002xdgxret8r11io","tag_id":"clzmfp957008idgxr1fvpe1ve","_id":"clzmfp958008ndgxrgtkt2onl"},{"post_id":"clzmfp94b002zdgxre55eeiem","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp959008rdgxrfpjvf7ap"},{"post_id":"clzmfp94b002zdgxre55eeiem","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp959008sdgxr295fgnoo"},{"post_id":"clzmfp94b002zdgxre55eeiem","tag_id":"clzmfp958008odgxrg9iq1pav","_id":"clzmfp959008udgxr9p1e81sl"},{"post_id":"clzmfp94b002zdgxre55eeiem","tag_id":"clzmfp958008pdgxr1k0m2yg5","_id":"clzmfp959008vdgxr1ys7dogs"},{"post_id":"clzmfp94c0030dgxrdyyt7g91","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95a008zdgxr61ygf3d8"},{"post_id":"clzmfp94c0030dgxrdyyt7g91","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95a0090dgxr184beoq6"},{"post_id":"clzmfp94c0030dgxrdyyt7g91","tag_id":"clzmfp959008wdgxr1b5q67wf","_id":"clzmfp95a0092dgxr3bl9362q"},{"post_id":"clzmfp94c0030dgxrdyyt7g91","tag_id":"clzmfp959008xdgxrhugc604s","_id":"clzmfp95a0093dgxrgkdo0084"},{"post_id":"clzmfp94d0034dgxrgom6g27h","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95b0096dgxr9mnbfpi9"},{"post_id":"clzmfp94d0034dgxrgom6g27h","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95b0097dgxr3nnb733a"},{"post_id":"clzmfp94d0034dgxrgom6g27h","tag_id":"clzmfp95a0094dgxrg3m26gl9","_id":"clzmfp95b0099dgxr672o3k2x"},{"post_id":"clzmfp94d0036dgxra9ht7l15","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95b009ddgxr1dzegmoq"},{"post_id":"clzmfp94d0036dgxra9ht7l15","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95c009edgxre5we9x70"},{"post_id":"clzmfp94d0036dgxra9ht7l15","tag_id":"clzmfp95b009adgxr493b7897","_id":"clzmfp95c009gdgxr0cxe8yrk"},{"post_id":"clzmfp94d0036dgxra9ht7l15","tag_id":"clzmfp95b009bdgxrht0y88e7","_id":"clzmfp95c009hdgxr8ak5cu2z"},{"post_id":"clzmfp94e0039dgxr0tq7ff3i","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95c009kdgxrhwneg0my"},{"post_id":"clzmfp94e0039dgxr0tq7ff3i","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95c009ldgxr84jb3v8a"},{"post_id":"clzmfp94e0039dgxr0tq7ff3i","tag_id":"clzmfp95c009idgxrfzcu27zr","_id":"clzmfp95d009ndgxrbebz7fbb"},{"post_id":"clzmfp94f003bdgxre82v3ag5","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95e009qdgxrdng5huey"},{"post_id":"clzmfp94f003bdgxre82v3ag5","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95e009rdgxr19l3h62v"},{"post_id":"clzmfp94f003bdgxre82v3ag5","tag_id":"clzmfp95c009idgxrfzcu27zr","_id":"clzmfp95e009tdgxre25sdgrd"},{"post_id":"clzmfp94f003ddgxr48037cv0","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95f009xdgxrgpe52z59"},{"post_id":"clzmfp94f003ddgxr48037cv0","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95f009ydgxra14u7szd"},{"post_id":"clzmfp94f003ddgxr48037cv0","tag_id":"clzmfp95c009idgxrfzcu27zr","_id":"clzmfp95g00a0dgxrenx2dl7j"},{"post_id":"clzmfp94f003ddgxr48037cv0","tag_id":"clzmfp95f009vdgxr11zi2u0f","_id":"clzmfp95g00a1dgxr28wh41x8"},{"post_id":"clzmfp94g003edgxrhfok6b15","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95g00a4dgxr0bd0e68n"},{"post_id":"clzmfp94g003edgxrhfok6b15","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95g00a5dgxr96an9lye"},{"post_id":"clzmfp94g003edgxrhfok6b15","tag_id":"clzmfp95g00a2dgxr00u14ez8","_id":"clzmfp95h00a7dgxr54sfac9u"},{"post_id":"clzmfp94h003gdgxrhxqo9k3s","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95h00aadgxr201hfkd2"},{"post_id":"clzmfp94h003gdgxrhxqo9k3s","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95h00abdgxr15c65032"},{"post_id":"clzmfp94h003gdgxrhxqo9k3s","tag_id":"clzmfp95h00a8dgxre2lu6x7b","_id":"clzmfp95h00addgxr01dy6vb4"},{"post_id":"clzmfp94h003idgxred7hcul2","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95i00ahdgxr7jzn1i73"},{"post_id":"clzmfp94h003idgxred7hcul2","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95i00aidgxr93in92vx"},{"post_id":"clzmfp94h003idgxred7hcul2","tag_id":"clzmfp95h00aedgxr4nmqh50g","_id":"clzmfp95i00akdgxr2mnkds16"},{"post_id":"clzmfp94h003idgxred7hcul2","tag_id":"clzmfp95i00afdgxr7op32qbp","_id":"clzmfp95i00aldgxr135h7npj"},{"post_id":"clzmfp94i003ldgxr34i89ar1","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95j00aodgxr3zt0hqb8"},{"post_id":"clzmfp94i003ldgxr34i89ar1","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95j00apdgxr19ccbsxj"},{"post_id":"clzmfp94i003ldgxr34i89ar1","tag_id":"clzmfp95j00amdgxrf0r55cji","_id":"clzmfp95j00ardgxr07be7b66"},{"post_id":"clzmfp94i003ndgxr5qgy6vue","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95k00atdgxr1gywb0ge"},{"post_id":"clzmfp94i003ndgxr5qgy6vue","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95k00audgxrdqmwdscl"},{"post_id":"clzmfp94j003pdgxr963mb0sx","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95k00axdgxr95kvhrt8"},{"post_id":"clzmfp94j003pdgxr963mb0sx","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95k00aydgxrccwd86qr"},{"post_id":"clzmfp94j003qdgxr26ij1itt","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95l00b1dgxr4qfb094g"},{"post_id":"clzmfp94j003qdgxr26ij1itt","tag_id":"clzmfp95k00azdgxr1gfucj01","_id":"clzmfp95l00b2dgxr7tgn03g7"},{"post_id":"clzmfp94k003rdgxrc1hjezay","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95m00b6dgxr524ec1ow"},{"post_id":"clzmfp94k003rdgxrc1hjezay","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95m00b7dgxr619953s7"},{"post_id":"clzmfp94k003rdgxrc1hjezay","tag_id":"clzmfp95l00b4dgxr9w9v5v06","_id":"clzmfp95m00b9dgxr8u613tsz"},{"post_id":"clzmfp94k003rdgxrc1hjezay","tag_id":"clzmfp94a002wdgxr8rqghzzp","_id":"clzmfp95m00badgxr19007m5t"},{"post_id":"clzmfp94k003tdgxr4spn0y1x","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95n00bddgxrdu399w3w"},{"post_id":"clzmfp94k003tdgxr4spn0y1x","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95n00bedgxr7d3k7lss"},{"post_id":"clzmfp94k003tdgxr4spn0y1x","tag_id":"clzmfp95l00b4dgxr9w9v5v06","_id":"clzmfp95n00bgdgxr3c8306uo"},{"post_id":"clzmfp94l003udgxrcv1d8p1n","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95o00bjdgxrboschvwk"},{"post_id":"clzmfp94l003udgxrcv1d8p1n","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95o00bkdgxrhh0thb01"},{"post_id":"clzmfp94l003udgxrcv1d8p1n","tag_id":"clzmfp95n00bhdgxrg5cv17va","_id":"clzmfp95o00bmdgxr13voacaf"},{"post_id":"clzmfp94m003wdgxrfqsq5gkw","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95p00bpdgxr7e8h1km9"},{"post_id":"clzmfp94m003wdgxrfqsq5gkw","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95p00bqdgxrb1bc1v3t"},{"post_id":"clzmfp94m003wdgxrfqsq5gkw","tag_id":"clzmfp95o00bndgxrajki2m83","_id":"clzmfp95p00bsdgxrby3dc2ko"},{"post_id":"clzmfp94m003ydgxr2ec7grso","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95q00bwdgxr40d86053"},{"post_id":"clzmfp94m003ydgxr2ec7grso","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95q00bxdgxrhcih7mbj"},{"post_id":"clzmfp94m003ydgxr2ec7grso","tag_id":"clzmfp95p00btdgxrduje5hci","_id":"clzmfp95q00bzdgxr383l0x07"},{"post_id":"clzmfp94m003ydgxr2ec7grso","tag_id":"clzmfp95p00budgxrdmoo4xns","_id":"clzmfp95q00c0dgxr1j24fb0c"},{"post_id":"clzmfp94n0041dgxr5upqesdr","tag_id":"clzmfp94o004cdgxrfm69dywq","_id":"clzmfp95q00c2dgxr3zr5g0q2"},{"post_id":"clzmfp94n0041dgxr5upqesdr","tag_id":"clzmfp94p004fdgxr6jg79907","_id":"clzmfp95q00c3dgxr6y90c7q3"},{"post_id":"clzmfp94n0041dgxr5upqesdr","tag_id":"clzmfp95q00c1dgxrghb52uaw","_id":"clzmfp95q00c4dgxr961bhem4"}],"Tag":[{"name":"hexo","_id":"clzmfp93h0005dgxraju5hnr9"},{"name":"hello world","_id":"clzmfp93l000ddgxrhhs44lz6"},{"name":"new page","_id":"clzmfp93s000zdgxrhmxigeab"},{"name":"git","_id":"clzmfp93u0016dgxrgp7254s6"},{"name":"submodule","_id":"clzmfp93v001ddgxr3zracqin"},{"name":".gitignore","_id":"clzmfp93z001qdgxra18m0r1w"},{"name":".gitignore_global","_id":"clzmfp940001vdgxrcwup6ub9"},{"name":"github","_id":"clzmfp9420020dgxr5kpja275"},{"name":"picgo","_id":"clzmfp9430027dgxrezj90b3n"},{"name":"前端","_id":"clzmfp945002edgxr647p324x"},{"name":"js","_id":"clzmfp947002ldgxrgnog1q47"},{"name":"let","_id":"clzmfp949002rdgxrbrv0hadf"},{"name":"const","_id":"clzmfp94a002wdgxr8rqghzzp"},{"name":"http","_id":"clzmfp94e0037dgxr1xdpex6n"},{"name":"https","_id":"clzmfp94f003cdgxrepxxh1y1"},{"name":"cookie","_id":"clzmfp94i003kdgxr559s3a2j"},{"name":"session","_id":"clzmfp94j003odgxrhhmt1i9a"},{"name":"token","_id":"clzmfp94k003sdgxrhup25lkc"},{"name":"Vue","_id":"clzmfp94n0040dgxre8mmf3j5"},{"name":"v-show","_id":"clzmfp94n0044dgxr5hmf3o8h"},{"name":"v-if","_id":"clzmfp94o0045dgxrctijaw75"},{"name":"iOS","_id":"clzmfp94o004cdgxrfm69dywq"},{"name":"面试题","_id":"clzmfp94p004fdgxr6jg79907"},{"name":"Swift","_id":"clzmfp94p004gdgxr9m621r7w"},{"name":"APNS","_id":"clzmfp94r004wdgxr4u1a79j0"},{"name":"推送","_id":"clzmfp94r004xdgxr32dr9akf"},{"name":"组件化","_id":"clzmfp94s0054dgxr1wbz5b9a"},{"name":"CTMediator","_id":"clzmfp94s0055dgxrgzsxebf5"},{"name":"Kingfisher","_id":"clzmfp94t005cdgxr3yec14qu"},{"name":"属性关键字","_id":"clzmfp94u005idgxr0dlvbl8o"},{"name":"修饰符","_id":"clzmfp94u005odgxr4fvt0mgn"},{"name":"property","_id":"clzmfp94v005udgxrfcqxh4sc"},{"name":"delegate","_id":"clzmfp94w0060dgxr3wja6zkl"},{"name":"UITableView","_id":"clzmfp94w0061dgxr7h3l566i"},{"name":"assign","_id":"clzmfp94w0062dgxrga8zf6ha"},{"name":"synthesize","_id":"clzmfp94x0069dgxray7yhhau"},{"name":"dynamic","_id":"clzmfp94x006bdgxr6wps4bgb"},{"name":"weak","_id":"clzmfp94y006idgxr6i5o15eb"},{"name":"copy","_id":"clzmfp94z006odgxr79mvgw83"},{"name":"属性变量","_id":"clzmfp9510070dgxra2gf7j2k"},{"name":"成员变量","_id":"clzmfp9510071dgxrcabu61ei"},{"name":"实例变量","_id":"clzmfp9510072dgxr5n1ehxbe"},{"name":"访问权限","_id":"clzmfp9520079dgxrhjn6affr"},{"name":"block","_id":"clzmfp952007gdgxrfnjz6nf5"},{"name":"OC","_id":"clzmfp953007kdgxrd3p8f1ye"},{"name":"内存管理","_id":"clzmfp953007mdgxrgj7p348n"},{"name":"autorelease","_id":"clzmfp954007sdgxrbzq2bg0w"},{"name":"ARC","_id":"clzmfp955007ydgxr3q0xhsto"},{"name":"空指针","_id":"clzmfp9560084dgxr8jfl717v"},{"name":"野指针","_id":"clzmfp9560085dgxrfvuc4pwr"},{"name":"内存","_id":"clzmfp957008cdgxr0ffdgxu1"},{"name":"反射","_id":"clzmfp957008idgxr1fvpe1ve"},{"name":"CALayer","_id":"clzmfp958008odgxrg9iq1pav"},{"name":"UIView","_id":"clzmfp958008pdgxr1k0m2yg5"},{"name":"frame","_id":"clzmfp959008wdgxr1b5q67wf"},{"name":"bounds","_id":"clzmfp959008xdgxrhugc604s"},{"name":"imageName","_id":"clzmfp95a0094dgxrg3m26gl9"},{"name":"View","_id":"clzmfp95b009adgxr493b7897"},{"name":"layout","_id":"clzmfp95b009bdgxrht0y88e7"},{"name":"定时器","_id":"clzmfp95c009idgxrfzcu27zr"},{"name":"循环引用","_id":"clzmfp95f009vdgxr11zi2u0f"},{"name":"Controller","_id":"clzmfp95g00a2dgxr00u14ez8"},{"name":"loadView","_id":"clzmfp95h00a8dgxre2lu6x7b"},{"name":"static","_id":"clzmfp95h00aedgxr4nmqh50g"},{"name":"extern","_id":"clzmfp95i00afdgxr7op32qbp"},{"name":"NSString","_id":"clzmfp95j00amdgxrf0r55cji"},{"name":"float","_id":"clzmfp95k00azdgxr1gfucj01"},{"name":"define","_id":"clzmfp95l00b4dgxr9w9v5v06"},{"name":"Runloop","_id":"clzmfp95n00bhdgxrg5cv17va"},{"name":"同步","_id":"clzmfp95o00bndgxrajki2m83"},{"name":"GCD","_id":"clzmfp95p00btdgxrduje5hci"},{"name":"Operation","_id":"clzmfp95p00budgxrdmoo4xns"},{"name":"WKWebView","_id":"clzmfp95q00c1dgxrghb52uaw"}]}}